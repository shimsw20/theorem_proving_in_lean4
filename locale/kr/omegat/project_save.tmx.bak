<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="OmegaT-4.3.2" segtype="sentence" srclang="en-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-US">
        <seg>"Type theory" gets its name from the fact that every expression has an
associated &lt;g1&gt;type&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135220Z" creationid="tlqk35" creationdate="20220321T135220Z">
        <seg>'유형론'은 그것의 이름을 모든 표현은 연관된 &lt;g1&gt;유형&lt;/g1&gt;을 가지고 있다는 사실로부터 갖게 되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#check Nat → Nat      -- type the arrow as "\to" or "\r"
#check Nat -&gt; Nat     -- alternative ASCII notation

#check Nat × Nat      -- type the product as "\times"
#check Prod Nat Nat   -- alternative notation

#check Nat → Nat → Nat
#check Nat → (Nat → Nat)  --  same type as above

#check Nat × Nat → Nat
#check (Nat → Nat) → Nat -- a "functional"

#check Nat.succ     -- Nat → Nat
#check (0, 1)       -- Nat × Nat
#check Nat.add      -- Nat → Nat → Nat

#check Nat.succ 2   -- Nat
#check Nat.add 3    -- Nat → Nat
#check Nat.add 5 2  -- Nat
#check (5, 9).1     -- Nat
#check (5, 9).2     -- Nat

#eval Nat.succ 2   -- 3
#eval Nat.add 5 2  -- 7
#eval (5, 9).1     -- 5
#eval (5, 9).2     -- 9</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140252Z" creationid="tlqk35" creationdate="20220321T140252Z">
        <seg>#check Nat → Nat      --화살표를 쓰기 위해서 "\to"나 "\r"를 치세요.
#check Nat -&gt; Nat     -- ASCII 표기의 대체표현입니다.

#check Nat × Nat      -- 곱하기를 쓰기 위해 "\times"를 치세요.
#check Prod Nat Nat   -- 대체 표현입니다.

#check Nat → Nat → Nat
#check Nat → (Nat → Nat)  -- 위와 같은 유형입니다.

#check Nat × Nat → Nat
#check (Nat → Nat) → Nat -- "범함수"

#check Nat.succ     -- Nat → Nat
#check (0, 1)       -- Nat × Nat
#check Nat.add      -- Nat → Nat → Nat

#check Nat.succ 2   -- Nat
#check Nat.add 3    -- Nat → Nat
#check Nat.add 5 2  -- Nat
#check (5, 9).1     -- Nat
#check (5, 9).2     -- Nat

#eval Nat.succ 2   -- 3
#eval Nat.add 5 2  -- 7
#eval (5, 9).1     -- 5
#eval (5, 9).2     -- 9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>#check fun (x : Nat) =&gt; x + 5   -- Nat → Nat
#check λ (x : Nat) =&gt; x + 5     -- λ and fun mean the same thing
#check fun x : Nat =&gt; x + 5     -- Nat inferred
#check λ x : Nat =&gt; x + 5       -- Nat inferred</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142214Z" creationid="tlqk35" creationdate="20220321T142214Z">
        <seg>#check fun (x : Nat) =&gt; x + 5   -- Nat → Nat
#check λ (x : Nat) =&gt; x + 5     --  λ 와 fun 같은 의미를 가집니다.
#check fun x : Nat =&gt; x + 5     --  Nat으로 추론됩니다.
#check λ x : Nat =&gt; x + 5       --  Nat으로 추론됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Lean will tell you that &lt;g2&gt;sub2&lt;/g2&gt; has been defined in terms
of an internal auxiliary function, &lt;g3&gt;sub2.match_1&lt;/g3&gt;, but you can print
that out too.) Lean uses these auxiliary functions to compile &lt;g4&gt;match&lt;/g4&gt; expressions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162747Z" creationid="tlqk3" creationdate="20220529T162747Z">
        <seg>(린은 여러분에게 &lt;g2&gt;sub2&lt;/g2&gt;가 내부의 보조 함수 &lt;g3&gt;sub2.match_1&lt;/g3&gt;에 대해서 정의되었다고 말할 것입니다. 그러나 여러분은 그것도 출력해볼 수 있습니다.) 린은 이 보조 함수를 &lt;g4&gt;match&lt;/g4&gt; 표현식을 컴파일하는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Making sense of the type of this function requires an understanding
of dependent products, which will be explained below.)</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143305Z" creationid="tlqk35" creationdate="20220321T143305Z">
        <seg>(이 함수의 유형들을 이해하는 것은 아래에서 설명할 의존 곱에 대한 이해가 필요합니다.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(Note that this description is somewhat
misleading, in that the arguments to the constructor can appear in any
order as long as the dependencies make sense.) The constraints on the
universe level of &lt;g4&gt;C&lt;/g4&gt; fall into two cases, depending on whether or
not the inductive type is specified to land in &lt;g5&gt;Prop&lt;/g5&gt; (that is,
&lt;g6&gt;Sort 0&lt;/g6&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152233Z" creationid="tlqk35" creationdate="20220528T161743Z">
        <seg>(그들의 의존성이 성립되는 한 인자가 생성자에 임의의 순서로 나타날 수 있다는 점에서 이 설명은 약간 오해로 이끌 수 있습니다.) &lt;g4&gt;C&lt;/g4&gt;의 세계 수준에서 귀납형이 &lt;g5&gt;Prop&lt;/g5&gt; (즉, &lt;g6&gt;Sort 0&lt;/g6&gt;)에 머무른다고 나타나져 있는지 아닌지에 따라 제약은 두 경우로 나누어 떨어집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(See also the discussion in
&lt;g14&gt;Section Decidable Propositions&lt;/g14&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191642Z" creationid="tlqk3" creationdate="20220610T191642Z">
        <seg>(&lt;g14&gt;결정 ​​가능 명제 섹션&lt;/g14&gt;의 논의를 참조하세요.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(The notation &lt;g2&gt;+&lt;/g2&gt;, as we have defined it, associates to the left, so &lt;g3&gt;m + n + k&lt;/g3&gt; is really &lt;g4&gt;(m + n) + k&lt;/g4&gt;.)
The hardest part is figuring out which variable to do the induction on.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162029Z" creationid="tlqk3" creationdate="20220527T162029Z">
        <seg>(&lt;g2&gt;+&lt;/g2&gt; 기호는 우리가 정의했다시피 왼쪽으로 결합됩니다. 그래서 &lt;g3&gt;m + n + k&lt;/g3&gt;은 사실 &lt;g4&gt;(m + n) + k&lt;/g4&gt;입니다.) 가장 어려운 부분은 어떤 변수에 귀납을 적용할 것인지 알아내는 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(The symbol &lt;g10&gt;¬&lt;/g10&gt; is produced by
typing &lt;g11&gt;\not&lt;/g11&gt; or &lt;g12&gt;\neg&lt;/g12&gt;.)</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164334Z" creationid="tlqk35" creationdate="20220321T164334Z">
        <seg>(기호 &lt;g10&gt;¬&lt;/g10&gt;은 &lt;g11&gt;\not&lt;/g11&gt;이나  &lt;g12&gt;\neg&lt;/g12&gt;을 치는 것으로 만들어집니다.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(To run these examples, we put them in a namespace called &lt;g1&gt;Hidden&lt;/g1&gt;,
so that a name like &lt;g2&gt;Bool&lt;/g2&gt; does not conflict with the &lt;g3&gt;Bool&lt;/g3&gt; in
the standard library.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152114Z" creationid="tlqk3" creationdate="20220526T152114Z">
        <seg>(이 예제를 실행하려면 우리는 &lt;g1&gt;Hidden&lt;/g1&gt;이라는 이름공간에 이들을 두어서 &lt;g2&gt;Bool&lt;/g2&gt;같은 이름이 표준 라이브러리에서의 &lt;g3&gt;Bool&lt;/g3&gt;과 출돌하지 않게 해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(You can enter it with &lt;g2&gt;\l&lt;/g2&gt; or
use the ascii equivalent, &lt;g3&gt;&lt;-&lt;/g3&gt;.) If brevity is what we are after,
both &lt;g4&gt;rw&lt;/g4&gt; and &lt;g5&gt;simp&lt;/g5&gt; can do the job on their own:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T085811Z" creationid="tlqk35" creationdate="20220321T180752Z">
        <seg>(여러분은 이것을 &lt;g2&gt;\l&lt;/g2&gt;을 치거나 아스키 형식 &lt;g3&gt;&lt;-&lt;/g3&gt;을 사용할 수 있습니다.) 간결함을 추구한다면 &lt;g4&gt;rw&lt;/g4&gt;과&lt;g5&gt;simp&lt;/g5&gt;이 알아서 처리해 줄 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>(fun x =&gt; x) :: []

-- In this example, implicit lambda introduction has been disabled because
-- we use `@` before `fun`
def id2 : {α : Type} → α → α :=</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135806Z" creationid="tlqk3" creationdate="20220526T135806Z">
        <seg>(fun x =&gt; x) :: []

-- 우리는 `fun` 앞에 `@`를 쓰기 때문에 
-- 이 예제에서 암시적인 람다의 도입은 해제되었습니다.
def id2 : {α : Type} → α → α :=</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>-/

#check m            -- output: Nat
#check n
#check n + 0        -- Nat
#check m * (n + 0)  -- Nat
#check b1           -- Bool
#check b1 &amp;&amp; b2     -- "&amp;&amp;" is the Boolean and
#check b1 || b2     -- Boolean or
#check true         -- Boolean "true"

/- Evaluate -/

#eval 5 * 4         -- 20
#eval m + 2         -- 3
#eval b1 &amp;&amp; b2      -- false</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135459Z" creationid="tlqk35" creationdate="20220321T135459Z">
        <seg>-/

#check m            -- output: Nat
#check n
#check n + 0        -- Nat
#check m * (n + 0)  -- Nat
#check b1           -- Bool
#check b1 &amp;&amp; b2     -- "&amp;&amp;"은 불리언 and
#check b1 || b2     -- 불리언 or
#check true         -- 불리언 "true"

/- Evaluate -/

#eval 5 * 4         -- 20
#eval m + 2         -- 3
#eval b1 &amp;&amp; b2      -- false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>-/

def m : Nat := 1       -- m is a natural number
def n : Nat := 0
def b1 : Bool := true  -- b1 is a Boolean
def b2 : Bool := false

/- Check their types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135403Z" creationid="tlqk35" creationdate="20220321T135342Z">
        <seg>-/

def m : Nat := 1       -- m은 자연수입니다.
def n : Nat := 0
def b1 : Bool := true  -- b1은 불리언입니다.
def b2 : Bool := false

/- 그들의 유형을 확인합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>/- Define some constants.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135320Z" creationid="tlqk35" creationdate="20220321T135320Z">
        <seg>/-  몇 가지 상수를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Automated theorem proving&lt;/g1&gt; focuses on the "finding" aspect.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131300Z" creationid="tlqk35" creationdate="20220321T131300Z">
        <seg>&lt;g1&gt;자동화된 정리 증명&lt;/g1&gt;은 '찾기'에 초점을 둡니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Axioms and Computation&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171151Z" creationid="tlqk35" creationdate="20220321T171151Z">
        <seg>&lt;g1&gt;공리와 계산(Axioms and Computation)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Dependent Type Theory&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170939Z" creationid="tlqk35" creationdate="20220321T170939Z">
        <seg>&lt;g1&gt;의존 유형론(Dependent Type Theory)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Diaconescu's theorem&lt;/g1&gt; states
that the axiom of choice is sufficient to derive the law of excluded
middle.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184914Z" creationid="tlqk3" creationdate="20220610T184914Z">
        <seg>&lt;g1&gt;디아코네스쿠의 정리(Diaconescu's theorem)&lt;/g1&gt;는 선택 공리가 배중률을 도출하기에 충분하다고 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Formal verification&lt;/g1&gt; involves the use of logical and computational methods to establish claims that are expressed in
precise mathematical terms.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131125Z" creationid="tlqk35" creationdate="20220321T131125Z">
        <seg>&lt;g1&gt;형식 증명&lt;/g1&gt;은 정밀한 수학적 항들로 표현된 주장을 세우는데 논리적이고 계산과학적 방법의 사용을 수반합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Induction and Recursion&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171105Z" creationid="tlqk35" creationdate="20220321T171105Z">
        <seg>&lt;g1&gt;유도와 재귀(Induction and Recursion)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Inductive Types&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151626Z" creationid="tlqk35" creationdate="20220321T171056Z">
        <seg>&lt;g1&gt;귀납형(Inductive Types)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Interacting with Lean&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171019Z" creationid="tlqk35" creationdate="20220321T171019Z">
        <seg>&lt;g1&gt;린과 상호작용하기(Interacting with Lean)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Introduction&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170931Z" creationid="tlqk35" creationdate="20220321T170931Z">
        <seg>&lt;g1&gt;소개(Introduction)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Propositions and Proofs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170947Z" creationid="tlqk35" creationdate="20220321T170947Z">
        <seg>&lt;g1&gt;명제와 증명(Propositions and Proofs)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Quantifiers and Equality&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T093957Z" creationid="tlqk35" creationdate="20220321T170959Z">
        <seg>&lt;g1&gt;한정기호와 동등(Quantifiers and Equality)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Record update&lt;/g1&gt; is another common operation which amounts to creating
a new record object by modifying the value of one or more fields in an
old one.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181016Z" creationid="tlqk35" creationdate="20220528T181016Z">
        <seg>&lt;g1&gt;레코드 업데이트&lt;/g1&gt;는 이전 필드에서 하나 이상의 필드 값을 수정하여 새 레코드 개체를 만드는 것과 같은 또 다른 흔한 연산입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Structures and Records&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171114Z" creationid="tlqk35" creationdate="20220321T171114Z">
        <seg>&lt;g1&gt;구조체와 레코드(Structures and Records)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;TODO: waiting for well-founded support in Lean 4&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171705Z" creationid="tlqk3" creationdate="20220603T171705Z">
        <seg>&lt;g1&gt;할 것: 린4가 지원하는 잘 세워진 식을 대기하기&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Tactic combinators&lt;/g1&gt; are operations that form new tactics from old
ones.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111007Z" creationid="tlqk35" creationdate="20220524T145640Z">
        <seg>&lt;g1&gt;Tactic combinators&lt;/g1&gt;은 이전의 전략으로부터 새 전략을 만드는 연산입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Tactics for Inductive Types&lt;/g1&gt; below will introduce additional
tactics that are specifically designed to make use of inductive types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152003Z" creationid="tlqk3" creationdate="20220526T151619Z">
        <seg>&lt;g1&gt;귀납형을 위한 전략&lt;/g1&gt; 아래에서 귀납형의 사용을 위해 특별히 고안된 추가 전략들을 도입할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Tactics&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171004Z" creationid="tlqk35" creationdate="20220321T171004Z">
        <seg>&lt;g1&gt;전략(Tactics)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;The Conversion Tactic Mode&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171141Z" creationid="tlqk35" creationdate="20220321T171141Z">
        <seg>&lt;g1&gt;전략 모드로 전환(The Conversion Tactic Mode)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Theorem Proving in Lean 4&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170925Z" creationid="tlqk35" creationdate="20220321T170925Z">
        <seg>&lt;g1&gt;린4로 하는 정리 증명&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;Type Classes&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152603Z" creationid="tlqk35" creationdate="20220321T171124Z">
        <seg>&lt;g1&gt;유형 클래스(Type Classes)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;apply &lt;term&gt;&lt;/g1&gt; is syntax sugar for &lt;g2&gt;tactic =&gt; apply &lt;term&gt;&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184838Z" creationid="tlqk3" creationdate="20220604T184838Z">
        <seg>&lt;g1&gt;apply &lt;term&gt;&lt;/g1&gt;은 &lt;g2&gt;tactic =&gt; apply &lt;term&gt;&lt;/g2&gt;에 대한 문법 설탕입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;arg i&lt;/g1&gt; enter the &lt;g2&gt;i&lt;/g2&gt;-th nondependent explicit argument of an application.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184113Z" creationid="tlqk3" creationdate="20220604T184113Z">
        <seg>&lt;g1&gt;arg i&lt;/g1&gt;는 적용의 &lt;g2&gt;i&lt;/g2&gt;번째 비의존적인 명시적 인수를 입력합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;args&lt;/g1&gt; alternative name for &lt;g2&gt;congr&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184152Z" creationid="tlqk3" creationdate="20220604T184152Z">
        <seg>&lt;g1&gt;args&lt;/g1&gt; &lt;g2&gt;congr&lt;/g2&gt;의 대체 이름</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;by Jeremy Avigad, Leonardo de Moura, Soonho Kong and Sebastian Ullrich, with contributions from the Lean Community&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171326Z" creationid="tlqk35" creationdate="20220321T171326Z">
        <seg>&lt;g1&gt;Jeremy Avigad, Leonardo de Moura, Soonho Kong and Sebastian Ullrich 및 Lean 커뮤니티의 기여자들 저</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;compose&lt;/g1&gt; also takes a 3rd argument of type &lt;g2&gt;α&lt;/g2&gt; which
it uses to invoke the second function (locally named &lt;g3&gt;f&lt;/g3&gt;) and it
passes the result of that function (which is type &lt;g4&gt;β&lt;/g4&gt;) as input to the
first function (locally named &lt;g5&gt;g&lt;/g5&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144548Z" creationid="tlqk35" creationdate="20220321T144548Z">
        <seg>&lt;g1&gt;compose&lt;/g1&gt;는 이는 두 번째 함수(지역적으로 &lt;g3&gt;f&lt;/g3&gt;라 하는)을 호출하는데 사용되기도 하는 유형 &lt;g2&gt;α&lt;/g2&gt; 를 세 번째 인수로 받습니다. 그리고 두 번째 합수는 그 함수의 결과(유형 &lt;g4&gt;β&lt;/g4&gt;의)를 첫 번째 함수(지역적으로 &lt;g5&gt;g&lt;/g5&gt;라 하는)의 입력으로 전달합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;compose&lt;/g1&gt; is also very general in that it works over any type
&lt;g2&gt;α β γ&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144628Z" creationid="tlqk35" creationdate="20220321T144628Z">
        <seg>&lt;g1&gt;compose&lt;/g1&gt;는 또 아주 일반적이어서 임의의 유형 &lt;g2&gt;α β γ&lt;/g2&gt;에 대해서도 작동합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;congr&lt;/g1&gt; creates as many targets as there are (nondependent and explicit) arguments to the current head function
(here the head function is multiplication).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182800Z" creationid="tlqk3" creationdate="20220604T182800Z">
        <seg>&lt;g1&gt;congr&lt;/g1&gt;은 현재 머리 함수 (여기서 머리 함수은 곱셈)에 대한 (비의존적 및 명시적) 인수만큼 많은 대상을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;def&lt;/g1&gt; can take multiple input parameters.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144242Z" creationid="tlqk35" creationdate="20220321T144242Z">
        <seg>&lt;g1&gt;def&lt;/g1&gt;는 다수의 입력 매개변수를 받을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;done&lt;/g1&gt; fail if there are unsolved goals.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184417Z" creationid="tlqk3" creationdate="20220604T184417Z">
        <seg>미해결 목표가 있으면 &lt;g1&gt;done&lt;/g1&gt;이 실패합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;enter [1, x, 2, y]&lt;/g1&gt; iterate &lt;g2&gt;arg&lt;/g2&gt; and &lt;g3&gt;intro&lt;/g3&gt; with the given arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184319Z" creationid="tlqk3" creationdate="20220604T184319Z">
        <seg>&lt;g1&gt;enter [1, x, 2, y]&lt;/g1&gt; 주어진 인수로 &lt;g2&gt;arg&lt;/g2&gt; 및 &lt;g3&gt;intro&lt;/g3&gt;를 반복합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;lhs&lt;/g1&gt; navigates to the left hand side of a relation (here equality), there is also a &lt;g2&gt;rhs&lt;/g2&gt; navigating to the right hand side.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182652Z" creationid="tlqk3" creationdate="20220604T182639Z">
        <seg>&lt;g1&gt;lhs&lt;/g1&gt;는 관계식의 좌변으로 이동하고(여기서는 등호), 우변으로 이동하는 &lt;g2&gt;rhs&lt;/g2&gt;도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;simp&lt;/g1&gt; applies the simplifier to the current goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184216Z" creationid="tlqk3" creationdate="20220604T184216Z">
        <seg>&lt;g1&gt;simp&lt;/g1&gt;는 현재 목표에 단순화기를 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;skip&lt;/g1&gt; goes to the next target.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182819Z" creationid="tlqk3" creationdate="20220604T182819Z">
        <seg>&lt;g1&gt;skip&lt;/g1&gt;는 다음 대상으로 이동합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;tactic =&gt; &lt;tactic sequence&gt;&lt;/g1&gt; go back to regular tactic mode.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184602Z" creationid="tlqk3" creationdate="20220604T184602Z">
        <seg>&lt;g1&gt; tactic =&gt; &lt;tactic sequence&gt;&lt;/g1&gt;는 보통의 전략 모드로 되돌아갑니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;traceState&lt;/g1&gt; display the current tactic state.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184431Z" creationid="tlqk3" creationdate="20220604T184431Z">
        <seg>&lt;g1&gt;traceState&lt;/g1&gt;는 현재 전략 상태를 표시합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g1&gt;whnf&lt;/g1&gt; put term in weak head normal form.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184527Z" creationid="tlqk3" creationdate="20220604T184527Z">
        <seg>&lt;g1&gt;whnf&lt;/g1&gt;은 항를 약한 머리 정규 형식에 둡니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g2&gt;Type 1&lt;/g2&gt; is then a larger universe of types, which contains &lt;g3&gt;Type
0&lt;/g3&gt; as an element, and &lt;g4&gt;Type 2&lt;/g4&gt; is an even larger universe of types,
which contains &lt;g5&gt;Type 1&lt;/g5&gt; as an element.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141659Z" creationid="tlqk35" creationdate="20220321T141659Z">
        <seg>&lt;g2&gt;Type 1&lt;/g2&gt;는  &lt;g3&gt;Type 0&lt;/g3&gt;를 원소로 갖는 유형들의 더 큰 세계이고 &lt;g4&gt;Type 2&lt;/g4&gt;는 &lt;g5&gt;Type 1&lt;/g5&gt;을 원소로 하는 유형들의 더욱 큰 세계입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g4&gt;Section wildcards and overlapping patterns&lt;/g4&gt;
expands on the notion of a wildcard, and &lt;g5&gt;Section Inaccessible Patterns&lt;/g5&gt; explains how
you can use implicit arguments in patterns as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163535Z" creationid="tlqk3" creationdate="20220529T163535Z">
        <seg>&lt;g4&gt;와일드카드와 중복된 패턴 섹션&lt;/g4&gt;은 와일드카드에 대한 개념을 넓히고 &lt;g5&gt;접근할 수 없는 패턴 섹션&lt;/g5&gt;은 여러분이 어떻게 패턴속에서도 암시적인 인수를 사용할 수 있는지 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g7&gt;Prop&lt;/g7&gt; has some special
features, but like the other type universes, it is closed under the
arrow constructor: if we have &lt;g8&gt;p q : Prop&lt;/g8&gt;, then &lt;g9&gt;p → q : Prop&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T105744Z" creationid="tlqk35" creationdate="20220321T155829Z">
        <seg>&lt;g7&gt;Prop&lt;/g7&gt;은 특별한 기능이 있습니다. 하지만 다른 유형 세계처럼, 화살표 생성자에 닫혀있습니다. 우리가 &lt;g8&gt;p q : Prop&lt;/g8&gt;갖는다면  &lt;g9&gt;p → q : Prop&lt;/g9&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;g8&gt;Type&lt;/g8&gt; is
an abbreviation for &lt;g9&gt;Type 0&lt;/g9&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141748Z" creationid="tlqk35" creationdate="20220321T141748Z">
        <seg>&lt;g8&gt;Type&lt;/g8&gt;는 &lt;g9&gt;Type 0&lt;/g9&gt;에 대한 약식 표현입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;tactics&gt;&lt;/g1&gt; (or &lt;g2&gt;· &lt;tactics&gt;&lt;/g2&gt;) for
structuring proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085615Z" creationid="shimsw" creationdate="20220814T085615Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A
number of identities in Lean's library have been tagged with the
&lt;g2&gt;[simp]&lt;/g2&gt; attribute, and the &lt;g3&gt;simp&lt;/g3&gt; tactic uses them to iteratively
rewrite subterms in an expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120553Z" creationid="tlqk35" creationdate="20220524T161005Z">
        <seg>린의 라이브러리 속 여러 항등식들은 &lt;g2&gt;[simp]&lt;/g2&gt; 속성으로 태그되어 있습니다.
그리고 &lt;g3&gt;simp&lt;/g3&gt; 전략은 이들을 표현식에서 부분항 재작성에 반복적으로 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A calculation can be viewed as a proof as well, and these systems,
too, help establish mathematical claims.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131354Z" creationid="tlqk35" creationdate="20220321T131354Z">
        <seg>계산도 증명의 관점으로 볼 수 있으며 이런 시스템들도 수학적 진술을 세우는데 도움을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A calculational proof is just a chain of intermediate results that are
meant to be composed by basic principles such as the transitivity of
equality.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T063939Z" creationid="tlqk35" creationdate="20220321T180241Z">
        <seg>계산 증명은 동등의 추이성같은 기본 원리로 구성된 중간 결과의 연쇄입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A canonical example is the type &lt;g1&gt;Nat&lt;/g1&gt; of
natural numbers:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154042Z" creationid="tlqk3" creationdate="20220527T154042Z">
        <seg>표준 예제는 자연수의 &lt;g1&gt;Nat&lt;/g1&gt;유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A common idiom is to simplify a goal using local hypotheses:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123347Z" creationid="tlqk35" creationdate="20220524T163538Z">
        <seg>흔한 관용구는 국부적인 가정을 사용해 목표를 단순화하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A constructor with multiple arguments introduces
conjunctive information: from an element &lt;g5&gt;Prod.mk a b&lt;/g5&gt; of
&lt;g6&gt;Prod α β&lt;/g6&gt; we can extract &lt;g7&gt;a&lt;/g7&gt; &lt;g8&gt;and&lt;/g8&gt; &lt;g9&gt;b&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160547Z" creationid="tlqk3" creationdate="20220526T160136Z">
        <seg>다수의 인수들이 있는 생성자는 결합적인 정보를 가져옵니다. &lt;g6&gt;Prod α β&lt;/g6&gt;의 원소  &lt;g5&gt;Prod.mk a b&lt;/g5&gt;으로부터 우리는 &lt;g7&gt;a&lt;/g7&gt;&lt;g8&gt;그리고&lt;/g8&gt;&lt;g9&gt;b&lt;/g9&gt;를 뽑아낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A disadvantage is that Lean does not have enough
information to infer the types of the arguments in the expressions
&lt;g3&gt;trans_r&lt;/g3&gt; and &lt;g4&gt;trans_r hab&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065705Z" creationid="tlqk35" creationdate="20220321T174331Z">
        <seg>단점은 린이 표현식 &lt;g3&gt;trans_r&lt;/g3&gt;과 &lt;g4&gt;trans_r hab&lt;/g4&gt;에서 인수의 유형을 추론하기에 충분한 정보가 없다는 점 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A first guess might be
&lt;g4&gt;Type → α → list α → list α&lt;/g4&gt;, but, on reflection, this does not make
sense: the &lt;g5&gt;α&lt;/g5&gt; in this expression does not refer to anything,
whereas it should refer to the argument of type &lt;g6&gt;Type&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151344Z" creationid="tlqk35" creationdate="20220321T151344Z">
        <seg>첫 번째 추측은 &lt;g4&gt;Type → α → list α → list α&lt;/g4&gt;일지 모릅니다. 그러나 생각해보면 이는 말이 되지 않습니다. 이 식에서 &lt;g5&gt;α&lt;/g5&gt;는 어떤 것도 지칭하지 않으므로 &lt;g6&gt;Type&lt;/g6&gt; 유형을 인수로 지칭해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A first thought might be to
use the &lt;g10&gt;casesOn&lt;/g10&gt; function:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175820Z" creationid="tlqk3" creationdate="20220603T175820Z">
        <seg>첫 고려사항은 &lt;g10&gt;casesOn&lt;/g10&gt; 함수를 사용하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A heartbeat is the number of
(small) memory allocations (in thousands), 0 means there is no limit.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180827Z" creationid="tlqk3" creationdate="20220604T180827Z">
        <seg>심박수는 (작은) 메모리 할당(천 단위)의 수이고, 0은 제한이 없음을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A list of elements of type &lt;g1&gt;α&lt;/g1&gt; is either the empty list, &lt;g2&gt;nil&lt;/g2&gt;, or
an element &lt;g3&gt;h : α&lt;/g3&gt; followed by a list &lt;g4&gt;t : List α&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163137Z" creationid="tlqk3" creationdate="20220527T163137Z">
        <seg>&lt;g1&gt;α&lt;/g1&gt;형 원소의 리스트는 빈 리스트 &lt;g2&gt;nil&lt;/g2&gt;이거나 리스트 &lt;g4&gt;t : List α&lt;/g4&gt;의 다음의 원소 &lt;g3&gt;h : α&lt;/g3&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A more exotic example is given by the definition of the equality type in Lean:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153402Z" creationid="tlqk35" creationdate="20220528T153402Z">
        <seg>더 특이한 예제는 린의 동등성 유형의 정의에 의해 제시됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A more interesting example of structural recursion is given by the Fibonacci function &lt;g1&gt;fib&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173634Z" creationid="tlqk3" creationdate="20220529T173634Z">
        <seg>구조적 재귀의 더 흥미로운 예제는 피보나치 함수 &lt;g1&gt;fib&lt;/g1&gt;로부터 제시됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A mutual inductive definition can also be used to define the notation
of a finite tree with nodes labelled by elements of &lt;g1&gt;α&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T165627Z" creationid="tlqk35" creationdate="20220528T165627Z">
        <seg>상호적 재귀 정의는 노드가 &lt;g1&gt;α&lt;/g1&gt;의 원소로 색인된 유한 트리의 기호를 정의하는데도 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A placeholder with precedence &lt;g5&gt;p&lt;/g5&gt;
accepts only notations with precedence at least &lt;g6&gt;p&lt;/g6&gt; in that place.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122822Z" creationid="tlqk3" creationdate="20220526T122822Z">
        <seg>우선순위가 &lt;g5&gt;p&lt;/g5&gt;인 자리차지자는 오직 그 자리에 적어도 &lt;g6&gt;p&lt;/g6&gt; 순위인 기호만을 받아들입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A proof of
&lt;g2&gt;p&lt;/g2&gt; is then simply an object &lt;g3&gt;t : p&lt;/g3&gt; of the right type.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T110519Z" creationid="tlqk35" creationdate="20220321T155903Z">
        <seg>그러면 &lt;g2&gt;p&lt;/g2&gt;의 증명은 단순히 대상 &lt;g3&gt;t : p&lt;/g3&gt;의 오른쪽 유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A proof term is a representation of a
mathematical proof; tactics are commands, or instructions, that
describe how to build such a proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082237Z" creationid="tlqk35" creationdate="20220321T184300Z">
        <seg>증명 항는 수학적 증명을 나타냅니다. 전술은 그러한 증명를 구축하는 법을 설명하는 명령 혹은 지시사항입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A sequencing combinator is already implicit in the &lt;g2&gt;by&lt;/g2&gt; block:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111045Z" creationid="tlqk35" creationdate="20220524T145725Z">
        <seg>순차 조합자는 이미 &lt;g2&gt;by&lt;/g2&gt; 블럭 속에 암시적으로 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A type, like &lt;g1&gt;Prod&lt;/g1&gt;, that has only one constructor is purely
conjunctive: the constructor simply packs the list of arguments into a
single piece of data, essentially a tuple where the type of subsequent
arguments can depend on the type of the initial argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T160903Z" creationid="tlqk3" creationdate="20220526T160903Z">
        <seg> &lt;g1&gt;Prod&lt;/g1&gt; 같이 한 생성자만 갖고 있는 유형은 순수하게 결합적입니다. 생성자는 단순히 인수 리스트를 하나의 데이터 조각으로 뭉칩니다. 본질적으로 순차적인 인수들의 유형인 튜플은 초기 인수의 유형에 의존할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>About Lean</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131709Z" creationid="tlqk35" creationdate="20220321T131709Z">
        <seg>린에 대해서</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>About this Book</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131959Z" creationid="tlqk35" creationdate="20220321T131959Z">
        <seg>이 책에 대하여</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>According to
its definition, &lt;g2&gt;Acc r x&lt;/g2&gt; is equivalent to
&lt;g3&gt;∀ y, r y x → Acc r y&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T174000Z" creationid="tlqk3" creationdate="20220529T174000Z">
        <seg>이것의 정의에 따르면 &lt;g2&gt;Acc r x&lt;/g2&gt;는 &lt;g3&gt;∀ y, r y x → Acc r y&lt;/g3&gt;과 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Acknowledgments</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135000Z" creationid="tlqk35" creationdate="20220321T135000Z">
        <seg>감사의 말</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Actually, Lean compiles the &lt;g1&gt;match&lt;/g1&gt; expressions using a definition based on
&lt;g2&gt;Eq.rec&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154402Z" creationid="tlqk35" creationdate="20220528T154402Z">
        <seg>실제로, 린은 &lt;g1&gt;match&lt;/g1&gt; 표현식을 &lt;g2&gt;Eq.rec&lt;/g2&gt;에 기반한 정의를 사용해 컴파일합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Actually, the definition above is expanded to</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162811Z" creationid="tlqk3" creationdate="20220529T162811Z">
        <seg>실제로 위 정의는 다음과 같이 확장됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Add support for hiding lines in other languages &lt;g1&gt;#1339&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171831Z" creationid="tlqk35" creationdate="20220321T171831Z">
        <seg>다른 언어 &lt;g1&gt;#1339&lt;/g1&gt;에서 선을 숨기는 것의 지원을 추가하기.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding such extra information can improve the clarity of a proof and
help detect errors when writing a proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T120552Z" creationid="tlqk35" creationdate="20220321T161105Z">
        <seg>이런 추가 정보를 더하는 것은 증명의 명확성을 높이고 증명을 작성할 때 오류를 발견하도록 돕습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Adding the &lt;g1&gt;local&lt;/g1&gt;
modifier restricts the scope:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183259Z" creationid="tlqk3" creationdate="20220525T183259Z">
        <seg>범위를 제한하기 위해 &lt;g1&gt;local&lt;/g1&gt; 수정자를 추가하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the first two lines, we have &lt;g1&gt;h : m &lt; n ∨ m ≥ n&lt;/g1&gt; as a
hypothesis, and we simply do cases on that.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T171140Z" creationid="tlqk3" creationdate="20220527T171140Z">
        <seg>첫 두 줄 이후에 우리는 &lt;g1&gt;h : m &lt; n ∨ m ≥ n&lt;/g1&gt;을 가정으로 갖습니다. 그리고 우리는 단순히 이에 대해 경우를 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>After the initial command name describing the operator kind (its
"fixity"), we give the &lt;g1&gt;parsing precedence&lt;/g1&gt; of the operator preceded
by a colon &lt;g2&gt;:&lt;/g2&gt;, then a new or existing token surrounded by double
quotes (the whitespace is used for pretty printing), then the function
this operator should be translated to after the arrow &lt;g3&gt;=&gt;&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122055Z" creationid="tlqk3" creationdate="20220526T122055Z">
        <seg>연산자 종류를 설명하는 초기 명령 이름 뒤에 (해당 "결합위치"), 콜론 &lt;g2&gt;:&lt;/g2&gt;으로 앞서는 연산자의  &lt;g1&gt;구문분석 우선순위&lt;/g1&gt;를 줍니다. 그 뒤 새로운 혹은 존재하는 토큰(깔끔한 출력을 위해 공백기호가 사용됨)은 큰 따옴표로 둘러쌓입니다. 그러면 이 연산자의 기능은 뒤따르는 화살표 &lt;g3&gt;=&gt;&lt;/g3&gt;로 번역되어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Algorithmically speaking, the &lt;g3&gt;Decidable&lt;/g3&gt; type class can
be used to infer a procedure that effectively determines whether or
not the proposition is true.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T171745Z" creationid="tlqk3" creationdate="20220604T171745Z">
        <seg>알고리즘적으로 말하자면 &lt;g3&gt;Decidable&lt;/g3&gt; 유형 클래스는 명제가 참인지 여부를 효과적으로 결정하는 절차를 추론하는데 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All that has changed are the braces around &lt;g1&gt;α : Type u&lt;/g1&gt; in the
declaration of the variables.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153209Z" creationid="tlqk35" creationdate="20220321T153209Z">
        <seg>바뀐 것이라곤 변수 선언에서 &lt;g1&gt;α : Type u&lt;/g1&gt; 주위의 괄호뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All the examples of pattern matching we considered in
:numref:&lt;g1&gt;pattern_matching&lt;/g1&gt; can easily be written using &lt;g2&gt;cases_on&lt;/g2&gt;
and &lt;g3&gt;rec_on&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175350Z" creationid="tlqk3" creationdate="20220603T175350Z">
        <seg>패턴 매칭의 모든 예제로부터 우리는 :numref:&lt;g1&gt;패턴 매칭&lt;/g1&gt;에서 &lt;g2&gt;cases_on&lt;/g2&gt;과 &lt;g3&gt;rec_on&lt;/g3&gt;를 사용해 쉽게 쓸 수 있음을 고려했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All this is also available to rewrite an hypothesis &lt;g1&gt;h&lt;/g1&gt; from the local context using &lt;g2&gt;conv at h&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183515Z" creationid="tlqk3" creationdate="20220604T183515Z">
        <seg>이 모든 것은 &lt;g2&gt;conv at h&lt;/g2&gt;를 사용하여 지역 상황에서 가정 &lt;g1&gt;h&lt;/g1&gt;를 다시쓰기 하는 데에도 이용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All you need to do is to provide a
label, and &lt;g7&gt;generalize&lt;/g7&gt; uses it to store the assignment in the local
context:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092221Z" creationid="tlqk35" creationdate="20220522T065819Z">
        <seg>여러분이 해야할 것은 레이블을 제공하는 것이고 그러면 &lt;g7&gt;generalize&lt;/g7&gt;가 지역 맥락에서 이를 사용해 할당물을 저장하는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Also in the &lt;g4&gt;Classical&lt;/g4&gt; namespace, the
function &lt;g5&gt;choose&lt;/g5&gt; and the property &lt;g6&gt;choose_spec&lt;/g6&gt; decompose the two
parts of the output of &lt;g7&gt;indefinite_description&lt;/g7&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184003Z" creationid="tlqk3" creationdate="20220610T184003Z">
        <seg>또한 &lt;g4&gt;Classical&lt;/g4&gt; 이름공간에서 함수 &lt;g5&gt;choose&lt;/g5&gt;와 &lt;g6&gt;choose_spec&lt;/g6&gt; 성질은 &lt;g7&gt;indefinite_description&lt;/g7&gt; 출력의 두 부분을 분해합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, you can
define tactic blocks usind curly braces and semicolons.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T110517Z" creationid="tlqk35" creationdate="20220524T145218Z">
        <seg>혹은 중괄호와 세미콜론으로 전략 블록을 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although the names of theorems and definitions have to be unique, the
aliases that identify them do not.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180325Z" creationid="tlqk35" creationdate="20220524T180059Z">
        <seg>로 확장됩니다. 정리와 정의의 이름은 고유하여야 함에도 별명은 그들을 식별하는 별명은 그렇지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although we love this feature and use it extensively when implementing Lean,
we realize some users may feel uncomfortable with it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134917Z" creationid="tlqk3" creationdate="20220526T134917Z">
        <seg>우리가 이 기능을 좋아하고 린을 구현할 때 광범위하게 이를 사용했지만 우리는 어떤 사용자들이 이것에 대해 불편하게 느끼는 것을 깨달았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An
element of &lt;g4&gt;Option β&lt;/g4&gt; is either &lt;g5&gt;none&lt;/g5&gt; or of the form &lt;g6&gt;some b&lt;/g6&gt;,
for some value &lt;g7&gt;b : β&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T150327Z" creationid="tlqk3" creationdate="20220527T150327Z">
        <seg>&lt;g4&gt;Option β&lt;/g4&gt;의 원소는 &lt;g5&gt;none&lt;/g5&gt;이거나 어떤 값 &lt;g7&gt;b : β&lt;/g7&gt;에 대한 &lt;g6&gt;some b&lt;/g6&gt;꼴 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An "axiom" would be a
constant of such a type.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T102940Z" creationid="tlqk35" creationdate="20220321T154916Z">
        <seg>"공리"는 그런 유형의 상수일 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An arbitrary inductive type can
include both features, by having any number of constructors, each of
which takes any number of arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152027Z" creationid="tlqk3" creationdate="20220526T160235Z">
        <seg>임의의 귀납형은 다수의 생성자를 갖거나 각각이 다수의 인수를 받게 함으로써 양쪽의 특징을 모두 포함할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element of &lt;g1&gt;Inhabited α&lt;/g1&gt; is simply a witness to the fact that
there is an element of &lt;g2&gt;α&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151406Z" creationid="tlqk3" creationdate="20220527T150730Z">
        <seg>&lt;g1&gt;Inhabited α&lt;/g1&gt;의 원소는 단지 &lt;g2&gt;α&lt;/g2&gt;의 원소가 있다는 사실에 대한 증인입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An element of the class &lt;g1&gt;Inhabited a&lt;/g1&gt; is simply an expression of the form &lt;g2&gt;Inhabited.mk x&lt;/g2&gt;, for some element &lt;g3&gt;x : a&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160235Z" creationid="tlqk3" creationdate="20220604T160235Z">
        <seg>클래스 &lt;g1&gt;Inhabited a&lt;/g1&gt;의 원소는 단순히 어떤 원소 &lt;g3&gt;x : a&lt;/g3&gt;에 대한 &lt;g2&gt;Inhabited.mk x&lt;/g2&gt;꼴의 표현식입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An expression like &lt;g2&gt;id&lt;/g2&gt; or &lt;g3&gt;List.nil&lt;/g3&gt; is
said to be &lt;g4&gt;polymorphic&lt;/g4&gt;, because it can take on different meanings in
different contexts.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153452Z" creationid="tlqk35" creationdate="20220321T153452Z">
        <seg>다른 맥락에서 다른 의미를 가질 수 있기 때문에 &lt;g2&gt;id&lt;/g2&gt; 나 &lt;g3&gt;List.nil&lt;/g3&gt; 같은 표현식을 &lt;g4&gt;다형적&lt;/g4&gt;이라 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An inductive family is an indexed family of types defined by a
simultaneous induction of the following form:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152145Z" creationid="tlqk35" creationdate="20220528T152723Z">
        <seg>귀납군은 다음 형태를 따르는 동시 재귀로 정의되는 유형의 색인된 군입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162058Z" creationid="tlqk35" creationdate="20220321T162058Z">
        <seg>논리곱</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And, indeed,
we do: the standard library defines &lt;g7&gt;WellFounded.fix&lt;/g7&gt;, which serves
exactly that purpose.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T175108Z" creationid="tlqk3" creationdate="20220529T174953Z">
        <seg>그리고 물론 우리는 이를 갖습니다. 표준 라이브러리는 바로 그 목적을 담당하는 &lt;g7&gt;WellFounded.fix&lt;/g7&gt;를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And, indeed, it does:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143641Z" creationid="tlqk35" creationdate="20220321T143641Z">
        <seg>그리고 당연히 그럽니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another good example of a recursive definition is the list &lt;g1&gt;append&lt;/g1&gt; function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165213Z" creationid="tlqk3" creationdate="20220603T165213Z">
        <seg>재귀적 정의의 또 다른 좋은 예제는 리스트 &lt;g1&gt;append&lt;/g1&gt; 함수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another tactic that is sometimes useful is the &lt;g1&gt;revert&lt;/g1&gt; tactic,
which is, in a sense, an inverse to &lt;g2&gt;intro&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091049Z" creationid="tlqk35" creationdate="20220522T063942Z">
        <seg>때때로 유용한 또 다른 전략은 &lt;g1&gt;revert&lt;/g1&gt;전략입니다. 이는 &lt;g2&gt;intro&lt;/g2&gt;의 역 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any text between &lt;g1&gt;/-&lt;/g1&gt; and &lt;g2&gt;-/&lt;/g2&gt; constitutes a comment block that is
ignored by Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135531Z" creationid="tlqk35" creationdate="20220321T135531Z">
        <seg> &lt;g1&gt;/-&lt;/g1&gt;과 &lt;g2&gt;-/&lt;/g2&gt; 사이의 모든 글은 린에게 무시하라고 가리키는 주석을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Application can be
viewed as an "elimination rule," showing how to "eliminate" or use an
implication in a proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124007Z" creationid="tlqk35" creationdate="20220321T162433Z">
        <seg>적용은 어떻게 "제거"하는지 혹은 증명에서 함의를 어떻게사용하는지를 보여주는 "제거 규칙"으로 봅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying
it again yields &lt;g6&gt;succ (succ zero) : Nat&lt;/g6&gt;, and so on.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154310Z" creationid="tlqk3" creationdate="20220527T154310Z">
        <seg>이를 다시 적용하여 &lt;g6&gt;succ (succ zero) : Nat&lt;/g6&gt;을 얻습니다. 그리고 계속됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying it to &lt;g4&gt;zero&lt;/g4&gt; yields &lt;g5&gt;succ zero : Nat&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154246Z" creationid="tlqk3" creationdate="20220527T154246Z">
        <seg>이를 &lt;g4&gt;zero&lt;/g4&gt;에 적용하여&lt;g5&gt;succ zero : Nat&lt;/g5&gt;을 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying the theorem
&lt;g4&gt;t1 : p → q → p&lt;/g4&gt; to the fact &lt;g5&gt;hp : p&lt;/g5&gt; that &lt;g6&gt;p&lt;/g6&gt; is true yields the theorem
&lt;g7&gt;t1 hp : q → p&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121529Z" creationid="tlqk35" creationdate="20220321T161351Z">
        <seg>정리&lt;g4&gt;t1 : p → q → p&lt;/g4&gt;에 사실 &lt;g5&gt;hp : p&lt;/g5&gt;을 적용하는 것은 &lt;g6&gt;p&lt;/g6&gt;가 참임은 정리&lt;g7&gt;t1 hp : q → p&lt;/g7&gt;을 얻게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying this to the "hypothesis" &lt;g4&gt;hab : r a b&lt;/g4&gt;, we get a proof
of the implication &lt;g5&gt;r b c → r a c&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065318Z" creationid="tlqk35" creationdate="20220321T174050Z">
        <seg>이것에 "가정" &lt;g4&gt;hab : r a b&lt;/g4&gt;를 적용하여 우리는 함의 &lt;g5&gt;r b c → r a c&lt;/g5&gt;의 증명을 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Architectures like SMT ("satisfiability
modulo theories") combine domain-general search methods with domain-specific procedures.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131338Z" creationid="tlqk35" creationdate="20220321T131338Z">
        <seg>SMT(Satisfiability Modulo Theories)같은 구조는 영역-일반 탐색법을 영역-특정 절차와 결합했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a
result, we can also prove the theorem as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180525Z" creationid="tlqk35" creationdate="20220321T180525Z">
        <seg>결론적으로 다음과 같이 정리를 증명할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a convenience, pattern-matching has been integrated into tactics such as &lt;g1&gt;intro&lt;/g1&gt; and &lt;g2&gt;funext&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172409Z" creationid="tlqk3" creationdate="20220527T172409Z">
        <seg>편리하기에 패턴 매칭은 &lt;g1&gt;intro&lt;/g1&gt;와 &lt;g2&gt;funext&lt;/g2&gt; 같은 전략에 합쳐졌습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a final example, we observe that Ackermann's function can be
defined directly, because it is justified by the well foundedness of
the lexicographic order on the natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172925Z" creationid="tlqk3" creationdate="20220603T172925Z">
        <seg>마지막 예제로 우리는 Ackermann 함수가 직접적으로 정의되는 것을 관찰합니다. 왜냐하면 이것은 자연수에 대해 사전적 순서로 잘 세워짐으로 정당활 될 수 있기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a first example, let us prove example
&lt;g1&gt;(a b c : Nat) : a * (b * c) = a * (c * b)&lt;/g1&gt;
(examples in this file are somewhat artificial since
other tactics could finish them immediately).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182230Z" creationid="tlqk3" creationdate="20220604T182230Z">
        <seg>첫 번째 예로서 &lt;g1&gt;(a b c : Nat) : a * (b * c) = a * (c * b)&lt;/g1&gt; 예제를 증명해 봅시다. (다른 전술로 이 예제를 즉시 끝낼 수 있기에 이것은 다소 인위적입니다.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a further exercise, we
suggest defining boolean operations &lt;g1&gt;and&lt;/g1&gt;, &lt;g2&gt;or&lt;/g2&gt;, &lt;g3&gt;not&lt;/g3&gt; on the
&lt;g4&gt;Bool&lt;/g4&gt; type, and verifying common identities.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152416Z" creationid="tlqk3" creationdate="20220526T152416Z">
        <seg>추가 연습으로 우리는 &lt;g4&gt;Bool&lt;/g4&gt;형에 불리언연산 &lt;g1&gt;and&lt;/g1&gt;, &lt;g2&gt;or&lt;/g2&gt;, &lt;g3&gt;not&lt;/g3&gt;을 정의하는 것을 제안합니다. 그리고 일반적인 항등식을 확인해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a notational convention, we give the universal quantifier the
widest scope possible, so parentheses are needed to limit the
quantifier over &lt;g1&gt;x&lt;/g1&gt; to the hypothesis in the example above.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064544Z" creationid="tlqk35" creationdate="20220321T173738Z">
        <seg>기호 규약으로써 우리는 전칭 한정기호에게 가능한 가장 넓은 범위를 줍니다. 그래서 위의 예제에서 가정의 &lt;g1&gt;x&lt;/g1&gt;만 정량화하도록 제한하는 괄호가 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, &lt;g1&gt;f₁&lt;/g1&gt; is equal to &lt;g2&gt;f₂&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T182818Z" creationid="tlqk3" creationdate="20220610T182818Z">
        <seg>결과적으로 &lt;g1&gt;f₁&lt;/g1&gt;는 &lt;g2&gt;f₂&lt;/g2&gt;와 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, &lt;g4&gt;Eq.subst&lt;/g4&gt; doesn't always do what you want it
to.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T083358Z" creationid="tlqk35" creationdate="20220321T180122Z">
        <seg>결과적으로 &lt;g4&gt;Eq.subst&lt;/g4&gt;은 여러분이 원하는 대로 항상 행하지 못합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, given &lt;g1&gt;h : p ∧ q&lt;/g1&gt;, we can write &lt;g2&gt;h.left&lt;/g2&gt; for
&lt;g3&gt;And.left h&lt;/g3&gt; and &lt;g4&gt;h.right&lt;/g4&gt; for &lt;g5&gt;And.right h&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T133048Z" creationid="tlqk35" creationdate="20220321T163449Z">
        <seg>따라서 &lt;g1&gt;h : p ∧ q&lt;/g1&gt;일 때 &lt;g3&gt;And.left h&lt;/g3&gt;를 &lt;g2&gt;h.left&lt;/g2&gt;로 그리고 &lt;g5&gt;And.right h&lt;/g5&gt;를 &lt;g4&gt;h.right&lt;/g4&gt; 로 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, most of the examples we present here
work "out of the box."</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173932Z" creationid="tlqk35" creationdate="20220524T173932Z">
        <seg>그 결과 우리가 여기에 소개하는 대부분의 예제는 상식 밖의 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, some nontrivial identities can be proved by
reflexivity:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082006Z" creationid="tlqk35" creationdate="20220321T175642Z">
        <seg>결과적으로 어떤 명백하지 않은 항등식들이 대칭성으로부터 증명될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, the
next argument to the recursor specifies a value for &lt;g12&gt;f (succ n)&lt;/g12&gt; in
terms of &lt;g13&gt;n&lt;/g13&gt; and &lt;g14&gt;f n&lt;/g14&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155230Z" creationid="tlqk3" creationdate="20220527T155230Z">
        <seg>그 결과 재귀자에 대한 다음 인수는 &lt;g13&gt;n&lt;/g13&gt;과 &lt;g14&gt;f n&lt;/g14&gt;에 대해서 &lt;g12&gt;f (succ n)&lt;/g12&gt;에 대한 값을 명시합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, the introduction of the connective
&lt;g7&gt;Implies&lt;/g7&gt; is entirely redundant: we can use the usual function space
constructor &lt;g8&gt;p → q&lt;/g8&gt; from dependent type theory as our notion of
implication.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T105042Z" creationid="tlqk35" creationdate="20220321T155647Z">
        <seg>따라서 결합자 &lt;g7&gt;Implies&lt;/g7&gt;의 도입은 완전히 중복됩니다. 그래서 &lt;g8&gt;p → q&lt;/g8&gt;을 의존유형론에서 함의 개념으로 평소의 함수공간 생성자를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a result, the type class supports such
computational definitions when they are possible while at the same
time allowing a smooth transition to the use of classical definitions
and classical reasoning.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172056Z" creationid="tlqk3" creationdate="20220604T172056Z">
        <seg>결과적으로 유형 클래스는 그들이 가능할 때 그런 계산적 정의를 지원하는 동시에 고전적 정의와 고전 추론의 사용으로 원활히 넘어가는 것을 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As a theorem of propositional logic, what does &lt;g1&gt;t2&lt;/g1&gt; say?</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161756Z" creationid="tlqk35" creationdate="20220321T161756Z">
        <seg>명제 논리의 정리로써 &lt;g1&gt;t2&lt;/g1&gt;가 말하는 것은 무엇인가요?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example of classical reasoning, we use &lt;g1&gt;choose&lt;/g1&gt; to show that if
&lt;g2&gt;f : α → β&lt;/g2&gt; is injective and &lt;g3&gt;α&lt;/g3&gt; is inhabited, then &lt;g4&gt;f&lt;/g4&gt; has a
left inverse.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191022Z" creationid="tlqk3" creationdate="20220610T191022Z">
        <seg>고전적 추론의 예로서 &lt;g1&gt;choose&lt;/g1&gt;를 사용하여 &lt;g2&gt;f : α → β&lt;/g2&gt;가 형용사이고 &lt;g3&gt;α&lt;/g3&gt;가 내제된 경우 &lt;g4&gt;f&lt;/g4&gt;는 왼쪽 역함수를 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, the following settings yield much longer output:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130037Z" creationid="tlqk3" creationdate="20220526T130037Z">
        <seg>예제로 다음 설정은 훨씬 더 긴 출력을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an exercise, prove the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163244Z" creationid="tlqk3" creationdate="20220527T163244Z">
        <seg>연습으로 다음을 증명하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an exercise, try defining default instances for other types, such as &lt;g1&gt;List&lt;/g1&gt; and &lt;g2&gt;Sum&lt;/g2&gt; types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161618Z" creationid="tlqk3" creationdate="20220604T161618Z">
        <seg>연습으로 &lt;g1&gt;List&lt;/g1&gt;형과 &lt;g2&gt;Sum&lt;/g2&gt;형 같은 다른 유형에 대한 기본 개체를 정의해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an exercise, try to understand
why the definition of &lt;g12&gt;foo&lt;/g12&gt; below type checks, but the definition of
&lt;g13&gt;bar&lt;/g13&gt; does not.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145104Z" creationid="tlqk35" creationdate="20220321T145104Z">
        <seg>연습으로 아래 유형 확인에서 &lt;g12&gt;foo&lt;/g12&gt;의 정의가 왜 그런지 그러나  &lt;g13&gt;bar&lt;/g13&gt;의 정의는 그렇지 않은지 이해하려고 해 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an exercise, you might
try proving the converse, that is, showing that &lt;g5&gt;em&lt;/g5&gt; can be proved
from &lt;g6&gt;dne&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T163217Z" creationid="tlqk35" creationdate="20220321T165846Z">
        <seg>연습으로 여러분은 그 역을 증명해보세요. 즉, &lt;g5&gt;em&lt;/g5&gt;이 &lt;g6&gt;dne&lt;/g6&gt;로부터 증명될 수 있음을 보이세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an exercise, you should think about what the introduction and
elimination rules for these types do.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152259Z" creationid="tlqk3" creationdate="20220526T152259Z">
        <seg>연습으로 여러분은 이 유형들에 대한 도입과 제거 규칙이 하는 것에 대해 생각해봐야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As another example, here is how we can express the fact that a relation, &lt;g1&gt;r&lt;/g1&gt;, is transitive:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065056Z" creationid="tlqk35" creationdate="20220321T173951Z">
        <seg>또 다른 예제처럼 여기서는 관계 &lt;g1&gt;r&lt;/g1&gt;이 추이적임을 어떻게 표현할 수 있는지 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As another example, let us consider the composition function discussed
in the last chapter, now with propositions instead of types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161738Z" creationid="tlqk35" creationdate="20220321T161738Z">
        <seg>또 다른 예로써 지금은 유형 대신 명제로 지난 장에서 논한 합성함수를 고려해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As before, the recursor for &lt;g1&gt;Nat&lt;/g1&gt; is designed to define a dependent
function &lt;g2&gt;f&lt;/g2&gt; from &lt;g3&gt;Nat&lt;/g3&gt; to any domain, that is, an element &lt;g4&gt;f&lt;/g4&gt;
of &lt;g5&gt;(n : nat) → motive n&lt;/g5&gt; for some &lt;g6&gt;motive : Nat → Sort u&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154854Z" creationid="tlqk3" creationdate="20220527T154854Z">
        <seg>전처럼 &lt;g1&gt;Nat&lt;/g1&gt;에 대한 재귀자는 의존함수 &lt;g2&gt;f&lt;/g2&gt;를 &lt;g3&gt;Nat&lt;/g3&gt;에서 임의의 영역으로 정의하도록 설계되었습니다. 즉,  어떤 &lt;g6&gt;motive : Nat → Sort u&lt;/g6&gt;에 대해 &lt;g5&gt;(n : nat) → motive n&lt;/g5&gt;의 원소가 &lt;g4&gt;f&lt;/g4&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As described in &lt;g1&gt;Chapter Inductive Types&lt;/g1&gt;,
inductive data types can depend on parameters.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163609Z" creationid="tlqk3" creationdate="20220529T163609Z">
        <seg>&lt;g1&gt;재귀형 장&lt;/g1&gt;에서 설명했다시피 재귀 데이터형은 매개변수에 의존합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As exercises, we encourage you to develop a notion of composition for
partial functions from &lt;g1&gt;α&lt;/g1&gt; to &lt;g2&gt;β&lt;/g2&gt; and &lt;g3&gt;β&lt;/g3&gt; to &lt;g4&gt;γ&lt;/g4&gt;, and show
that it behaves as expected.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151124Z" creationid="tlqk3" creationdate="20220527T151124Z">
        <seg>연습으로 우리는 여러분이 &lt;g1&gt;α&lt;/g1&gt;에서&lt;g2&gt;β&lt;/g2&gt;까지 그리고 &lt;g3&gt;β&lt;/g3&gt; to &lt;g4&gt;γ&lt;/g4&gt;까지 부분 함수에 대한 합성의 개념을 만들도록 권장합니다. 그리고 그것이 기대한 바처럼 행동하는 것을 보여주세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As expected, the expression &lt;g1&gt;(fun x : Nat =&gt;  x) 1&lt;/g1&gt; has type &lt;g2&gt;Nat&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143602Z" creationid="tlqk35" creationdate="20220321T143602Z">
        <seg>예상했다시피 표현식&lt;g1&gt;(fun x : Nat =&gt; x) 1&lt;/g1&gt; 은 &lt;g2&gt;Nat&lt;/g2&gt; 유형을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As for
&lt;g13&gt;Quot.lift&lt;/g13&gt;, given a function &lt;g14&gt;f : α → β&lt;/g14&gt;, if &lt;g15&gt;h&lt;/g15&gt; is a proof
that &lt;g16&gt;f&lt;/g16&gt; respects the relation &lt;g17&gt;r&lt;/g17&gt;, then &lt;g18&gt;Quot.lift f h&lt;/g18&gt; is the
corresponding function on &lt;g19&gt;Quot r&lt;/g19&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T182306Z" creationid="tlqk3" creationdate="20220605T182306Z">
        <seg>&lt;g13&gt;Quot.lift&lt;/g13&gt;의 경우, 함수 &lt;g14&gt;f : α → β&lt;/g14&gt;가 주어지고 &lt;g15&gt;h&lt;/g15&gt;가 &lt;g16&gt;f&lt;/g16&gt; 관계 &lt;g17&gt;r&lt;/g17&gt;에 대한 함수이면 &lt;g18&gt;Quot.lift f h&lt;/g18&gt;는 &lt;g19&gt;Quot r&lt;/g19&gt;로 대응하는 함수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As in Lean 3, the notation is activated using parentheses, and the lambda abstraction is created by collecting the nested &lt;g1&gt;·&lt;/g1&gt;s.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140247Z" creationid="tlqk3" creationdate="20220526T140247Z">
        <seg>린 3에서처럼 표기는 괄호를 사용해 활성화되고 람다 추상화는 중첩된 &lt;g1&gt;·&lt;/g1&gt;의 모음으로 만들어집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As mentioned above, the &lt;g1&gt;notation&lt;/g1&gt; command allows us to define
arbitrary &lt;g2&gt;mixfix&lt;/g2&gt; syntax freely mixing tokens and placeholders.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123756Z" creationid="tlqk3" creationdate="20220526T123756Z">
        <seg>위에서 언급한 대로, &lt;g1&gt;notation&lt;/g1&gt; 명령은 우리가 임의의 자유롭게 토큰과 자리차지자를 혼합한 &lt;g2&gt;mixfix&lt;/g2&gt; 문법을 정의하도록 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As noted above, however, use of
the law of the excluded middle is still compatible with bytecode
compilation and code extraction, as are other classical principles, as
long as they are not used to manufacture data.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163717Z" creationid="tlqk3" creationdate="20220605T163717Z">
        <seg>그러나 위에서 언급한 대로 여전히 배중률의 사용은 다른 고전 원리처럼 데이터를 만드는데 이들이 사용되지만 않는다면 바이트 코드 컴파일 및 코드 추출과 호환됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As noted above, the type class instances in a given context represent
a Prolog-like program, which gives rise to a backtracking search.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181125Z" creationid="tlqk3" creationdate="20220604T181125Z">
        <seg>위에서 언급했듯이 주어진 상황의 유형 클래스 개체는 역추적 검색을 발생시키는 Prolog와 유사한 프로그램을 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As observed above, the induction principle is just a special case of the recursion principle,
when the codomain &lt;g2&gt;motive n&lt;/g2&gt; is an element of &lt;g3&gt;Prop&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160920Z" creationid="tlqk3" creationdate="20220527T160920Z">
        <seg>위에서 봤듯이 공동역역 &lt;g2&gt;motive n&lt;/g2&gt;이 &lt;g3&gt;Prop&lt;/g3&gt;의 원소일 때 귀납 원리는 재귀 원리의 특별한 경우일 뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As the &lt;g1&gt;apply&lt;/g1&gt; tactic is a command for constructing function
applications interactively, the &lt;g2&gt;intro&lt;/g2&gt; tactic is a command for
constructing function abstractions interactively (i.e., terms of the
form &lt;g3&gt;fun x =&gt; e&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090054Z" creationid="tlqk35" creationdate="20220522T062425Z">
        <seg> &lt;g1&gt;apply&lt;/g1&gt; 전략이 함수의 활용을 상호작용 방식으로 구성하는 명령인 것처럼 
&lt;g2&gt;intro&lt;/g2&gt; 전략은 상호작용 방식으로 함수 추상화를 구성하는 명령입니다. 
(즉, &lt;g3&gt;fun x =&gt; e&lt;/g3&gt; 꼴의 항들)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As the example above suggests, you have already seen an example of a function of type
&lt;g1&gt;Type → Type → Type&lt;/g1&gt;, namely, the Cartesian product &lt;g2&gt;Prod&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141444Z" creationid="tlqk35" creationdate="20220321T141444Z">
        <seg>위 예에서 제안한 것처럼 여러분은 이미 주로 카테시안 곱 &lt;g2&gt;Prod&lt;/g2&gt;에서 &lt;g1&gt;Type → Type → Type&lt;/g1&gt; 유형의 함수의 예를 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As the second example shows, the &lt;g1&gt;contradiction&lt;/g1&gt; tactic also detects contradictions of this form.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T173201Z" creationid="tlqk3" creationdate="20220527T173201Z">
        <seg>두 번째 예제가 보여주다시피 &lt;g1&gt;contradiction&lt;/g1&gt; 전략도 이 형태의 모순을 감지합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As usual, the constructors are kept in a namespace that is named after the type being defined, and the command &lt;g4&gt;open even odd&lt;/g4&gt; allows us to access them move conveniently.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174833Z" creationid="tlqk3" creationdate="20220603T174833Z">
        <seg>평소처럼, 생성자는 유형이 정의된 이름을 딴 이름공간에 남아있고, 명령  &lt;g4&gt;open even odd&lt;/g4&gt;는 우리가 그들에게 더 편리하게 접근하도록 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As usual, you can avoid the prefix &lt;g1&gt;Point&lt;/g1&gt; by using
the command &lt;g2&gt;open Point&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174304Z" creationid="tlqk35" creationdate="20220528T174304Z">
        <seg>평소처럼 여러분은 &lt;g2&gt;open Point&lt;/g2&gt;명령을 사용해 접두사 &lt;g1&gt;Point&lt;/g1&gt;를 생략할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As was the case for implication, the propositions-as-types
interpretation now comes into play.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T061439Z" creationid="tlqk35" creationdate="20220321T173005Z">
        <seg>함의의 경우 때와 같이 유형으로써 명제 해석이 이제 등장합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we
have seen, a pattern is either a variable, a constructor applied to
other patterns, or an expression that normalizes to something of that
form (where the non-constructors are marked with the &lt;g7&gt;[matchPattern]&lt;/g7&gt;
attribute).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T171023Z" creationid="tlqk3" creationdate="20220529T171023Z">
        <seg>우리가 봤던 것처럼 패턴은 생성자가 다른 패턴을 적용한 변수이거나 그 형태를 무언가로 정규화한 표현식입니다. (여기서 비생성자는 &lt;g7&gt;[matchPattern]&lt;/g7&gt; 속성으로 표시되었습니다.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we mentioned above, the argument &lt;g1&gt;{n : Nat}&lt;/g1&gt; is part of the
pattern matching, because it cannot be held fixed throughout the
definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T150906Z" creationid="tlqk3" creationdate="20220604T150906Z">
        <seg>위에서 언급했듯이 인수 &lt;g1&gt;{n : Nat}&lt;/g1&gt;은 패턴 매칭의 일부입니다. 왜냐하면 이것은 정의 전체에 대해 고정될 수 없기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we saw in the last section, the terms &lt;g1&gt;t₁, ..., tₙ&lt;/g1&gt; can make use
of any of the parameters &lt;g2&gt;a&lt;/g2&gt;, as well as any of the variables that
are introduced in the corresponding patterns.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T171859Z" creationid="tlqk3" creationdate="20220529T171859Z">
        <seg>우리가 지난 섹션에서 보았듯이, 항 &lt;g1&gt;t₁, ..., tₙ&lt;/g1&gt;은 대응되는 패턴에서 도입된 임의의 변수 뿐만 아니라 임의의 매개변수 &lt;g2&gt;a&lt;/g2&gt;를 사용할 수 있게 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As we will discuss further in
&lt;g1&gt;Attributes&lt;/g1&gt;, one can limit the scope of an attribute to the
current file or section using the &lt;g2&gt;local&lt;/g2&gt; modifier:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171536Z" creationid="tlqk35" creationdate="20220524T165401Z">
        <seg>&lt;g1&gt;Attributes&lt;/g1&gt;에서 더 논의할 것이지만 누군가는 &lt;g2&gt;local&lt;/g2&gt; 수정자를 
사용해 특성의 범위를 현재 파일이나 섹션으로 제한할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with &lt;g1&gt;have&lt;/g1&gt;, you can leave the type implicit by writing &lt;g2&gt;let a
:= 3 * 2&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105836Z" creationid="tlqk35" creationdate="20220524T144507Z">
        <seg>&lt;g1&gt;have&lt;/g1&gt;처럼 여러분은  &lt;g2&gt;let a:= 3 * 2&lt;/g2&gt;와 같이 작성하여 유형을 암시적으로 둘 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with &lt;g1&gt;rewrite&lt;/g1&gt;, you can send &lt;g2&gt;simp&lt;/g2&gt; a list of facts to use,
including general lemmas, local hypotheses, definitions to unfold, and
compound expressions.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123300Z" creationid="tlqk35" creationdate="20220524T163106Z">
        <seg>&lt;g1&gt;rewrite&lt;/g1&gt;처럼 일반적인 보조정리, 국부적인 가정, 펼친 정의와 복합 표현식을 포함해 
&lt;g2&gt;simp&lt;/g2&gt;가 사용할 사실들의 리스트를 보낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with &lt;g1&gt;rw&lt;/g1&gt;, you can use the keyword &lt;g2&gt;at&lt;/g2&gt; to simplify a hypothesis:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T121158Z" creationid="tlqk35" creationdate="20220524T161708Z">
        <seg>&lt;g1&gt;rw&lt;/g1&gt;처럼 키워드 &lt;g2&gt;at&lt;/g2&gt;으로 가정을 단순화 하는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with definition by pattern matching, parameters to a structural
recursion or induction may appear before the colon.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173445Z" creationid="tlqk3" creationdate="20220529T173445Z">
        <seg>패턴 매칭의 정의에서처럼 구조적 재귀나 귀납에 대한 매개변수는 콜론 앞에 나타날 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with definitions, the &lt;g1&gt;#print&lt;/g1&gt; command will show you the proof of
a theorem.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161013Z" creationid="tlqk35" creationdate="20220321T161013Z">
        <seg>정의와 마찬가지로 &lt;g1&gt;#print&lt;/g1&gt;명령은 정리의 증명을 여러분에게 보여줄 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with function definitions, Lean's inductive definition syntax will
let you put named arguments to the constructors before the colon:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160612Z" creationid="tlqk3" creationdate="20220526T160315Z">
        <seg>함수 정의에서 처럼 린의 유도 정의 문법은 여러분이 이름붙은 인수를 콜론 앞에 생성자에 놓게 할 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with lambda abstraction notation, the
&lt;g4&gt;intro&lt;/g4&gt; tactic allows us to use an implicit &lt;g5&gt;match&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T062521Z" creationid="tlqk35" creationdate="20220522T062511Z">
        <seg>람다 추상화 기호처럼 &lt;g4&gt;intro&lt;/g4&gt; 전략은 암시적인 &lt;g5&gt;match&lt;/g5&gt;를 쓸 수 있도록 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with ordinary definitions, we can move the lambda-abstracted
variables to the left of the colon:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121000Z" creationid="tlqk35" creationdate="20220321T161130Z">
        <seg>평범한 정의처럼 우리는 람다 추상화된 변수를 콜론(:)의 왼쪽으로 옮길 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with proof terms, you can omit the label in the &lt;g1&gt;have&lt;/g1&gt; tactic, in
which case, the default label &lt;g2&gt;this&lt;/g2&gt; is used:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105451Z" creationid="tlqk35" creationdate="20220524T143904Z">
        <seg>증명 항과 마찬가지로 여러분은  &lt;g1&gt;have&lt;/g1&gt; 전략에서 레이블을 생략할 수 있습니다. 그 경우 
기본 레이블로 &lt;g2&gt;this&lt;/g2&gt;가 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with the
propositional connectives, in systems of natural deduction, "forall"
is governed by an introduction and elimination rule.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T061148Z" creationid="tlqk35" creationdate="20220321T172849Z">
        <seg>명제 연결사와 마찬가지로 자연 연역의 체계 속에서 "모든"은  도입 규칙과 제거 규칙에 지배받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As with the logical connectives, every inductive type comes with
introduction rules, which show how to construct an element of the
type, and elimination rules, which show how to "use" an element of the
type in another construction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151833Z" creationid="tlqk3" creationdate="20220526T144324Z">
        <seg>논리 연결사와 마찬가지로 모든 귀납형은 유형의 원소를 어떻게 생성하는지 보여주는 도입 규칙과 또다른 생성에서 유형의 원소를 어떻게 "사용"하는지 보여주는 제거 규칙을 동반합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As you should by now expect, the library includes both an introduction
rule and an elimination rule.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T090048Z" creationid="tlqk35" creationdate="20220321T180850Z">
        <seg>이제까지 예상했듯이 라이브러리는 도입 규칙과 소거 규칙 둘 다 가지고 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ascii</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162017Z" creationid="tlqk35" creationdate="20220321T161846Z">
        <seg>아스키(Ascii)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Associativity:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170134Z" creationid="tlqk35" creationdate="20220321T170134Z">
        <seg>결합성:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assuming that
expression occurs in the goal, the cases tactic will generalize over
the expression, introduce the resulting universally quantified
variable, and case on that.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T170049Z" creationid="tlqk3" creationdate="20220527T165926Z">
        <seg>표현식이 목표에서 나타남을 가정하면, cases 전략은 표현식을 일반화하고 결과적으로 보편적으로 정량화된 변수를 도입하고 이에 대한 경우를 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Assuming the ambient type &lt;g1&gt;α&lt;/g1&gt; is nonempty,
&lt;g2&gt;strongIndefiniteDescription p&lt;/g2&gt; produces an element of &lt;g3&gt;α&lt;/g3&gt;
satisfying &lt;g4&gt;p&lt;/g4&gt; if there is one.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184637Z" creationid="tlqk3" creationdate="20220610T184637Z">
        <seg>주변 유형 &lt;g1&gt;α&lt;/g1&gt;가 비어 있지 않다고 가정하고, &lt;g2&gt;strongInReservationDescription p&lt;/g2&gt;는 원소가 하나가 있는 경우 &lt;g4&gt;p&lt;/g4&gt;를 충족하는 &lt;g3&gt;α&lt;/g3&gt;의 원소를 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At that point, &lt;g2&gt;simp&lt;/g2&gt; applies
reflexivity to finish it off.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120948Z" creationid="tlqk35" creationdate="20220524T161228Z">
        <seg>여기서 &lt;g2&gt;simp&lt;/g2&gt;는 이 목표를 끝내는데 반사성을 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At this point, we see that we need another supporting fact, namely, that &lt;g1&gt;succ (n + m) = succ n + m&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162648Z" creationid="tlqk3" creationdate="20220527T162459Z">
        <seg>이 시점에서 우리는 또다른 지지하는 사실 &lt;g1&gt;succ (n + m) = succ n + m&lt;/g1&gt;이 필요함을 알게 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At times, you may find that the type class inference fails to find an
expected instance, or, worse, falls into an infinite loop and times
out.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180351Z" creationid="tlqk3" creationdate="20220604T180351Z">
        <seg>때때로 유형 클래스 추론이 예상한 인스턴스를 찾지 못하거나 더 심하게는 무한 루프에 빠져 시간이 초과되는 것을 발견할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Attributes</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181632Z" creationid="tlqk3" creationdate="20220525T181632Z">
        <seg>특성</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Auto Bound Implicit Arguments</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134129Z" creationid="tlqk3" creationdate="20220526T134129Z">
        <seg>자동적으로 구속된 암시적인 인자</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Automated reasoning systems strive for power and efficiency, often at the expense of guaranteed soundness.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131401Z" creationid="tlqk35" creationdate="20220321T131401Z">
        <seg>자동화된 추론 시스템은 종종 건전성 보장을 희생해서라도 성능과 효율성을 끌어올리기 위해 애쓰고 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Axiomatic Details</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T155116Z" creationid="tlqk35" creationdate="20220528T155116Z">
        <seg>공리적 세부사항</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Axioms and Computation</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184902Z" creationid="tlqk3" creationdate="20220604T184902Z">
        <seg>공리와 계산</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic Tactics</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T061845Z" creationid="tlqk35" creationdate="20220522T061845Z">
        <seg>기본 전략들</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Basic navigation and rewriting</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182034Z" creationid="tlqk3" creationdate="20220604T182034Z">
        <seg>기본 탐색 및 다시쓰기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Be careful: &lt;g1&gt;repeat (try t)&lt;/g1&gt; will loop forever, because the inner tactic never fails.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112445Z" creationid="tlqk35" creationdate="20220524T151930Z">
        <seg>조심하세요. &lt;g1&gt;repeat (try t)&lt;/g1&gt;의 내부 전략은 절대로 실패하지 않아서 무한루프에 빠질 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Be careful: not
every generalization preserves the validity of the goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T065050Z" creationid="tlqk35" creationdate="20220522T065050Z">
        <seg>조심하세요. 모든 일반화가 목표의 유효성을 보존하지는 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;g1&gt;Nonempty α&lt;/g1&gt; has type &lt;g2&gt;Prop&lt;/g2&gt; and its constructor contains data, it can only eliminate to &lt;g3&gt;Prop&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T183035Z" creationid="tlqk3" creationdate="20220610T183035Z">
        <seg>&lt;g1&gt;Nonempty α&lt;/g1&gt;에는 &lt;g2&gt;Prop&lt;/g2&gt; 유형이 있고 생성자에 데이터가 포함되어 있기 때문에 &lt;g3&gt;Prop&lt;/g3&gt;으로만 제거할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because &lt;g1&gt;Or&lt;/g1&gt; has two constructors, we cannot use anonymous
constructor notation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154252Z" creationid="tlqk35" creationdate="20220321T164120Z">
        <seg>&lt;g1&gt;Or&lt;/g1&gt;은 두 개의 생성자가 있기 때문에 익명 생성자 표기를 사용할 수 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because addition and the zero notation have been assigned the
&lt;g1&gt;[matchPattern]&lt;/g1&gt; attribute, they can be used in pattern matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161406Z" creationid="tlqk3" creationdate="20220529T161406Z">
        <seg>왜냐하면 덧셈과 0 기호는 &lt;g1&gt;[matchPattern]&lt;/g1&gt; 특성이 할당되어 있기에 그들은 패턴 매칭에 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because equational reasoning is so common and important, Lean provides
a number of mechanisms to carry it out more effectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180155Z" creationid="tlqk35" creationdate="20220321T180155Z">
        <seg>방정식적인 추론은 꽤 흔하고 중요하기 때문에 린은 그것을 더 효과적으로 수행하는 다수의 메커니즘을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because fully detailed axiomatic proofs are so complicated, the challenge of theorem proving is to have the computer
fill in as many of the details as possible.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T132211Z" creationid="tlqk35" creationdate="20220321T132211Z">
        <seg>완전히 상세한 공리적 증명은 너무 복잡하기 때문에, 증명 보조기의 문제점은 컴퓨터에 가능한 많이 상세한 것들을 두어야 한다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because it depends on &lt;g1&gt;choice&lt;/g1&gt;, Lean cannot generate bytecode for
&lt;g2&gt;indefiniteDescription&lt;/g2&gt;, and so requires us to mark the definition
as &lt;g3&gt;noncomputable&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184111Z" creationid="tlqk3" creationdate="20220610T183830Z">
        <seg>&lt;g1&gt;선택(choice)&lt;/g1&gt;에 의존하기 때문에 린은 &lt;g2&gt;무한 설명(indefinite_Description)&lt;/g2&gt;에 대한 바이트 코드를 생성할 수 없으므로 &lt;g3&gt;(noncomputable)계산 불가능&lt;/g3&gt;으로 정의를 표시해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Because the constructors are polymorphic over types, we have to insert
the type &lt;g1&gt;Nat&lt;/g1&gt; as an argument repeatedly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152448Z" creationid="tlqk35" creationdate="20220321T152448Z">
        <seg>생성자들이 유형에 대해 다형적이기 때문에, 우리는 유형 &lt;g1&gt;Nat&lt;/g1&gt;를 인수로써 반복적으로 삽입해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Behind the scenes, these descriptions are
"compiled" down to primitive recursors, using a procedure that we
refer to as the "equation compiler." The equation compiler is not part
of the trusted code base; its output consists of terms that are
checked independently by the kernel.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160547Z" creationid="tlqk3" creationdate="20220529T160547Z">
        <seg>막의 뒤에서 이 설명은 "방정식 컴파일러"라고 부르는 절차를 사용하여 기초적인 재귀자로 "컴파일되어" 내려갑니다. 방정식 컴파일러는 신뢰받는 코드 기반의 일부가 아닙니다. 그것의 출력은 커널에 의해 독립적으로 검증된 항으로 구성됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Below we will see that Lean's
editor modes can also help you find things you need, but studying the
contents of the library directly is often unavoidable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131223Z" creationid="tlqk3" creationdate="20220526T131223Z">
        <seg>아래에서 우리는 린의 편집기 모드는 여러분이 필요한 것을 찾도록 돕는 것을 봅니다. 그러나 라이브러리의 내용을 공부하는 것은 대게 불가피합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Below, we
will see examples of how such casts can block computation in the
system.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172135Z" creationid="tlqk3" creationdate="20220605T172135Z">
        <seg>아래에서 우리는 어떻게 이런 형변환이 시스템에서 계산을 막을 수 있는지 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both
the efficiency of the program and the solutions that are found can
depend on the order in which the system tries the instance.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181235Z" creationid="tlqk3" creationdate="20220604T181235Z">
        <seg>프로그램의 효율성과 발견된 해결책은 모두 시스템이 개체를 시도하는 순서에 따라 달라질 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both expressions denote the type of
functions that take a natural number as input and return a natural
number as output.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140507Z" creationid="tlqk35" creationdate="20220321T140507Z">
        <seg>두 표현식 모두 자연수를 입력으로 받아 자연수를 출력으로 반환하는 함수 유형을 가리킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Both versions are
actually notationally convenient abbreviations for a more long-winded
expression, &lt;g3&gt;Exists (fun x : α =&gt; p x)&lt;/g3&gt;, defined in Lean's library.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T070032Z" creationid="tlqk35" creationdate="20220321T180843Z">
        <seg>둘 다 린 라이브러리에 정의된 길고 장황한 표현식 &lt;g3&gt;Exists (fun x : α =&gt; p x)&lt;/g3&gt;을 위한 간편한 기호입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But
Lean erases types and propositional information when compiling
definitions to bytecode for its virtual machine evaluator, and since
these axioms only add new propositions, they are compatible with that
computational interpretation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T162154Z" creationid="tlqk3" creationdate="20220605T162154Z">
        <seg>린의 가상 머신 평가기를 위해 정의를 바이트 코드로 컴파일 할 때 린은 유형과 명제 정보를 지웁니다. 왜냐하면 이런 공리는 새 명제를 더할 뿐이기 때문에 이들은 계산적 해석과도 호환됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But
complicated definitions may use several nested &lt;g2&gt;casesOn&lt;/g2&gt;
applications, and may be hard to read and understand.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160949Z" creationid="tlqk3" creationdate="20220529T160949Z">
        <seg>그러나 복잡해진 정의는 몇 단계로 중첩하여 &lt;g2&gt;casesOn&lt;/g2&gt;를 사용할 수도 있습니다. 그리고 읽고 이해하기 어렵게 될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But
first, in this chapter, we take a break from the mechanics of type
theory to explore some pragmatic aspects of interacting with Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173156Z" creationid="tlqk35" creationdate="20220524T173121Z">
        <seg>그러나 우선 이 장에서 우리는 유형론의 원리로부터 떨어져서 린과 상호작용하는 것에 대한 실용적인 면을 탐색해봅시다</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But
for straightforward constructions like the one above, when the type of
&lt;g1&gt;h&lt;/g1&gt; and the goal of the construction are salient, the notation is
clean and effective.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T133712Z" creationid="tlqk35" creationdate="20220321T163519Z">
        <seg>위처럼 직관적인 구성의 경우 &lt;g1&gt;h&lt;/g1&gt;의 유형과 구성의 목표가 두드러질 때 이 표기법은 깨끗하고 효과적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But
these universe levels do have a bearing on the elimination
rule.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T162734Z" creationid="tlqk35" creationdate="20220528T162505Z">
        <seg>그러나 이 세계 수준은 제거 규칙으로부터 영향을 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But
wherever a term is expected, Lean allows us to insert instead a &lt;g1&gt;by
&lt;tactics&gt;&lt;/g1&gt; block, where &lt;g2&gt;&lt;tactics&gt;&lt;/g2&gt; is a sequence of commands,
separated by semicolons or line breaks.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T083708Z" creationid="tlqk35" creationdate="20220321T184535Z">
        <seg>그러나 항을 기대하는 어디든지 린은 우리가 &lt;g1&gt;by &lt;tactics&gt;&lt;/g1&gt; 블록 대신 이를 삽입하게 해줍니다. 여기서 세미콜론이나 줄 분리자로 분리된 &lt;g2&gt;&lt;tactics&gt;&lt;/g2&gt;은 일련의 명령들 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But &lt;g1&gt;revert&lt;/g1&gt; is even more clever, in that it will revert not only an
element of the context but also all the subsequent elements of the
context that depend on it.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091232Z" creationid="tlqk35" creationdate="20220522T064249Z">
        <seg>그러나 &lt;g1&gt;revert&lt;/g1&gt;는 맥락 속 요소들 뿐만 아니라 그에 의존하는 맥락의 후행 요소도 되돌려 놓는다는 점에서 아주 영리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But Lean handles
the ambiguity by using the first applicable equation, so in this example
the net result is the same.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164859Z" creationid="tlqk3" creationdate="20220529T164859Z">
        <seg>그러나 린은 활용할 수 있는 첫 방정식을 사용하여 모호성을 해소합니다. 그래서 이 예제에서 최종 결과는 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But because the
notion of an inductive type is so fundamental, we feel it is important
to start with a low-level, hands-on understanding.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151908Z" creationid="tlqk3" creationdate="20220526T144954Z">
        <seg>그러나 귀납형의 개념은 너무 근본적이라 우리는 저수준의 실습 이해부터 시작하는 것이 중요하다고 느낍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But expressions that use this construction to produce
data do not have computational content, and in Lean we are required to
mark such definitions as &lt;g1&gt;noncomputable&lt;/g1&gt; to flag that fact.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163357Z" creationid="tlqk3" creationdate="20220605T163357Z">
        <seg>그러나 데이터를 만들기 위해 이 구성을 사용한 표현식은 계산적 내용을 없으며, 우리는 린에서 이러한 정의를 &lt;g1&gt;noncomputable&lt;/g1&gt;로 표시하여 해당 사실을 나타내도록 요구받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But for every &lt;g8&gt;f&lt;/g8&gt;,
&lt;g9&gt;extfun_app ⟦f⟧&lt;/g9&gt; is definitionally equal to &lt;g10&gt;fun x =&gt; f x&lt;/g10&gt;, which is
in turn definitionally equal to &lt;g11&gt;f&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T182524Z" creationid="tlqk3" creationdate="20220610T182524Z">
        <seg>그러나 모든 &lt;g8&gt;f&lt;/g8&gt;에 대해 &lt;g9&gt;extfun_app ⟦f⟧&lt;/g9&gt;는 정의상으로 &lt;g10&gt;fun x =&gt; f x&lt;/g10&gt;와 동일하며, 이는 다시 정의상으로 &lt;g11&gt;f&lt;/g11&gt;과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But if we use the classical principle,
say, to define a function by cases, that function will not be
computable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T171539Z" creationid="tlqk3" creationdate="20220604T171539Z">
        <seg>그러나 우리가 고전 원리를 사용해 경우에 따라 함수를 정의하면 그 함수는 계산 불가일 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But in
nontrivial examples, eliminating cast changes the type of the term,
which might make an ambient expression type incorrect.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175357Z" creationid="tlqk3" creationdate="20220605T175308Z">
        <seg>그러나 자명하지 않은 예에서 형변환를 제거하는 것은 항의 유형을 변경하여 표현식 주변의 유형이 올바르지 않을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But it is very useful for building long proofs
incrementally.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170310Z" creationid="tlqk35" creationdate="20220321T170310Z">
        <seg>하지만 이것은 긴 증명을 점진적으로 만들어 나갈 때 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But notice that we
have to manually disable the implicit arguments in &lt;g4&gt;th1&lt;/g4&gt;, &lt;g5&gt;th2&lt;/g5&gt;,
and &lt;g6&gt;euclr&lt;/g6&gt;, because otherwise too many implicit arguments are
inserted.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T190327Z" creationid="tlqk3" creationdate="20220525T190327Z">
        <seg>하지만 &lt;g4&gt;th1&lt;/g4&gt;과 &lt;g5&gt;th2&lt;/g5&gt;, &lt;g6&gt;euclr&lt;/g6&gt;에서 암시적인 인수를 수동적으로 이 기능을 해제했음을 보세요. 그렇지 않으면 너무 많은 암시적인 인수가 삽입됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But some commands have other
effects on the environment, either assigning attributes to objects in
the environment, defining notation, or declaring instances of type
classes, as described in &lt;g1&gt;Chapter Type Classes&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T182230Z" creationid="tlqk3" creationdate="20220525T182230Z">
        <seg>그러나 환경 속 대상에 특성을 할당하는 것이나  기호를 정의하는 것 또는&lt;g1&gt;Chapter Type Classes&lt;/g1&gt;에서 설명할 유형 클래스의 개체를 선언하는 것으로 몇 가지 명령은 환경에 대해 다른 영향을 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But sometimes you will want to leave this information
protected by a fully qualified name, for example, when they conflict
with identifiers in another namespace you want to use.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150453Z" creationid="tlqk35" creationdate="20220321T150453Z">
        <seg>그러나 때로는 당신이 사용할 다른 이름공간과 식별자가 충돌할 때 여러분이 이 정보가 완전히 자격을 갖춘 이름으로 보호되길 원할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But that is enough
to do the damage: under the computational rules of the system, we now
have a closed term of &lt;g9&gt;Nat&lt;/g9&gt; that does not reduce to a numeral.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175128Z" creationid="tlqk3" creationdate="20220605T175128Z">
        <seg>그러나 그것으로 피해를 입히기에 충분합니다. 우린 시스템의 계산 규칙에 따라 이제 숫치값으로 줄어들지 않는 &lt;g9&gt;Nat&lt;/g9&gt;의 닫힌 항을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But the act of opening a
namespace, which provides shorter names, does not carry over.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130924Z" creationid="tlqk3" creationdate="20220526T130924Z">
        <seg>그러나 더 짧은 이름을 제공하는 이름공간을 여는 동작은 앞에서처럼 다른 파일에 영향을 주지 못합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But the simplifier detects identities that
permute their arguments, and uses a technique known as &lt;g4&gt;ordered
rewriting&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T122041Z" creationid="tlqk35" creationdate="20220524T162449Z">
        <seg>그러나 단순화기는 항등식들이 그들의 인자를 교환한다는 것을 감지하고 
&lt;g4&gt;ordered rewriting&lt;/g4&gt;으로 알려진 기법을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But the solutions are not so clear cut, and the
rules of Lean's underlying calculus do not sanction such reductions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175851Z" creationid="tlqk3" creationdate="20220605T175851Z">
        <seg>그러나 해법은 그렇게 명확하지 않으며 Lean의 기반 계산 규칙은 그러한 축소를 승인하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But there are different views as to how best
to address computational concerns.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T165426Z" creationid="tlqk3" creationdate="20220605T165426Z">
        <seg>그러나 어떻게 계산적 문제를 가장 잘 다루는가에 대해서는 다양한 견해가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But there can be negative consequences of adding additional
axioms, consequences which may go beyond concerns about their
correctness.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T160809Z" creationid="tlqk3" creationdate="20220605T160809Z">
        <seg>그러나 공리를 추가하는 것은 부정적인 결과가 될 수 있으며 그들의 정확성에 대한 우려를 넘을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But there is
no reason to multiply languages in this way: dependent type theory is
flexible and expressive, and there is no reason we cannot represent
assertions and proofs in the same general framework.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T102441Z" creationid="tlqk35" creationdate="20220321T154828Z">
        <seg>그러나 이런 식으로 언어를 늘릴 이유는 없습니다. 의존유형론은 유연하며 표현력 있습니다. 그리고 주장과 증명을 동일한 일반 프레임워크 안에서 표현하지 못 할 이유도 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But there is a function &lt;g3&gt;Int.ofNat&lt;/g3&gt; that
embeds the natural numbers in the integers, meaning that we can view
any natural number as an integer, when needed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T124714Z" creationid="tlqk3" creationdate="20220526T124605Z">
        <seg>그러나 정수에 자연수가 내장되도록 하는 &lt;g3&gt;Int.ofNat&lt;/g3&gt; 함수가 있어서 필요할 때 임의의 자연수를 정수로 볼 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But they can also be shorter and easier to
write.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184339Z" creationid="tlqk35" creationdate="20220321T184339Z">
        <seg>그러나 그것들은 더 짧고 더 쓰기 쉬울 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But this
transforms the goal into &lt;g3&gt;b * c * a = a * (c * b)&lt;/g3&gt;, after commuting the
very first multiplication appearing in the term.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182352Z" creationid="tlqk3" creationdate="20220604T182352Z">
        <seg>그러나 이것은 항에 나타나는 맨 처음 곱셈을 교환한 뒤 목표를 &lt;g3&gt;b * c * a = a * (c * b)&lt;/g3&gt;로 바꿉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But this fails with a frustrating</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183040Z" creationid="tlqk3" creationdate="20220604T183040Z">
        <seg>그러나 이것은 좌절과 함께 실패합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But this information is
redundant: one can infer the argument &lt;g2&gt;α&lt;/g2&gt; in
&lt;g3&gt;Lst.cons Nat 5 (Lst.nil Nat)&lt;/g3&gt; from the fact that the second argument, &lt;g4&gt;5&lt;/g4&gt;, has
type &lt;g5&gt;Nat&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152522Z" creationid="tlqk35" creationdate="20220321T152522Z">
        <seg>그러나 이 정보는 중복적입니다. &lt;g3&gt;Lst.cons Nat 5 (Lst.nil Nat)&lt;/g3&gt;에서 두번째 인수 &lt;g4&gt;5&lt;/g4&gt;가 &lt;g5&gt;Nat&lt;/g5&gt; 유형을 가진다는 사실로부터 인수 &lt;g2&gt;α&lt;/g2&gt;를 추론할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But using &lt;g1&gt;reverse_mk_symm&lt;/g1&gt; is generally the right thing to do, and
it would be nice if users did not have to invoke it explicitly.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T124854Z" creationid="tlqk35" creationdate="20220524T164657Z">
        <seg>하지만 &lt;g1&gt;reverse_mk_symm&lt;/g1&gt;을 사용하는 것은 일반적으로 옳습니다. 그러니 
사용자가 이를 명시적으로 불러올 필요가 없다면 좋을 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But using the
type annotations in the longer version makes the proof more readable,
and can help catch and debug errors.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154233Z" creationid="tlqk35" creationdate="20220321T164102Z">
        <seg>그러나 더 긴 버전의 유형 주석을 사용하면 증명을 더 가독성있게 하고 오류를 잡고 고치는 걸 도와줄 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But using type class
inference (see &lt;g2&gt;Chapter Type Classes&lt;/g2&gt;), Lean can actually
find the relevant decision procedure, which means that you can use the
case split in a computable function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T171702Z" creationid="tlqk3" creationdate="20220527T171702Z">
        <seg>그러나 유형 클래스 추론을 사용하여 (&lt;g2&gt;유형 클래스 장&lt;/g2&gt; 참조), 린이 실제로 연관된 결정 절차를 찾을 수 있다. 이 말은 여러분이 셀 수 있는 함수에 대해 경우를 나누는 것이 가능하다는 의미이다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But we can prove that &lt;g1&gt;certain&lt;/g1&gt; propositions are
decidable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172923Z" creationid="tlqk3" creationdate="20220604T172923Z">
        <seg>그래도 우리는 &lt;g1&gt;특정&lt;/g1&gt; 명제가 결정 가능임을 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But we can still write &lt;g2&gt;h.elim&lt;/g2&gt; instead of
&lt;g3&gt;Or.elim h&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154307Z" creationid="tlqk35" creationdate="20220321T164135Z">
        <seg>그래도 &lt;g3&gt;Or.elim h&lt;/g3&gt;대신 &lt;g2&gt;h.elim&lt;/g2&gt;와 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But we will not need to use such inaccessible patterns
before &lt;g9&gt;Section Dependent Pattern Matching&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T171645Z" creationid="tlqk3" creationdate="20220529T171645Z">
        <seg>그러나 우리는 &lt;g9&gt;의존적인 패턴 매칭 섹션&lt;/g9&gt; 전까지 그런 접근할 수 없는 패턴을 사용할 필요는 없을 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But what type should &lt;g3&gt;cons&lt;/g3&gt; have?</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151314Z" creationid="tlqk35" creationdate="20220321T151314Z">
        <seg>그러나  &lt;g3&gt;cons&lt;/g3&gt;는 어떤 유형을 가져야 할까요?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But what value should we return in the &lt;g1&gt;nil&lt;/g1&gt; case?</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175854Z" creationid="tlqk3" creationdate="20220603T175854Z">
        <seg>그러나 &lt;g1&gt;nil&lt;/g1&gt; 경우에 우리가 돌려줘야 하는 값은 무엇인가요?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But you can replace an arbitrary
expression in the goal by a fresh variable using the &lt;g2&gt;generalize&lt;/g2&gt;
tactic.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091630Z" creationid="tlqk35" creationdate="20220522T064654Z">
        <seg>하지만 목표 속 임의의 표현식을 &lt;g2&gt;generalize&lt;/g2&gt; 전략을 사용해 새 변수로 바꿀 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But, in fact, a case split is not required on the first argument; the
&lt;g1&gt;casesOn&lt;/g1&gt; eliminator for &lt;g2&gt;Vector&lt;/g2&gt; automatically abstracts this
argument and replaces it by &lt;g3&gt;0&lt;/g3&gt; and &lt;g4&gt;n + 1&lt;/g4&gt; when we do a case
split on the second argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T150511Z" creationid="tlqk3" creationdate="20220604T150321Z">
        <seg>그러나 사실 경우 분할은 첫 번째 인수에 대해 필요하지 않습니다. 두 번째 인수에 대해 경우를 나누었을 때 &lt;g2&gt;Vector&lt;/g2&gt;를 위한 &lt;g1&gt;casesOn&lt;/g1&gt; 제거자가 자동적으로 이 인수를 추출하고 그것을 &lt;g3&gt;0&lt;/g3&gt;과 &lt;g4&gt;n + 1&lt;/g4&gt;으로 대체합니다. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But, more importantly, equational
reasoning is supported by a term rewriter, a simplifier, and other
kinds of automation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064013Z" creationid="tlqk35" creationdate="20220321T180214Z">
        <seg>그러나 더 중요한 것은 방정식적인 추론은 항 재작성기, 단순화기 및 기타 자동화로 지원됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By combining &lt;g4&gt;funext&lt;/g4&gt; and &lt;g5&gt;propext&lt;/g5&gt;, we obtain an
extensional theory of such sets:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174445Z" creationid="tlqk3" creationdate="20220605T174445Z">
        <seg>&lt;g4&gt;funext&lt;/g4&gt;와 &lt;g5&gt;propext&lt;/g5&gt;를 결합하여 이러한 집합의 확장 이론을 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default,
&lt;g1&gt;simp&lt;/g1&gt; includes all theorems that have been marked with the
attribute &lt;g2&gt;[simp]&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T130208Z" creationid="tlqk35" creationdate="20220524T170118Z">
        <seg>기본적으로 &lt;g1&gt;simp&lt;/g1&gt;은 &lt;g2&gt;[simp]&lt;/g2&gt; 특성으로 지정한 모든 정리들을 포함합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, &lt;g1&gt;rw&lt;/g1&gt; uses an equation in the forward direction, matching
the left-hand side with an expression, and replacing it with the
right-hand side.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114226Z" creationid="tlqk35" creationdate="20220524T154749Z">
        <seg>기본적으로 &lt;g1&gt;rw&lt;/g1&gt;은 표현식의 좌변과 일치시켜 좌변을 우변으로 대체함으로써 앞방향으로 방정식을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, Lean only tries to synthesize an instance &lt;g1&gt;Inhabited T&lt;/g1&gt; when the term &lt;g2&gt;T&lt;/g2&gt; is known and does not
contain missing parts.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163214Z" creationid="tlqk3" creationdate="20220604T163214Z">
        <seg>항 &lt;g2&gt;T&lt;/g2&gt;는 알려져 있고 모르는 부분이 없을 때 기본적으로 린은 &lt;g1&gt;Inhabited T&lt;/g1&gt; 개체만 합성하려고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, it includes the standard library directory, and (in some contexts)
the root of the user's local project.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174406Z" creationid="tlqk35" creationdate="20220524T174406Z">
        <seg>기본적으로 이는 표준 라이브러리 경로와 (같은 맥락에서) 사용자의 로컬 프로젝트의 루트 경로를 포함합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the &lt;g1&gt;rewrite&lt;/g1&gt; tactic affects only the goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171841Z" creationid="tlqk35" creationdate="20220524T160101Z">
        <seg>기본적으로 &lt;g1&gt;rewrite&lt;/g1&gt; 전략은 목표에만 영향을 미칩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By design, the elements of an inductive type are freely
generated, which is to say, the constructors are injective and have
disjoint ranges.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152129Z" creationid="tlqk3" creationdate="20220527T172827Z">
        <seg>설계하면서 귀납형의 원소는 자유롭게 생성됩니다. 그말은 생성자는 주입적이고 분리된 범위를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By now, you have seen some ways of defining objects and functions in
Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T154758Z" creationid="tlqk35" creationdate="20220321T154758Z">
        <seg>지금까지, 여러분들은 린에서 객체와 함수를 정의하는 몇가지 방법을 배웠습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By tagging the instance above with the attribute &lt;g1&gt;defaultInstance&lt;/g1&gt;, we are instructing Lean
to use this instance on pending type class synthesis problems.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165239Z" creationid="tlqk3" creationdate="20220604T165239Z">
        <seg>&lt;g1&gt;defaultInstance&lt;/g1&gt; 속성으로 위의 개체를 표시함으로써 우리는 린에게 유형 클래스 합성 문제로 보류 중인 이 개체를 사용하라고 가르킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By the
definition of &lt;g4&gt;u&lt;/g4&gt; and &lt;g5&gt;v&lt;/g5&gt;, this implies that they are equal as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190016Z" creationid="tlqk3" creationdate="20220610T190016Z">
        <seg>&lt;g4&gt;u&lt;/g4&gt; 및 &lt;g5&gt;v&lt;/g5&gt;의 정의에 따르면, 이는 또한 동등함을 함의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By the above considerations, if &lt;g3&gt;r&lt;/g3&gt; is a well-founded
relation on a type &lt;g4&gt;α&lt;/g4&gt;, we should have a principle of well-founded
recursion on &lt;g5&gt;α&lt;/g5&gt;, with respect to the relation &lt;g6&gt;r&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T174959Z" creationid="tlqk3" creationdate="20220529T174926Z">
        <seg>위의 고려로부터 만약 &lt;g3&gt;r&lt;/g3&gt;이 &lt;g4&gt;α&lt;/g4&gt;형에 대해 잘 세워진 관계이면, 우리는 관계 &lt;g6&gt;r&lt;/g6&gt;에 대해서 &lt;g5&gt;α&lt;/g5&gt;에 대해 잘 세워진 재귀의 원리를 가져야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By the end
of this chapter, you will understand much of what this means.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135143Z" creationid="tlqk35" creationdate="20220321T135143Z">
        <seg>2장의 끝에서 여러분은 이것의 의미하는 바의 대부분을 이해하게 될 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By the previous observations,
&lt;g13&gt;decide&lt;/g13&gt; will succeed any time the inferred decision procedure
for &lt;g14&gt;c&lt;/g14&gt; has enough information to evaluate, definitionally, to the &lt;g15&gt;isTrue&lt;/g15&gt; case.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T175600Z" creationid="tlqk3" creationdate="20220604T175600Z">
        <seg>전의 관찰로부터 &lt;g13&gt;decide&lt;/g13&gt;는 &lt;g14&gt;c&lt;/g14&gt;에 대한 추론된 결정 절차가 &lt;g15&gt;isTrue&lt;/g15&gt; 사례에 대해 정의로부터 평가하기에 충분한 정보를 가질 때마다 성공할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By the propositions-as-types correspondence,
this means that induction is the fundamental method of proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160040Z" creationid="tlqk3" creationdate="20220529T160040Z">
        <seg>유형으로써 명제 대응에 따르면 이것은 귀납은 증명의 기초적인 방식임을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Calculational Proofs</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180228Z" creationid="tlqk35" creationdate="20220321T180228Z">
        <seg>계산 증명</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Chaining Instances</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160614Z" creationid="tlqk3" creationdate="20220604T160614Z">
        <seg>연결 개체</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choice</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T182826Z" creationid="tlqk3" creationdate="20220610T182826Z">
        <seg>선택(Choice)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Choosing induction on the second argument, we might begin as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162338Z" creationid="tlqk3" creationdate="20220527T162338Z">
        <seg>두 번째 인수에 귀납을 선택하는 것으로 우리는 다음과 같이 시작할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Classical Logic</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T165639Z" creationid="tlqk35" creationdate="20220321T165639Z">
        <seg>고전 논리</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Coercions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T124417Z" creationid="tlqk3" creationdate="20220526T124329Z">
        <seg>강제 형 변환</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comment blocks can
be nested, making it possible to "comment out" chunks of code, just as
in many programming languages.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135553Z" creationid="tlqk35" creationdate="20220321T135553Z">
        <seg>주석 블록은 중첩될 수 있으며 대부분의 프로그래밍 언어처럼 코드 조각을 "주석 처리"할 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Comment headers at the top of each file provide
additional information.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131540Z" creationid="tlqk3" creationdate="20220526T131540Z">
        <seg>각 파일의 꼭대기에 도입부 주석은 추가 정보를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Commutativity:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170129Z" creationid="tlqk35" creationdate="20220321T170129Z">
        <seg>교환성:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Computationally, the purest part of dependent type theory avoids the
use of &lt;g1&gt;Prop&lt;/g1&gt; entirely.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171315Z" creationid="tlqk3" creationdate="20220605T171315Z">
        <seg>계산적으로 종속 유형론의 가장 순수한 부분은 완전히 &lt;g1&gt;Prop&lt;/g1&gt;의 사용을 피합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Computer algebra systems and
specialized mathematical software packages provide means of carrying out mathematical computations, establishing
mathematical bounds, or finding mathematical objects.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131347Z" creationid="tlqk35" creationdate="20220321T131347Z">
        <seg>컴퓨터 대수 시스템(CAS, Computer Algebra Systems)과 특정 수학 소프트웨어 패키지는 수학 계산을 수행하고 수학적 한계를 세우며, 수학적 대상을 찾는 수단을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Computers and Theorem Proving</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131055Z" creationid="tlqk35" creationdate="20220321T131055Z">
        <seg>컴퓨터와 정리 증명</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conceptually, stating a theorem or introducing a &lt;g1&gt;have&lt;/g1&gt; statement
creates a goal, namely, the goal of constructing a term with the
expected type.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082856Z" creationid="tlqk35" creationdate="20220321T184354Z">
        <seg>개념적으로, 정리를 진술하거나 &lt;g1&gt;have&lt;/g1&gt; 구문을 도입하여 기대하는 유형으로 항를 구성하라는 목표를 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conjunction</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124210Z" creationid="tlqk35" creationdate="20220321T162506Z">
        <seg>논리곱</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consequences of excluded middle include double-negation elimination,
proof by cases, and proof by contradiction, all of which are described
in the &lt;g1&gt;Section Classical Logic&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190241Z" creationid="tlqk3" creationdate="20220610T190241Z">
        <seg>배중률의 결과는 이중 부정 제거와 경우에 따른 증명 및 귀류법이 포함되며, 모두 &lt;g1&gt;고전 논리 섹션&lt;/g1&gt;에 설명되어 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider one of the examples from the last section:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164710Z" creationid="tlqk3" creationdate="20220529T164705Z">
        <seg>지난 섹션의 예제 중 하나를 고려해 봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the "barber paradox," that is, the claim that in a certain
town there is a (male) barber that shaves all and only the men who
do not shave themselves.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074817Z" creationid="tlqk35" creationdate="20220321T183829Z">
        <seg>"이발사의 역설"을 고려해보세요. 다시 말하면 어떤 마을의 (남자) 이발사가 스스로 면도하지 않는 남자만 면도해 준다는 주장입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the definitions of the product type and
sum type in the library:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152848Z" creationid="tlqk3" creationdate="20220526T152848Z">
        <seg>라이브러리에서 곱 유형의 정의와 합 유형의 정의를 고려해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the following
definition of the function &lt;g1&gt;Vector.add,&lt;/g1&gt; which adds two vectors of
elements of a type, assuming that type has an associated addition
function:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T145437Z" creationid="tlqk3" creationdate="20220604T145437Z">
        <seg>유형의 원소의 두 벡터를 더하는 함수 &lt;g1&gt;Vector.add,&lt;/g1&gt;의 다음 정의를 고려해보세요. 그 유형은 연관된 덧셈함수를 가지고 있다고 가정합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the following three function definitions:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145126Z" creationid="tlqk35" creationdate="20220321T145126Z">
        <seg>다음 세 함수 정의를 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the following type of arithmetic expressions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181654Z" creationid="tlqk3" creationdate="20220603T181654Z">
        <seg>다음의 산술적 표현식 유형을 고려하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider the inductively defined type of natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161107Z" creationid="tlqk3" creationdate="20220529T161107Z">
        <seg>자연수의 재귀적으로 정의된 유형을 고려해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Consider, for example, the addition function &lt;g1&gt;add m n&lt;/g1&gt; on the
natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155946Z" creationid="tlqk3" creationdate="20220527T155946Z">
        <seg>예를 들어 자연수에 대한 추가 함수 &lt;g1&gt;add m n&lt;/g1&gt;을 고려해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Constructing such proofs typically requires much more input and interaction from users, but it
allows you to obtain deeper and more complex proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131511Z" creationid="tlqk35" creationdate="20220321T131511Z">
        <seg>전형적으로 이런 증명을 작성하는 것은 사용자에게 훨씬 많은 입력과 상호작용을 요구합니다. 그러나 이것은 우리가 더 깊고 복잡한 증명을 얻을 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Constructors with Arguments</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152605Z" creationid="tlqk3" creationdate="20220526T152605Z">
        <seg>인수를 가지는 생성자</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conversely, if you have &lt;g7&gt;p : Nat × Nat&lt;/g7&gt;, then you can write
&lt;g8&gt;p.1 : Nat&lt;/g8&gt; and &lt;g9&gt;p.2 : Nat&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141208Z" creationid="tlqk35" creationdate="20220321T141208Z">
        <seg>반대로 여러분이 &lt;g7&gt;p : Nat × Nat&lt;/g7&gt;을 갖고 있다면 &lt;g8&gt;p.1 : Nat&lt;/g8&gt;과 &lt;g9&gt;p.2 : Nat&lt;/g9&gt;처럼 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conversely, the &lt;g4&gt;cases&lt;/g4&gt; tactic can be used to decompose a
disjunction.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092431Z" creationid="tlqk35" creationdate="20220522T070342Z">
        <seg>반대로 &lt;g4&gt;cases&lt;/g4&gt; 전략은 논리합를 분해하는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conversely, the proof of a mathematical theorem may require a
lengthy computation, in which case verifying the truth of the theorem requires verifying that the computation does what
it is supposed to do.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131219Z" creationid="tlqk35" creationdate="20220321T131219Z">
        <seg>반대로 수학적 정리의 증명은 긴 계산이 필요하는데 이 경우 정리의 참을 증명하는 건 계산한 것을 증명하는 걸 필요로 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conversely, when writing an arbitrary Lean term, you can
always invoke the tactic mode by inserting a &lt;g5&gt;by&lt;/g5&gt;
block.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104928Z" creationid="tlqk35" creationdate="20220524T143110Z">
        <seg>반대로 임의의 린 항을 작성했다면 &lt;g5&gt;by&lt;/g5&gt; 블럭을 삽입하여 
전략모드를 불러올 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Core parts of the library are developed constructively,
but the system also provides support for carrying out classical
mathematical reasoning.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171236Z" creationid="tlqk3" creationdate="20220605T171236Z">
        <seg>라이브러리의 핵심 부분은 직관주의적으로 개발되었지만 시스템은 고전적인 수학추론을 수행하기 위한 지원도 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a function from another expression is a process known as
&lt;g1&gt;lambda abstraction&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142243Z" creationid="tlqk35" creationdate="20220321T142243Z">
        <seg>다른 표현식으로부터 함수를 만드는 것은 &lt;g1&gt;람다 추상화(lambda abstraction)&lt;/g1&gt;과정으로 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Curly brackets and &lt;g1&gt;.&lt;/g1&gt; can also be used in &lt;g2&gt;conv&lt;/g2&gt; mode to structure tactics.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183851Z" creationid="tlqk3" creationdate="20220604T183851Z">
        <seg>중괄호와 &lt;g1&gt;.&lt;/g1&gt;은 전략을 구조화하기위해 &lt;g2&gt;conv&lt;/g2&gt; 모드에서도 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Current research programs, including work on &lt;g1&gt;observational type
theory&lt;/g1&gt; and &lt;g2&gt;cubical type theory&lt;/g2&gt;, aim to extend type theory in ways
that permit reductions for casts involving function extensionality,
quotients, and more.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175811Z" creationid="tlqk3" creationdate="20220605T175811Z">
        <seg>&lt;g1&gt;관찰 유형 이론&lt;/g1&gt; 및 &lt;g2&gt;입방 유형 이론&lt;/g2&gt;에 대한 작업을 포함한 현재 연구 프로그램은 함수 확장성, 몫 등을 포함하는 형변환에 대한 축소를 허용하는 방식으로 유형론을 확장하는 것을 목표로 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Decidable Propositions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T171113Z" creationid="tlqk3" creationdate="20220604T171113Z">
        <seg>결정 가능한 명제</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Structures</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173333Z" creationid="tlqk35" creationdate="20220528T173333Z">
        <seg>구조체 선언하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring an "axiom" &lt;g1&gt;hp : p&lt;/g1&gt; is tantamount to declaring that &lt;g2&gt;p&lt;/g2&gt;
is true, as witnessed by &lt;g3&gt;hp&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121415Z" creationid="tlqk35" creationdate="20220321T161252Z">
        <seg>"공리" &lt;g1&gt;hp : p&lt;/g1&gt;를 선언하는 것은 &lt;g3&gt;hp&lt;/g3&gt;에 의해 목격된 것처럼 &lt;g2&gt;p&lt;/g2&gt;가 참이라고 선언하는 것과 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring new objects in this manner is a good way to experiment
with the system.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135914Z" creationid="tlqk35" creationdate="20220321T135914Z">
        <seg>이처럼 새로운 대상을 선언하는 것은 시스템을 실험해보는 좋은 방식입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Default instances</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164532Z" creationid="tlqk3" creationdate="20220604T164532Z">
        <seg>기본 개체</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Define an inductive data type consisting of terms built up from the following constructors:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T171429Z" creationid="tlqk35" creationdate="20220528T171429Z">
        <seg>다음 생성자로부터 세워진 항으로 구성된 유도 데이터 형을 정의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Define some operations on lists, like a &lt;g1&gt;length&lt;/g1&gt; function or the
&lt;g2&gt;reverse&lt;/g2&gt; function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T171334Z" creationid="tlqk35" creationdate="20220528T171334Z">
        <seg>리스트에 대한 &lt;g1&gt;length&lt;/g1&gt;함수나 &lt;g2&gt;reverse&lt;/g2&gt; 함수같은 몇 가지 연산을 정의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Define your own function to carry out course-of-value recursion on
the natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181350Z" creationid="tlqk3" creationdate="20220603T181350Z">
        <seg>자연수에 대해 재귀의 과정(course-of-value recursion)을 수행하는 여러분만의 함수를 정의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Defining the Natural Numbers</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T153647Z" creationid="tlqk3" creationdate="20220527T153647Z">
        <seg>자연수를 정의하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Definition</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161926Z" creationid="tlqk35" creationdate="20220321T161926Z">
        <seg>정의(Definition)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Definitions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143811Z" creationid="tlqk35" creationdate="20220321T143811Z">
        <seg>정의(Definitions)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependent Pattern Matching</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175146Z" creationid="tlqk3" creationdate="20220603T175146Z">
        <seg>의존적 패턴 매칭</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependent Type Theory</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135104Z" creationid="tlqk35" creationdate="20220321T135104Z">
        <seg>의존 유형론</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependent products
are also called &lt;g7&gt;sigma&lt;/g7&gt; types, and you can also write them as
&lt;g8&gt;Σ a : α, β a&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152302Z" creationid="tlqk35" creationdate="20220321T152302Z">
        <seg>의존적 곱은 &lt;g7&gt;sigma&lt;/g7&gt;유형이라고 불립니다. 그리고 여러분은 그것을 &lt;g8&gt;Σ a : α, β a&lt;/g8&gt;처럼 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependent type theory is a powerful and expressive language, allowing
you to express complex mathematical assertions, write complex hardware
and software specifications, and reason about both of these in a
natural and uniform way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135117Z" creationid="tlqk35" creationdate="20220321T135117Z">
        <seg>의존 유형론은 여러분이 복잡한 수학적 진술을 표현할 수 있게 하고, 복잡한 하드웨어와 소프트웨어 명제를 작성할 수 있게 하며 이 둘에 대해 자연스럽고 일관성있게 추론할 수 있게 하는 강력하고 표현력 있는 언어입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Dependent type theory is powerful enough to encode and justify
well-founded recursion.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173719Z" creationid="tlqk3" creationdate="20220529T173719Z">
        <seg>종속 유형론은 잘 세워진 재귀를 부호화하고 정당화하기에 충분히 강력합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Despite the different placement of the parameter &lt;g1&gt;α&lt;/g1&gt; in these two
examples, in both cases it treated in the same way, in that it does
not participate in a case split.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164316Z" creationid="tlqk3" creationdate="20220529T164316Z">
        <seg>이 두 예제에서 매개변수 &lt;g1&gt;α&lt;/g1&gt;의 다른 배치에도 불구하고 두 경우 모두 같은 방식으로 다뤄집니다. 그러므로 이것은 경우 분할에 참여하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Determining that an expression &lt;g1&gt;t&lt;/g1&gt; is a correct proof of assertion &lt;g2&gt;p&lt;/g2&gt; would then
simply be a matter of checking that &lt;g3&gt;t&lt;/g3&gt; has type &lt;g4&gt;Proof p&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T104011Z" creationid="tlqk35" creationdate="20220321T155215Z">
        <seg>표현식 &lt;g1&gt;t&lt;/g1&gt;가 주장 &lt;g2&gt;p&lt;/g2&gt;의 올바른 증명임을 결정하는 것은 &lt;g3&gt;t&lt;/g3&gt;가 &lt;g4&gt;Proof p&lt;/g4&gt;형임을 확인하는 문제가 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Disjunction</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T134601Z" creationid="tlqk35" creationdate="20220321T163542Z">
        <seg>논리합</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Displaying Information</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T124724Z" creationid="tlqk3" creationdate="20220526T124724Z">
        <seg>정보 표시하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Distributivity:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170141Z" creationid="tlqk35" creationdate="20220321T170141Z">
        <seg>분배성:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Double-negation elimination allows one to prove any proposition,
&lt;g1&gt;p&lt;/g1&gt;, by assuming &lt;g2&gt;¬p&lt;/g2&gt; and deriving &lt;g3&gt;false&lt;/g3&gt;, because that amounts
to proving &lt;g4&gt;¬¬p&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T163029Z" creationid="tlqk35" creationdate="20220321T165828Z">
        <seg>이중 부정 제거는 &lt;g4&gt;¬¬p&lt;/g4&gt;를 증명하는 것과 같기 때문에 여러분이  &lt;g2&gt;¬p&lt;/g2&gt;를 가정하고 &lt;g3&gt;false&lt;/g3&gt;의 유도함으로써 어떤 명제  &lt;g1&gt;p&lt;/g1&gt;의 증명할 수 있게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each &lt;g1&gt;&lt;proof&gt;_i&lt;/g1&gt; is a proof for &lt;g2&gt;&lt;expr&gt;_{i-1} op_i &lt;expr&gt;_i&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180313Z" creationid="tlqk35" creationdate="20220321T180313Z">
        <seg>각  &lt;g1&gt;&lt;proof&gt;_i&lt;/g1&gt;는 &lt;g2&gt;&lt;expr&gt;_{i-1} op_i &lt;expr&gt;_i&lt;/g2&gt;에 대한 증명입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each constructor &lt;g5&gt;c&lt;/g5&gt; in the definition of a family &lt;g6&gt;C&lt;/g6&gt; of
inductive types is of the form</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152226Z" creationid="tlqk35" creationdate="20220528T160951Z">
        <seg>귀납형의 &lt;g6&gt;C&lt;/g6&gt; 군의 정의에서 각 생성자 &lt;g5&gt;c&lt;/g5&gt;는 다음 형태와 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each constructor should have a type, where the
argument types are built up from previously defined types, the
parameter and index types, and the inductive family currently being
defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152204Z" creationid="tlqk35" creationdate="20220528T160242Z">
        <seg>각 생성자는 이전에 정의된 유형, 매개변수와 색인 유형, 현재 정의 중인 귀납군으로 만들어져서 유형을 가져야만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each constructor then
constructs an element of some member of the family.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153107Z" creationid="tlqk35" creationdate="20220528T153107Z">
        <seg>그럼 각 생성자는 군의 일부 구성원의 원소를 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each line should
contain the same number of patterns, one for each element of &lt;g6&gt;β&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170842Z" creationid="tlqk3" creationdate="20220529T170842Z">
        <seg>각 줄은 &lt;g6&gt;β&lt;/g6&gt;의 각 원소에 대해 한 개씩 같은 수의 패턴을 포함해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each of &lt;g1&gt;U&lt;/g1&gt; and &lt;g2&gt;V&lt;/g2&gt; is a disjunction, so &lt;g3&gt;u_def&lt;/g3&gt; and &lt;g4&gt;v_def&lt;/g4&gt;
represent four cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185805Z" creationid="tlqk3" creationdate="20220610T185805Z">
        <seg>&lt;g1&gt;U&lt;/g1&gt;와 &lt;g2&gt;V&lt;/g2&gt;는 각각 논리합이므로 &lt;g3&gt;u_def&lt;/g3&gt;와 &lt;g4&gt;v_def&lt;/g4&gt;는 4가지 경우를 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Each style has its own advantages and disadvantages.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184324Z" creationid="tlqk35" creationdate="20220321T184324Z">
        <seg>각 스타일은 그것의 장단점을 가지고 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Editor shortcut</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162042Z" creationid="tlqk35" creationdate="20220321T161859Z">
        <seg>편집 단축기(Editor shortcut)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Elements of type &lt;g5&gt;Prop&lt;/g5&gt; are not entirely innocuous,
however.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172006Z" creationid="tlqk3" creationdate="20220605T172006Z">
        <seg>하지만 &lt;g5&gt;Prop&lt;/g5&gt;형 원소는 완전히 무해하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ellipses are also useful when explicit argument can be automatically
inferred by Lean, and we want to avoid a sequence of &lt;g1&gt;_&lt;/g1&gt;s.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T141432Z" creationid="tlqk3" creationdate="20220526T141432Z">
        <seg>Ellipses도 명시적인 인자가 린으로부터 자동적으로 추론될 수 있을 때와 우리가  &lt;g1&gt;_&lt;/g1&gt;들의 나열을 피하고자 할 때 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Entering Tactic Mode</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184348Z" creationid="tlqk35" creationdate="20220321T184348Z">
        <seg>전략 모드 진입</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumerated Types</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T145134Z" creationid="tlqk3" creationdate="20220526T145134Z">
        <seg>열거 유형</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enumerated types are a very special case of inductive types, in which
the constructors take no arguments at all.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152011Z" creationid="tlqk3" creationdate="20220526T152727Z">
        <seg>열거 유형은 귀납형의 아주 특별한 경우 입니다. 이들의 생성자는 인수를 전혀 받지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T071048Z" creationid="tlqk35" creationdate="20220321T175300Z">
        <seg>동등</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Equality is much more than an equivalence relation, however.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T063203Z" creationid="tlqk35" creationdate="20220321T175705Z">
        <seg>하지만 동등은 단순한 동치 관계 이상의 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Essentially, it just checks that the
given term has the indicated type.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124644Z" creationid="tlqk35" creationdate="20220321T162706Z">
        <seg>기본적으로 이는 어떤 항이 지정된 유형을 가짐을 확인할 뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Essentially, the &lt;g1&gt;rw&lt;/g1&gt; tactic uses a given equality (which can be a
hypothesis, a theorem name, or a complex term) to "rewrite" the
goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064518Z" creationid="tlqk35" creationdate="20220321T180428Z">
        <seg>기본적으로 &lt;g1&gt;rw&lt;/g1&gt; 전략은 주어진 동등을 (혹은 가정, 정리, 복잡한 항이 될 수도 있는)목표를 "재작성"하는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even computationally inclined users may
wish to use the classical law of the excluded middle to reason about
computation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T162238Z" creationid="tlqk3" creationdate="20220605T162238Z">
        <seg>심지어 계산적으로 편향된 사용자들도 계산에 대해 배중률을 포함한 고전 논리를 사용해 추론하기를 바랄 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even the existential quantifier is inductively defined:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T152715Z" creationid="tlqk3" creationdate="20220527T152715Z">
        <seg>심지어 존재 한정기호도 유도적으로 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every
natural number is either &lt;g1&gt;zero&lt;/g1&gt; or &lt;g2&gt;succ x&lt;/g2&gt;, and so you can define
a function from the natural numbers to an arbitrary type by specifying
a value in each of those cases:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161213Z" creationid="tlqk3" creationdate="20220529T161213Z">
        <seg>모든 자연수는 &lt;g1&gt;zero&lt;/g1&gt;이거나 &lt;g2&gt;succ x&lt;/g2&gt;입니다. 그래서 여러분은 각 경우에 대한 값을 나타내줌으로써 자연수에서 임의의 유형으로 가는 함수를 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every &lt;g1&gt;structure&lt;/g1&gt; declaration introduces a
namespace with the same name.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173625Z" creationid="tlqk35" creationdate="20220528T173625Z">
        <seg>모든 &lt;g1&gt;structure&lt;/g1&gt; 선언은 같은 이름을 가진 이름공간을 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Every element of a function type &lt;g1&gt;α → β&lt;/g1&gt; or a
dependent function type &lt;g2&gt;(a : α) → β&lt;/g2&gt; is assumed to have a value
at every input.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T150156Z" creationid="tlqk3" creationdate="20220527T150156Z">
        <seg>&lt;g1&gt;α → β&lt;/g1&gt;형 함수나 &lt;g2&gt;(a : α) → β&lt;/g2&gt;형 의존 함수의 모든 원소는 매 입력에 대한 함숫값을 갖는다고 가정됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Examples of Propositional Validities</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164257Z" creationid="tlqk35" creationdate="20220321T170104Z">
        <seg>명제적 유효성 예제</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Exercises</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170558Z" creationid="tlqk35" creationdate="20220321T170558Z">
        <seg>연습문제</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extending a foundational system in such a way is often
convenient; it can make it possible to prove more theorems, as well as
make it easier to prove theorems that could have been proved
otherwise.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T160652Z" creationid="tlqk3" creationdate="20220605T160652Z">
        <seg>이런 식으로 기초 체계를 확장하는 것은 종종 편리합니다. 이는 더 많은 정리를 증명할 수 있게 만들 뿐 아니라 다른 방식으로 증명된 정리를 더 쉽게 증명하도록 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fill in the definitions of &lt;g2&gt;prime&lt;/g2&gt;
and &lt;g3&gt;Fermat_prime&lt;/g3&gt; below, and construct each of the given
assertions.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074931Z" creationid="tlqk35" creationdate="20220321T183913Z">
        <seg>아래의 &lt;g2&gt;prime&lt;/g2&gt;과 &lt;g3&gt;Fermat_prime&lt;/g3&gt;의 정의를 채우세요. 그리고 제시된 각 주장을 구성하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally,
we have to show &lt;g5&gt;q&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T165632Z" creationid="tlqk35" creationdate="20220321T165632Z">
        <seg>마지막으로 &lt;g5&gt;q&lt;/g5&gt;임을 보여야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, applying it to the
hypothesis &lt;g6&gt;hbc&lt;/g6&gt; yields a proof of the conclusion &lt;g7&gt;r a c&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065343Z" creationid="tlqk35" creationdate="20220321T174116Z">
        <seg>마지막으로 이것에 가정 &lt;g6&gt;hbc&lt;/g6&gt;를 적용해 결론 &lt;g7&gt;r a c&lt;/g7&gt;의 증명을 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, consider the existential quantifier, which can be written as
either &lt;g1&gt;exists x : α, p x&lt;/g1&gt; or &lt;g2&gt;∃ x : α, p x&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180827Z" creationid="tlqk35" creationdate="20220321T180827Z">
        <seg>마지막으로 &lt;g1&gt;exists x : α, p x&lt;/g1&gt;나 &lt;g2&gt;∃ x : α, p x&lt;/g2&gt;으로 쓸 수 있는 존재 한정기호를 고려해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, the &lt;g5&gt;t : Nat&lt;/g5&gt;, is the input to the function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155737Z" creationid="tlqk3" creationdate="20220527T155737Z">
        <seg>마침내 &lt;g5&gt;t : Nat&lt;/g5&gt;가 함수에 대한 입력입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, the last step applies
associativity in the reverse direction rewriting &lt;g6&gt;a + (c + b)&lt;/g6&gt; to
&lt;g7&gt;a + c + b&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T115715Z" creationid="tlqk35" creationdate="20220524T155726Z">
        <seg>마침내 마지막 단계는 &lt;g6&gt;a + (c + b)&lt;/g6&gt;에서 &lt;g7&gt;a + c + b&lt;/g7&gt;로 역방향으로 결합성을 적용해 재작성 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, you will learn about features that are specific to Lean, including the language you use to communicate
with the system, and the mechanisms Lean offers for managing complex theories and data.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134710Z" creationid="tlqk35" creationdate="20220321T134710Z">
        <seg>마지막으로 린에 여러분이 시스템과 소통하기 위해 사용하는 언어와 복잡한 이론과 자료를 관리하기 위해 린이 제공하는 메커니즘을 포함하는 구체적인 특징에 대해 배웁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, Lean supports &lt;g1&gt;mutually defined&lt;/g1&gt; inductive types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152347Z" creationid="tlqk35" creationdate="20220528T165028Z">
        <seg>우선 린은 귀납형의 &lt;g1&gt;상호적으로 정의됨(mutually defined)&lt;/g1&gt;을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, the application of
a function &lt;g1&gt;f&lt;/g1&gt; to a value &lt;g2&gt;x&lt;/g2&gt; is denoted &lt;g3&gt;f x&lt;/g3&gt; (e.g., &lt;g4&gt;Nat.succ 2&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140728Z" creationid="tlqk35" creationdate="20220321T140728Z">
        <seg>우선 함수 &lt;g1&gt;f&lt;/g1&gt;에 값 &lt;g2&gt;x&lt;/g2&gt;의 활용은 &lt;g3&gt;f x&lt;/g3&gt; 를 지칭합니다. (예를 들어 &lt;g4&gt;Nat.succ 2&lt;/g4&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, we can use the notation &lt;g7&gt;a ≈ b&lt;/g7&gt; (entered
with &lt;g8&gt;\approx&lt;/g8&gt;) for &lt;g9&gt;Setoid.r a b&lt;/g9&gt;, where the instance of
&lt;g10&gt;Setoid&lt;/g10&gt; is implicit in the notation &lt;g11&gt;Setoid.r&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T174852Z" creationid="tlqk3" creationdate="20220610T174852Z">
        <seg>먼저 &lt;g9&gt;Setoid.r a b&lt;/g9&gt;에 대해 &lt;g7&gt;a ≈ b&lt;/g7&gt;(&lt;g8&gt;\approx&lt;/g8&gt;로 입력) 표기법을 사용할 수 있습니다. 여기서 &lt;g10&gt;Setoid&lt;/g10&gt;의 개체는 &lt;g11&gt;Setoid.r&lt;/g11&gt; 표기법에 내포되어 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, we define
the relevant equivalence relation:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T175759Z" creationid="tlqk3" creationdate="20220610T175759Z">
        <seg>먼저 연관 등가 관계를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, we define a similar
proposition &lt;g6&gt;mem_fn a u&lt;/g6&gt; on (ordered) pairs; then we show that
&lt;g7&gt;mem_fn&lt;/g7&gt; respects the equivalence relation &lt;g8&gt;eqv&lt;/g8&gt; with the lemma
&lt;g9&gt;mem_respects&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T181243Z" creationid="tlqk3" creationdate="20220610T181243Z">
        <seg>먼저 (순서 있는) 쌍에 대해 유사한 명제 &lt;g6&gt;mem_fn a u&lt;/g6&gt;를 정의합니다. 그 뒤 &lt;g7&gt;mem_fn&lt;/g7&gt;이 보조 정리 &lt;g9&gt;mem_respects&lt;/g9&gt;와 등가 관계 &lt;g8&gt;eqv&lt;/g8&gt;를 존중한다는 것을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, we have
to show that it indeed suffices to show &lt;g2&gt;q&lt;/g2&gt;, by proving the original
goal of &lt;g3&gt;q ∧ p&lt;/g3&gt; with the additional hypothesis &lt;g4&gt;hq : q&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T162116Z" creationid="tlqk35" creationdate="20220321T165620Z">
        <seg>우선, 추가적인 가정 &lt;g4&gt;hq : q&lt;/g4&gt;으로 원래 목표&lt;g2&gt;q ∧ p&lt;/g2&gt;를 증명함으로써 &lt;g2&gt;q&lt;/g2&gt;임을 보이기에 충분함을 증명해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, we import the necessary axioms, and define two predicates &lt;g1&gt;U&lt;/g1&gt; and &lt;g2&gt;V&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185111Z" creationid="tlqk3" creationdate="20220610T185111Z">
        <seg>먼저 필요한 공리를 불러오고 두 개의 술어 &lt;g1&gt;U&lt;/g1&gt;와 &lt;g2&gt;V&lt;/g2&gt;를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, we show that the two functions &lt;g1&gt;f&lt;/g1&gt; and &lt;g2&gt;g&lt;/g2&gt; are equal using
function extensionality, and then we cast &lt;g3&gt;0&lt;/g3&gt; of type &lt;g4&gt;Nat&lt;/g4&gt; by
replacing &lt;g5&gt;f&lt;/g5&gt; by &lt;g6&gt;g&lt;/g6&gt; in the type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174956Z" creationid="tlqk3" creationdate="20220605T174956Z">
        <seg>먼저 두 함수 &lt;g1&gt;f&lt;/g1&gt;와 &lt;g2&gt;g&lt;/g2&gt;가 함수 확장성을 사용하여 동일함을 보여주고 유형에서 &lt;g5&gt;f&lt;/g5&gt;를 &lt;g6&gt;g&lt;/g6&gt;로 대체하여 &lt;g4&gt;Nat&lt;/g4&gt;형의 &lt;g3&gt;0&lt;/g3&gt;을 형변환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fixing &lt;g2&gt;m&lt;/g2&gt;, we can define addition by recursion on
&lt;g3&gt;n&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160027Z" creationid="tlqk3" creationdate="20220527T160027Z">
        <seg>&lt;g2&gt;m&lt;/g2&gt;을 고치면 우리는 &lt;g3&gt;n&lt;/g3&gt;에 대한 재귀로부터 덧셈을 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Following the examples in &lt;g1&gt;Section Dependent Pattern Matching&lt;/g1&gt;,
define a function that will append two vectors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181535Z" creationid="tlqk3" creationdate="20220603T181535Z">
        <seg>&lt;g1&gt;종속 패턴 매칭 섹션&lt;/g1&gt;의 다음 예제는 벡터에 벡터를 추가하는 함수를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
any type, &lt;g1&gt;α&lt;/g1&gt;, the type &lt;g2&gt;List α&lt;/g2&gt; of lists of elements of &lt;g3&gt;α&lt;/g3&gt; is
defined in the library.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162958Z" creationid="tlqk3" creationdate="20220527T162958Z">
        <seg>임의의 유형 &lt;g1&gt;α&lt;/g1&gt;에 대한 &lt;g3&gt;α&lt;/g3&gt; 원소의 리스트 &lt;g2&gt;List α&lt;/g2&gt;형은 라이브러리에 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, &lt;g6&gt;a ∧ b → c ∨ d ∧ e&lt;/g6&gt; means &lt;g7&gt;(a ∧ b) → (c ∨ (d ∧
e))&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162247Z" creationid="tlqk35" creationdate="20220321T162247Z">
        <seg>예를 들어 &lt;g6&gt;a ∧ b → c ∨ d ∧ e&lt;/g6&gt;은 &lt;g7&gt;(a ∧ b) → (c ∨ (d ∧ e))&lt;/g7&gt;을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, for the expression &lt;g4&gt;if p then a else b&lt;/g4&gt; to make sense, we
need to know that &lt;g5&gt;p&lt;/g5&gt; is decidable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172410Z" creationid="tlqk3" creationdate="20220604T172410Z">
        <seg>예를 들어 표현식 &lt;g4&gt;if p then a else b&lt;/g4&gt;를 이해하려면 우리는 &lt;g5&gt;p&lt;/g5&gt;가 결정 가능인지 알 필요가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, it would be more natural to define the previous example as a
function of two arguments:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162924Z" creationid="tlqk3" creationdate="20220529T162924Z">
        <seg>예를 들어 이전 예제를 두 인수를 받는 함수로 정의하는 것이 더 자연스럽습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, tactic-style proofs can be harder to read, because they
require the reader to predict or guess the results of each
instruction.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082714Z" creationid="tlqk35" creationdate="20220321T184328Z">
        <seg>예를 들어, 전략 스타일의 증명은 독자가 각 명령의 결과를 예측하거나 추측해야 하기 때문에 읽기 더 어려울 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, the following defines a record to store a color as a triple
of RGB values:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T162402Z" creationid="tlqk3" creationdate="20220526T162402Z">
        <seg>예를 들어 다음은 RGB 3개의 값을 갖는 triple로서 색을 저장하는 레코드를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, the product type comes with the following operations:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T132815Z" creationid="tlqk3" creationdate="20220526T132815Z">
        <seg>예를들어 곱 유형은 다음 연산을 동반합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, the tactic &lt;g1&gt;apply And.intro&lt;/g1&gt; tagged the first sugoal as
&lt;g2&gt;left&lt;/g2&gt;, and the second as &lt;g3&gt;right&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084919Z" creationid="tlqk35" creationdate="20220522T061050Z">
        <seg>예를 들어, 전략  &lt;g1&gt;apply And.intro&lt;/g1&gt;는 첫 목표를 &lt;g2&gt;left&lt;/g2&gt;으로,
두 번째 목표를 &lt;g3&gt;right&lt;/g3&gt;라고 표식을 붙입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, the variable &lt;g4&gt;b&lt;/g4&gt; in the expression &lt;g5&gt;fun (b : β) (x : α) =&gt; b&lt;/g5&gt;
has nothing to do with the constant &lt;g6&gt;b&lt;/g6&gt; declared earlier.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143414Z" creationid="tlqk35" creationdate="20220321T143414Z">
        <seg>예를 들어 표현식 &lt;g5&gt;fun (b : β) (x : α) =&gt; b&lt;/g5&gt; 속 변수 &lt;g4&gt;b&lt;/g4&gt;는 앞서 선언된 상수 &lt;g6&gt;b&lt;/g6&gt;와는 아무런 연관이 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For
example, we can use it to postulate the empty type &lt;g2&gt;False&lt;/g2&gt; has an
element.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121209Z" creationid="tlqk35" creationdate="20220321T161224Z">
        <seg>예를 들어 우리는 이것을 빈 유형 &lt;g2&gt;False&lt;/g2&gt;가 원소를 갖는다고 가정하는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For another example, consider the
type &lt;g5&gt;Vector α n&lt;/g5&gt;, the type of vectors of elements of &lt;g6&gt;α&lt;/g6&gt; of
length &lt;g7&gt;n&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150928Z" creationid="tlqk35" creationdate="20220321T150928Z">
        <seg>또 다른 예시로 유형 &lt;g5&gt;Vector α n&lt;/g5&gt;을 고려해보세요. 이 벡터의 유형은 길이 &lt;g7&gt;n&lt;/g7&gt;인 &lt;g6&gt;α&lt;/g6&gt;를 원소로 하는 리스트입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For another example, let us prove the associativity of addition,
&lt;g1&gt;∀ m n k, m + n + k = m + (n + k)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T161843Z" creationid="tlqk3" creationdate="20220527T161843Z">
        <seg>다른 예제에서 덧셈의 결합성 &lt;g1&gt;∀ m n k, m + n + k = m + (n + k)&lt;/g1&gt;을 증명해 봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For another example, suppose we use a nested inductive type to define a set of terms inductively, so that a term is either a constant (with a name given by a string), or the result of applying a constant to a list of constants.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175018Z" creationid="tlqk3" creationdate="20220603T175018Z">
        <seg>또 다른 예제에서 우리가 중접된 귀납형을 재귀적으로 항들의 집합을 정의하고자 사용한다고 합시다. 그러면 항은 (문자열로 이름이 주어진)상수이거나 상수의 리스트에 상수를 적용한 결과입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For another example, we can define the type of binary trees:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163512Z" creationid="tlqk3" creationdate="20220527T163512Z">
        <seg>또 다른 예제로 우리는 이진 트리의 유형을 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For another example, we can use the &lt;g1&gt;instance&lt;/g1&gt; command to assign the
notation &lt;g2&gt;≤&lt;/g2&gt; to the &lt;g3&gt;isPrefix&lt;/g3&gt; relation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183450Z" creationid="tlqk3" creationdate="20220525T183356Z">
        <seg>다른 예제에서 우리는 &lt;g1&gt;instance&lt;/g1&gt; 명령을 &lt;g3&gt;isPrefix&lt;/g3&gt;관계에 &lt;g2&gt;≤&lt;/g2&gt;기호를 부여하는 데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For convenience, the standard library also defines &lt;g1&gt;Quotient.lift₂&lt;/g1&gt;
for lifting binary functions, and &lt;g2&gt;Quotient.ind₂&lt;/g2&gt; for induction on
two variables.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T181914Z" creationid="tlqk3" creationdate="20220610T181914Z">
        <seg>편의를 위해 표준 라이브러리는 이진 함수를 들어 올리는 &lt;g1&gt;Quotient.lift₂&lt;/g1&gt;와 두 변수에 대한 귀납를 위한 &lt;g2&gt;Quotient.ind₂&lt;/g2&gt;도 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each constructor &lt;g1&gt;c&lt;/g1&gt; as above, and each &lt;g2&gt;βk[a]&lt;/g2&gt; in the sequence &lt;g3&gt;β[a]&lt;/g3&gt;, if &lt;g4&gt;βk[a] : Sort v&lt;/g4&gt;, we have &lt;g5&gt;u&lt;/g5&gt; ≥ &lt;g6&gt;v&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T162047Z" creationid="tlqk35" creationdate="20220528T162047Z">
        <seg>위처럼 각 생성자 &lt;g1&gt;c&lt;/g1&gt;와 &lt;g3&gt;β[a]&lt;/g3&gt;열에서 각 &lt;g2&gt;βk[a]&lt;/g2&gt;에 대해 만약 &lt;g4&gt;βk[a] : Sort v&lt;/g4&gt;이면 &lt;g5&gt;u&lt;/g5&gt; ≥ &lt;g6&gt;v&lt;/g6&gt;이다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each fixed &lt;g1&gt;α : Sort u&lt;/g1&gt; and &lt;g2&gt;a : α&lt;/g2&gt;, this definition
constructs a family of types &lt;g3&gt;Eq a x&lt;/g3&gt;, indexed by &lt;g4&gt;x : α&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153521Z" creationid="tlqk35" creationdate="20220528T153521Z">
        <seg>각 고정된  &lt;g1&gt;α : Sort u&lt;/g1&gt;와 &lt;g2&gt;a : α&lt;/g2&gt;에 대해 이 정의는 &lt;g4&gt;x : α&lt;/g4&gt;으로 색인된 &lt;g3&gt;Eq a x&lt;/g3&gt;형의 군을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For every &lt;g4&gt;p q : Prop&lt;/g4&gt;,
&lt;g5&gt;p ∧ q&lt;/g5&gt; is an example: the canonical way to construct an element is
to apply &lt;g6&gt;And.intro&lt;/g6&gt; to suitable arguments &lt;g7&gt;hp : p&lt;/g7&gt; and
&lt;g8&gt;hq : q&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T125519Z" creationid="tlqk35" creationdate="20220321T163129Z">
        <seg>모든 &lt;g4&gt;p q : Prop&lt;/g4&gt;에 대해 &lt;g5&gt;p ∧ q&lt;/g5&gt;는 예제입니다. 원소를 생성하는 정식 방법은 &lt;g6&gt;And.intro&lt;/g6&gt;를 적절한 인수 &lt;g7&gt;hp : p&lt;/g7&gt;과 &lt;g8&gt;hq : q&lt;/g8&gt;에 대해 적용하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example,
&lt;g1&gt;all_goals t&lt;/g1&gt; applies &lt;g2&gt;t&lt;/g2&gt; to all open goals:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T152303Z" creationid="tlqk35" creationdate="20220524T152303Z">
        <seg>예를 들어 &lt;g1&gt;all_goals t&lt;/g1&gt;는 모든 끝나지 않은 목표에 &lt;g2&gt;t&lt;/g2&gt;를 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example,
suppose we declare a structure in Lean to hold implementations of addition</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153142Z" creationid="tlqk3" creationdate="20220604T153142Z">
        <seg>예를 들어 덧셈의 구현을 유지하기 위해 린에 구조체를 선언한다고 해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example,
using the hypothesis &lt;g1&gt;p&lt;/g1&gt;, it rewrites &lt;g2&gt;p ∧ q&lt;/g2&gt; to &lt;g3&gt;q&lt;/g3&gt; and &lt;g4&gt;p ∨
q&lt;/g4&gt; to &lt;g5&gt;true&lt;/g5&gt;, which it then proves trivially.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123718Z" creationid="tlqk35" creationdate="20220524T163946Z">
        <seg>예를 들어 가정 &lt;g1&gt;p&lt;/g1&gt;를 사용하여 이것은 &lt;g2&gt;p ∧ q&lt;/g2&gt;을 &lt;g3&gt;q&lt;/g3&gt;로 그리고 &lt;g4&gt;p ∨
q&lt;/g4&gt;을 &lt;g5&gt;true&lt;/g5&gt;으로 재작성합니다. 그럼 이것은 자명하게 증명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example,
you can declare an (anonymous) instance stating that if &lt;g5&gt;a&lt;/g5&gt; has addition, then &lt;g6&gt;Array a&lt;/g6&gt;
has addition:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T154932Z" creationid="tlqk3" creationdate="20220604T154932Z">
        <seg>예를 들어 여러분이 (익명) 개체를 &lt;g5&gt;a&lt;/g5&gt;가 덧셈을 갖는다면 &lt;g6&gt;Array a&lt;/g6&gt;도 덧셈을 갖는다고 서술해 선언할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, &lt;g1&gt;(+1)&lt;/g1&gt; is sugar for &lt;g2&gt;fun x, x + 1&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140049Z" creationid="tlqk3" creationdate="20220526T140049Z">
        <seg>예를 들어 &lt;g1&gt;(+1)&lt;/g1&gt;은 &lt;g2&gt;fun x, x + 1&lt;/g2&gt;에 대한 설탕입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, &lt;g2&gt;List α&lt;/g2&gt; should make sense for any type
&lt;g3&gt;α&lt;/g3&gt;, no matter which type universe &lt;g4&gt;α&lt;/g4&gt; lives in.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141914Z" creationid="tlqk35" creationdate="20220321T141914Z">
        <seg>예를 들어 &lt;g3&gt;α&lt;/g3&gt;가 어떤 유형 세계에 있던간에 &lt;g2&gt;List α&lt;/g2&gt;는 임의의 유형 &lt;g4&gt;α&lt;/g4&gt;에 대해 의미가 있어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, &lt;g4&gt;t&lt;/g4&gt; can be a hypothesis &lt;g5&gt;h : x = y&lt;/g5&gt; in the
context; it can be a general lemma, like
&lt;g6&gt;add_comm : ∀ x y, x + y = y + x&lt;/g6&gt;, in which the rewrite tactic tries to find suitable
instantiations of &lt;g7&gt;x&lt;/g7&gt; and &lt;g8&gt;y&lt;/g8&gt;; or it can be any compound term
asserting a concrete or general equation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113611Z" creationid="tlqk35" creationdate="20220524T153958Z">
        <seg>예를 들어 &lt;g4&gt;t&lt;/g4&gt;는 맥락 속에서 가정 &lt;g5&gt;h : x = y&lt;/g5&gt;이 될 수 있습니다. 
그것은 &lt;g6&gt;add_comm : ∀ x y, x + y = y + x&lt;/g6&gt;같은 일반적인 보조 정리일 수 있고, 
여기서 재작성 전략은 &lt;g7&gt;x&lt;/g7&gt;와 &lt;g8&gt;y&lt;/g8&gt; 적절한 인스턴스를 찾으려고 노력합니다.
아니면 이것은 구체적이거나 혹은 일반적인 방정식을 주장하는 어떤 복합적인 항이 될 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, Lean cannot
find an instance of &lt;g1&gt;Inhabited (Set α)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180140Z" creationid="tlqk3" creationdate="20220604T180140Z">
        <seg>예를 들어 &lt;g1&gt;Inhabited (Set α)&lt;/g1&gt;의 개체를 찾을 수 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, Lean groups definitions and theorems involving lists into
a namespace &lt;g1&gt;List&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150513Z" creationid="tlqk35" creationdate="20220321T150513Z">
        <seg>예를 들어 Lean은 이름공간 &lt;g1&gt;List&lt;/g1&gt; 속에 리스트를 포함한 정의와 정리를 묶습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if &lt;g1&gt;a&lt;/g1&gt; and &lt;g2&gt;b&lt;/g2&gt; are types, &lt;g3&gt;a -&gt; b&lt;/g3&gt;
denotes the type of functions from &lt;g4&gt;a&lt;/g4&gt; to &lt;g5&gt;b&lt;/g5&gt;, and &lt;g6&gt;a × b&lt;/g6&gt;
denotes the type of pairs consisting of an element of &lt;g7&gt;a&lt;/g7&gt; paired
with an element of &lt;g8&gt;b&lt;/g8&gt;, also known as the &lt;g9&gt;Cartesian product&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140041Z" creationid="tlqk35" creationdate="20220321T140041Z">
        <seg>예를 들어 &lt;g1&gt;a&lt;/g1&gt;와 &lt;g2&gt;b&lt;/g2&gt;가 유형이라면 &lt;g3&gt;a -&gt; b&lt;/g3&gt;는 &lt;g4&gt;a&lt;/g4&gt; 에서 &lt;g5&gt;b&lt;/g5&gt;로 가는 함수 유형을 나타냅니다. 그리고 &lt;g6&gt;a × b&lt;/g6&gt; 는 &lt;g7&gt;a&lt;/g7&gt;의 원소와 &lt;g8&gt;b&lt;/g8&gt;의 원소로 이뤄진 쌍을 원소로 갖는 유형을 나타냅니다. 이것을 &lt;g9&gt;카테시안 곱&lt;/g9&gt;이라 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if &lt;g5&gt;a&lt;/g5&gt; is a type, &lt;g6&gt;exists x : a, x = x&lt;/g6&gt; is true only if &lt;g7&gt;a&lt;/g7&gt; is not empty.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155621Z" creationid="tlqk3" creationdate="20220604T155621Z">
        <seg>예를 들어 &lt;g5&gt;a&lt;/g5&gt;가 유형이면 &lt;g6&gt;exists x : a, x = x&lt;/g6&gt;은 &lt;g7&gt;a&lt;/g7&gt;가 비어있지 않을 때에만 참입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, if we have have
&lt;g4&gt;hg : g 0 0 = 0&lt;/g4&gt; and write &lt;g5&gt;Exists.intro 0 hg&lt;/g5&gt;, there are many possible values
for the predicate &lt;g6&gt;p&lt;/g6&gt;, corresponding to the theorems &lt;g7&gt;∃ x, g x x = x&lt;/g7&gt;,
&lt;g8&gt;∃ x, g x x = 0&lt;/g8&gt;, &lt;g9&gt;∃ x, g x 0 = x&lt;/g9&gt;, etc.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T070400Z" creationid="tlqk35" creationdate="20220321T181101Z">
        <seg>예를 들어 우리가 have &lt;g4&gt;hg : g 0 0 = 0&lt;/g4&gt;를 갖고 있고 &lt;g5&gt;Exists.intro 0 hg&lt;/g5&gt;을 작성했다면 정리 &lt;g7&gt;∃ x, g x x = x&lt;/g7&gt;과 &lt;g8&gt;∃ x, g x x = 0&lt;/g8&gt;, &lt;g9&gt;∃ x, g x 0 = x&lt;/g9&gt; 등에 대응하는 술어 &lt;g6&gt;p&lt;/g6&gt;에 대한 여러 값이 있을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in a given context, &lt;g2&gt;x + 0&lt;/g2&gt; may
denote a natural number and &lt;g3&gt;f&lt;/g3&gt; may denote a function on the natural
numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135242Z" creationid="tlqk35" creationdate="20220321T135242Z">
        <seg>예를들어 어떤 맥락에서 &lt;g2&gt;x + 0&lt;/g2&gt;은 자연수를 가리키고  &lt;g3&gt;f&lt;/g3&gt;은 자연수에 대한 함수를 지칭합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, in many proof systems for
propositional logic, we have the rule of modus ponens:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T103256Z" creationid="tlqk35" creationdate="20220321T154940Z">
        <seg>예를 들어, 명제 논리를 위한 다수의 증명보조기는 그 속에 전건긍정(modus ponens) 규칙이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, it allows
you to "partially apply" the function &lt;g11&gt;Nat.add&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140858Z" creationid="tlqk35" creationdate="20220321T140858Z">
        <seg>예를 들어 이는 여러분에게 함수 &lt;g11&gt;Nat.add&lt;/g11&gt;의 "부분 적용"을 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, one can
carry out a proof by cases:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T163518Z" creationid="tlqk35" creationdate="20220321T165920Z">
        <seg>예를 들어 누군가는 경우를 나눠 증명을 수행할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, reverting &lt;g2&gt;x&lt;/g2&gt; in the example
above brings &lt;g3&gt;h&lt;/g3&gt; along with it:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091312Z" creationid="tlqk35" creationdate="20220522T064343Z">
        <seg>예를 들어, 위의 예제에서 &lt;g2&gt;x&lt;/g2&gt;를 되돌리는 것은 그것을 따르는 &lt;g3&gt;h&lt;/g3&gt;도 가져옵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, suppose &lt;g1&gt;xs&lt;/g1&gt; has type &lt;g2&gt;α&lt;/g2&gt;, when elaboration &lt;g3&gt;xs.map (fun x =&gt; 2 * x)&lt;/g3&gt;, we want the homogeneous instance for multiplication
to have higher priority than the default instance for &lt;g4&gt;OfNat&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165937Z" creationid="tlqk3" creationdate="20220604T165937Z">
        <seg>예를 들어 &lt;g3&gt;xs.map (fun x =&gt; 2 * x)&lt;/g3&gt;으로 해석될 때 &lt;g1&gt;xs&lt;/g1&gt;가 &lt;g2&gt;α&lt;/g2&gt;형이라고 가정합시다. 우리는 &lt;g4&gt;OfNat&lt;/g4&gt;에 대한 기본 개체보다 더 높은 우선 순위를 갖는 곱셈에 대한 동형 개체를 원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, suppose we
define a list operation that symmetrizes its input by appending its
reversal:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T124404Z" creationid="tlqk35" creationdate="20220524T164342Z">
        <seg>예를 들어 한 리스트를 뒤집은 것을 그 리스트 뒷편에 연결하여 대칭시키는
리스트 연산을 정의해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, term rewriting, and Lean's automated methods for simplifying terms and
expressions automatically.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T132252Z" creationid="tlqk35" creationdate="20220321T132252Z">
        <seg>예를 들어, 항을 다시 쓰기(rewriting)와 Lean의 자동화된 항과 식의 단순화(simplifying) 기법</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the definition of addition may also be written
as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173532Z" creationid="tlqk3" creationdate="20220529T173532Z">
        <seg>예를 들어 덧셈의 정의는 다음과 같이 작성될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following creates the goal of
constructing a term of type &lt;g2&gt;p ∧ q ∧ p&lt;/g2&gt;, in a context with constants
&lt;g3&gt;p q : Prop&lt;/g3&gt;, &lt;g4&gt;hp : p&lt;/g4&gt; and &lt;g5&gt;hq : q&lt;/g5&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082951Z" creationid="tlqk35" creationdate="20220321T184434Z">
        <seg>예를 들어 , 다음은 상수 &lt;g3&gt;p q : Prop&lt;/g3&gt;과 &lt;g4&gt;hp : p&lt;/g4&gt;,&lt;g5&gt;hq : q&lt;/g5&gt;가 있는 맥락에 대해 &lt;g2&gt;p ∧ q ∧ p&lt;/g2&gt;형의 항을 생성하라는 목표를 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following definition shows that if two types &lt;g1&gt;a&lt;/g1&gt; and &lt;g2&gt;b&lt;/g2&gt; are inhabited, then so is their product:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161309Z" creationid="tlqk3" creationdate="20220604T161309Z">
        <seg>예를 들어 다음 정의는 만약 두 유형 &lt;g1&gt;a&lt;/g1&gt;와 &lt;g2&gt;b&lt;/g2&gt;가 내재되었다면 그들의 곱도 그렇다는 것을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following implication requires classical
reasoning because, from a constructive standpoint, knowing that it is
not the case that every &lt;g1&gt;x&lt;/g1&gt; satisfies &lt;g2&gt;¬ p&lt;/g2&gt; is not the same as
having a particular &lt;g3&gt;x&lt;/g3&gt; that satisfies &lt;g4&gt;p&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072525Z" creationid="tlqk35" creationdate="20220321T183059Z">
        <seg>예를 들어, 구성주의적 관점에서 모든 &lt;g1&gt;x&lt;/g1&gt;가 &lt;g2&gt;¬p&lt;/g2&gt;을 만족하는 경우가 없음을 아는 것은 &lt;g4&gt;p&lt;/g4&gt;를 만족하는 특정 &lt;g3&gt;x&lt;/g3&gt;를 갖는 것과 같지 않기에 다음의 함의는 고전적 추론을 요구합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following two expressions mean the same
thing:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T163416Z" creationid="tlqk35" creationdate="20220321T163416Z">
        <seg>예를 들어 다음 두 표현식은 같은 것을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the local variable &lt;g6&gt;a&lt;/g6&gt; occurs
at &lt;g7&gt;let rec loop&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182235Z" creationid="tlqk3" creationdate="20220603T182235Z">
        <seg>예를 들어 지역변수 &lt;g6&gt;a&lt;/g6&gt;는 &lt;g7&gt;let rec loop&lt;/g7&gt;에 나타납니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the tactics &lt;g1&gt;apply&lt;/g1&gt; and &lt;g2&gt;exact&lt;/g2&gt;
expect arbitrary terms, which you can write using &lt;g3&gt;have&lt;/g3&gt;, &lt;g4&gt;show&lt;/g4&gt;,
and so on.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104818Z" creationid="tlqk35" creationdate="20220524T143008Z">
        <seg>예를 들어 &lt;g1&gt;apply&lt;/g1&gt;와&lt;g2&gt;exact&lt;/g2&gt; 전략은 
&lt;g3&gt;have&lt;/g3&gt;, &lt;g4&gt;show&lt;/g4&gt; 등등을 사용해 만든 임의의 항을 기대합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the theorem named &lt;g1&gt;le_of_succ_le_succ&lt;/g1&gt; in the
namespace &lt;g2&gt;Nat&lt;/g2&gt; has full name &lt;g3&gt;Nat.le_of_succ_le_succ&lt;/g3&gt;, but the shorter
name is made available by the command &lt;g4&gt;open Nat&lt;/g4&gt; (for names not marked as
&lt;g5&gt;protected&lt;/g5&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T132444Z" creationid="tlqk3" creationdate="20220526T132444Z">
        <seg>예를 들어, 정리는 이름공간 &lt;g2&gt;Nat&lt;/g2&gt; 에서 &lt;g1&gt;le_of_succ_le_succ&lt;/g1&gt;으로 이름지어진 정리는 &lt;g3&gt;Nat.le_of_succ_le_succ&lt;/g3&gt;을 긴 이름으로 갖습니다. 그러나 더 짧은 이름은 &lt;g4&gt;open Nat&lt;/g4&gt; 명령으로 사용할 수 있게 됩니다.(&lt;g5&gt;protected&lt;/g5&gt;로 표시된 이름을 제외하고)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, using
the abbreviation &lt;g3&gt;rw&lt;/g3&gt; for rewrite, the proof above could be written
as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064433Z" creationid="tlqk35" creationdate="20220321T180400Z">
        <seg>예를 들어, 재작성을 위해 약어 &lt;g3&gt;rw&lt;/g3&gt;를 사용해 위의 증명은 다음과 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, we
use this notation to define "points." The order that the fields are
specified does not matter, so all the expressions below define the
same point.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T182304Z" creationid="tlqk35" creationdate="20220528T182304Z">
        <seg>예를 들어 우리는 "점"을 정의하기 위해 이 기호를 사용합니다. 필드가 나타난 순서는 중요하지 않습니다. 그래서 아래의 모든 표현식들은 같은 점을 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, we can fill the goals above in the opposite order:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165616Z" creationid="tlqk3" creationdate="20220527T165616Z">
        <seg>예를 들어 우리는 위의 목표를 반대 순서로 채울 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, we can prove the decidability of basic
operations like equality and comparisons on the natural numbers and
the integers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173008Z" creationid="tlqk3" creationdate="20220604T173008Z">
        <seg>예를 들어 우리는 자연수와 정수에 대한 등식과 부등식 같은 기본 연산의 결정 가능성을 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, we can put
the &lt;g1&gt;numberOfDay&lt;/g1&gt; function in the &lt;g2&gt;Weekday&lt;/g2&gt; namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151057Z" creationid="tlqk3" creationdate="20220526T151057Z">
        <seg>예를 들어, 우리는 &lt;g2&gt;Weekday&lt;/g2&gt; 이름공간에 &lt;g1&gt;numberOfDay&lt;/g1&gt;함수를 넣을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, we could introduce a new type, &lt;g1&gt;Prop&lt;/g1&gt;, to represent
propositions, and introduce constructors to build new propositions
from others.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T102611Z" creationid="tlqk35" creationdate="20220321T154843Z">
        <seg>예를 들어, 우리는 명제를 나타내는 새 유형 &lt;g1&gt;Prop&lt;/g1&gt;과 다른 유형으로부터 새로운 명제를 만드는 생성자를 도입할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, when applied to a goal of the form
&lt;g1&gt;p ∨ q&lt;/g1&gt;, you use tactics such as &lt;g2&gt;apply Or.inl&lt;/g2&gt; and &lt;g3&gt;apply
Or.inr&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T070256Z" creationid="tlqk35" creationdate="20220522T070256Z">
        <seg>예를 들어, &lt;g1&gt;p ∨ q&lt;/g1&gt;꼴의 목표에 적용했을 때, 여러분은 &lt;g2&gt;apply Or.inl&lt;/g2&gt;과 &lt;g3&gt;apply
Or.inr&lt;/g3&gt; 같은 전략들을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, with the definition of scalar multiplication
below, &lt;g6&gt;p.smul 3&lt;/g6&gt; is interpreted as &lt;g7&gt;Point.smul 3 p&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181659Z" creationid="tlqk35" creationdate="20220528T180528Z">
        <seg>예를 들어 아래의 스칼라 곱의 정의에서 &lt;g6&gt;p.smul 3&lt;/g6&gt;은 &lt;g7&gt;Point.smul 3 p&lt;/g7&gt;으로 해석됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can say that there are infinitely many
primes by asserting that for every natural number &lt;g4&gt;n&lt;/g4&gt;, there is a
prime number greater than &lt;g5&gt;n&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183935Z" creationid="tlqk35" creationdate="20220321T183935Z">
        <seg>예를 들어, 여러분은 모든 자연수 &lt;g4&gt;n&lt;/g4&gt;에 대해 &lt;g5&gt;n&lt;/g5&gt;보다 큰 소수가 있다고 주장하여 무한히 많은 소수가 있다고 말할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, you can use &lt;g4&gt;cases&lt;/g4&gt; and &lt;g5&gt;constructor&lt;/g5&gt; with an existential quantifier:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T094058Z" creationid="tlqk35" creationdate="20220522T071910Z">
        <seg>예를 들어, 여러분은&lt;g4&gt;cases&lt;/g4&gt;와 &lt;g5&gt;constructor&lt;/g5&gt;을 존재 한정기호와 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144651Z" creationid="tlqk35" creationdate="20220321T144651Z">
        <seg>예를 들어</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For most of its history, mathematics was essentially computational:
geometry dealt with constructions of geometric objects, algebra was
concerned with algorithmic solutions to systems of equations, and
analysis provided means to compute the future behavior of systems
evolving over time.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T164420Z" creationid="tlqk3" creationdate="20220605T164420Z">
        <seg>대부분의 역사에서 수학은 본래 계산적이었습니다. 기하학은 기하학적 물체의 구성을 다뤘고, 대수학은 연립방정식의 산술적 해에 관해서 그리고 해석학은 시간의 흐름에 따른 시스템의 향후 거동을 계산하는 수단을 제공했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For now, notice that
this is an important feature of dependent type theory: every term has
a computational behavior, and supports a notion of &lt;g1&gt;normalization&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143711Z" creationid="tlqk35" creationdate="20220321T143711Z">
        <seg>현재로써는 이게 의존 유형론의 중요한 특징인 것만 알아 두세요. 모든 항은 전산적 거동을 하고 &lt;g1&gt;정규화(normalization)&lt;/g1&gt;의 개념을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For one thing, &lt;g1&gt;cases&lt;/g1&gt; allows
you to choose the names for each alternative using a
&lt;g2&gt;with&lt;/g2&gt; clause.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164330Z" creationid="tlqk3" creationdate="20220527T164330Z">
        <seg>한 가지에 대해, &lt;g1&gt;cases&lt;/g1&gt;는 여러분이 &lt;g2&gt;with&lt;/g2&gt; 절을 사용하여 각 대안에 대한 이름을 선택할 수 있도록 허용합니다. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For operations that are commutative and associative, like
multiplication on the natural numbers, the simplifier uses these two
facts to rewrite an expression, as well as &lt;g1&gt;left commutativity&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T121723Z" creationid="tlqk35" creationdate="20220524T161932Z">
        <seg>자연수 곱셈 같은 교환성과 결합성이 있는 연산자에 대해 왼쪽 교환성과 
마찬가지로 단순화기는 표현식을 재작성 하는데 이 두 사실을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For reference, here are two sample proofs of validities taken from the
list above.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165706Z" creationid="tlqk35" creationdate="20220321T170519Z">
        <seg>참고로 위의 리스트에서 가져온 유효성의 증명 예시가 두 개 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For simple sugoals, it may not be worth selecting a subgoal using its
tag, but you may still want to structure the proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085252Z" creationid="tlqk35" creationdate="20220522T061653Z">
        <seg>간단한 하위목표에 대해 그것의 태그을 이용해 하위목표를 선택하는 것은 불필요할 수 있지만
그래도 여러분은 여전히 증명을 구조화하길 원할지도 모릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For structures containing many fields, this is often
inconvenient, because we have to remember the order in which the
fields were defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T182011Z" creationid="tlqk35" creationdate="20220528T182011Z">
        <seg>많은 필드를 포함한 구조체에 대해 우리는 필드가 정의된 순서를 기억해야만 하기 때문에 이것은 종종 불편합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For that purpose, Lean provides the notion of
a &lt;g1&gt;section&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150040Z" creationid="tlqk35" creationdate="20220321T150040Z">
        <seg>이를 위해 Lean은  &lt;g1&gt;section&lt;/g1&gt;의 개념을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For that reason, it
is common to make these arguments implicit:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065645Z" creationid="tlqk35" creationdate="20220321T174219Z">
        <seg>이런 이유로 이런 인수를 암시적으로 만드는 것은 흔합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For that reason, these four constants are not viewed as
additional axioms:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183324Z" creationid="tlqk3" creationdate="20220605T183324Z">
        <seg>이러한 이유로 다음 네 개의 상수는 추가적인 공리로 간주되지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For that to be the case, each of them also has to have a
type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141327Z" creationid="tlqk35" creationdate="20220321T141327Z">
        <seg>이렇게 하는 경우에 대해 그들 각각은 유형을 가져야만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For theorem names,
we rely on descriptive names where the different components are separated
by &lt;g3&gt;_&lt;/g3&gt;s.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T132029Z" creationid="tlqk3" creationdate="20220526T132029Z">
        <seg>정리 이름에 대해, 우리는 다른 부분은 &lt;g3&gt;_&lt;/g3&gt;들로 나뉜 설명하는 이름에 의존합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For those who like precise definitions, a Lean natural number
is an arbitrary-precision unsigned integer.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135255Z" creationid="tlqk35" creationdate="20220321T135255Z">
        <seg>엄밀한 정의를 좋아하는 이들에게 린의 자연수는 부호없는 임의 정밀도의 정수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Formally, expressions that are the same up to a renaming of bound
variables are called &lt;g1&gt;alpha equivalent&lt;/g1&gt;, and are considered "the
same." Lean recognizes this equivalence.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143446Z" creationid="tlqk35" creationdate="20220321T143446Z">
        <seg>공식적으로 구속 변수의 이름이 바뀌기까지 같은 표현식은 &lt;g1&gt;알파 등가(alpha equivalent)&lt;/g1&gt;라 하고 "같은" 것으로 생각합니다. 린도 이를 등가로 인식합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From a
constructive point of view, it is unacceptable; because there is no
way to implement such a function in general, the construction is not
informative.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T192008Z" creationid="tlqk3" creationdate="20220610T192008Z">
        <seg>일반적으로 그러한 기능을 구현할 방법이 없고 생성도 유익하지 않으므로 직관주의적인 관점에서 이는 허용되지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From a &lt;g1&gt;constructive&lt;/g1&gt; point of
view, it is a mistake to separate mathematics from its computational
roots; every meaningful mathematical theorem should have a direct
computational interpretation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T170533Z" creationid="tlqk3" creationdate="20220605T170533Z">
        <seg>&lt;g1&gt;직관주의적&lt;/g1&gt; 관점에서, 수학을 그것의 계산적 뿌리로부터 나누는 것은 실수입니다. 모든 의미 있는 수학 정리는 직접적인 계산 해석을 가져야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From a &lt;g2&gt;classical&lt;/g2&gt; point of view, it is
more fruitful to maintain a separation of concerns: we can use one
language and body of methods to write computer programs, while
maintaining the freedom to use a nonconstructive theories and methods
to reason about them.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171017Z" creationid="tlqk3" creationdate="20220605T171017Z">
        <seg>&lt;g2&gt;고전주의적&lt;/g2&gt; 관점에서 관심사를 나눠두는 것은 더 유익합니다. 비직관주의적 이론과 그들에 대한 추론 방법을 쓰는 자유는 내버려두면서 우리는 한 언어와 방법의 몸체를 사용해 컴퓨터 프로그램을 작성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From a classical point of view, &lt;g1&gt;linv&lt;/g1&gt; is a function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191652Z" creationid="tlqk3" creationdate="20220610T191652Z">
        <seg>고전적인 관점에서 &lt;g1&gt;linv&lt;/g1&gt;는 함수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From a classical, set-theoretic perspective, this is exactly what it
means for two functions to be equal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173706Z" creationid="tlqk3" creationdate="20220605T173706Z">
        <seg>고전적인 집합론적 관점에서, 이것은 정확히 두 함수가 동일하다는 의미입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From a constructive perspective, however, it is
sometimes more natural to think of functions as algorithms, or
computer programs, that are presented in some explicit way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173814Z" creationid="tlqk3" creationdate="20220605T173814Z">
        <seg>그러나 직관주의적 관점에서 볼 때 함수를 명시적으로 제공되는 알고리즘 또는 컴퓨터 프로그램으로 생각하는 것이 더 자연스러운 경우가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From a proof of &lt;g1&gt;Implies p q&lt;/g1&gt; and a proof of &lt;g2&gt;p&lt;/g2&gt;, we obtain a proof of &lt;g3&gt;q&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T103334Z" creationid="tlqk35" creationdate="20220321T155000Z">
        <seg>&lt;g1&gt;Implies p q&lt;/g1&gt;의 증명과 &lt;g2&gt;p&lt;/g2&gt;의 증명으로부터 &lt;g3&gt;q&lt;/g3&gt;의 증명을 얻을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From the
constructive point of view, proofs are abstract mathematical objects
that are &lt;g1&gt;denoted&lt;/g1&gt; by suitable expressions in dependent type
theory.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T112404Z" creationid="tlqk35" creationdate="20220321T160343Z">
        <seg>구성주의적 관점에서 증명은 의존 유형론의 적절한 표현식으로 &lt;g1&gt;표기된&lt;/g1&gt;추상적인 수학적 대상입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From the proof of a theorem to the effect that
"for every &lt;g1&gt;x&lt;/g1&gt;, there is a &lt;g2&gt;y&lt;/g2&gt; such that ...", it was generally
straightforward to extract an algorithm to compute such a &lt;g3&gt;y&lt;/g3&gt; given
&lt;g4&gt;x&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T164735Z" creationid="tlqk3" creationdate="20220605T164735Z">
        <seg>"모든 &lt;g1&gt;x&lt;/g1&gt;에 대해 ...인 &lt;g2&gt;y&lt;/g2&gt;가 있다"는 정리의 증명에서부터 효과까지, 주어진 &lt;g4&gt;x&lt;/g4&gt;에 대해 그런 &lt;g3&gt;y&lt;/g3&gt;를 계산하는 알고리즘을 추출하는 것은 보통 직관적이었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Function Abstraction and Evaluation</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142123Z" creationid="tlqk35" creationdate="20220321T142123Z">
        <seg>함수 추상화와 함수값의 평가</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Function Extensionality</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173405Z" creationid="tlqk3" creationdate="20220605T173405Z">
        <seg>함수 확장성</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally speaking, for an inductive type in &lt;g2&gt;Prop&lt;/g2&gt;, the
motive of the elimination rule is required to be in &lt;g3&gt;Prop&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152305Z" creationid="tlqk35" creationdate="20220528T162615Z">
        <seg>쉽게 말하자면 &lt;g2&gt;Prop&lt;/g2&gt;에 대한 귀납형에 대해 제거 규칙의 동기는 &lt;g3&gt;Prop&lt;/g3&gt;에 있어야 함을 요구합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally speaking, the equation compiler processes input of the following form:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170517Z" creationid="tlqk3" creationdate="20220529T170517Z">
        <seg>폭넓게 말하자면, 방정식 컴파일러는 다음 형태의 입력을 처리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given &lt;g1&gt;p : Point Nat&lt;/g1&gt;, the dot notation &lt;g2&gt;p.x&lt;/g2&gt; is shorthand for
&lt;g3&gt;Point.x p&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174355Z" creationid="tlqk35" creationdate="20220528T174355Z">
        <seg>&lt;g1&gt;p : Point Nat&lt;/g1&gt;에 대해서 점 기호 &lt;g2&gt;p.x&lt;/g2&gt;은 &lt;g3&gt;Point.x p&lt;/g3&gt;에 대한 축약 표현입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given &lt;g2&gt;r&lt;/g2&gt; as
above, if we define &lt;g3&gt;r'&lt;/g3&gt; according to the rule &lt;g4&gt;r' a b&lt;/g4&gt; iff
&lt;g5&gt;Quot.mk r a = Quot.mk r b&lt;/g5&gt;, then it's clear that &lt;g6&gt;r'&lt;/g6&gt; is an
equivalence relation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183959Z" creationid="tlqk3" creationdate="20220605T183959Z">
        <seg>위와 같이 &lt;g2&gt;r&lt;/g2&gt;이 주어지면 &lt;g4&gt;r' a b&lt;/g4&gt;이 &lt;g5&gt;Quot.mk r a = Quot.mk r b&lt;/g5&gt;와 동등관계라는 규칙에 따라 &lt;g3&gt;r'&lt;/g3&gt;을 정의하면, &lt;g6&gt;r'&lt;/g6&gt;이 등가 관계임이 분명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given &lt;g3&gt;α : Type&lt;/g3&gt; and &lt;g4&gt;β : α → Type&lt;/g4&gt;, think of &lt;g5&gt;β&lt;/g5&gt;
as a family of types over &lt;g6&gt;α&lt;/g6&gt;, that is, a type &lt;g7&gt;β a&lt;/g7&gt; for each
&lt;g8&gt;a : α&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151703Z" creationid="tlqk35" creationdate="20220321T151703Z">
        <seg>&lt;g3&gt;α : Type&lt;/g3&gt;과&lt;g4&gt;β : α → Type&lt;/g4&gt;이라면, &lt;g5&gt;β&lt;/g5&gt;를 &lt;g6&gt;α&lt;/g6&gt;에 대한 유형 족(family)으로 생각할 수 있습니다. 즉, 각각의 &lt;g8&gt;a : α&lt;/g8&gt;에 대해 &lt;g7&gt;β a&lt;/g7&gt;유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given a proof &lt;g1&gt;∀ x : α, p x&lt;/g1&gt; and any term &lt;g2&gt;t : α&lt;/g2&gt;, we obtain a proof of &lt;g3&gt;p t&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T061350Z" creationid="tlqk35" creationdate="20220321T173000Z">
        <seg>증명 &lt;g1&gt;∀ x : α, p x&lt;/g1&gt;과 임의의 항 &lt;g2&gt;t : α&lt;/g2&gt;이 있다고 하자, 그럼 &lt;g3&gt;p t&lt;/g3&gt;의 증명을 얻는다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given a proof of &lt;g1&gt;p x&lt;/g1&gt;, in a context where &lt;g2&gt;x : α&lt;/g2&gt; is arbitrary, we obtain a proof &lt;g3&gt;∀ x : α, p x&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T061249Z" creationid="tlqk35" creationdate="20220321T172917Z">
        <seg>임의의 &lt;g2&gt;x : α&lt;/g2&gt;의 맥락에서 &lt;g1&gt;p x&lt;/g1&gt;의 증명이 주여졌다면 우리는 증명 &lt;g3&gt;∀ x : α, p x&lt;/g3&gt;을 얻는다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given a term &lt;g1&gt;s : (x : α) → β x&lt;/g1&gt; and any term &lt;g2&gt;t : α&lt;/g2&gt;, we have &lt;g3&gt;s t : β t&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T063643Z" creationid="tlqk35" creationdate="20220321T173120Z">
        <seg>항 &lt;g1&gt;s : (x : α) → β x&lt;/g1&gt;과 임의의 항 &lt;g2&gt;t : α&lt;/g2&gt;이 주어졌다고 해봅시다. 그러면 &lt;g3&gt;s t : β t&lt;/g3&gt;을 갖는다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given a term &lt;g1&gt;t&lt;/g1&gt; of type &lt;g2&gt;β x&lt;/g2&gt;, in a context where &lt;g3&gt;x : α&lt;/g3&gt; is arbitrary, we have &lt;g4&gt;(fun x : α =&gt; t) : (x : α) → β x&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T063638Z" creationid="tlqk35" creationdate="20220321T173049Z">
        <seg>&lt;g2&gt;β x&lt;/g2&gt;형의 항 &lt;g1&gt;t&lt;/g1&gt;가 임의의 &lt;g3&gt;x : α&lt;/g3&gt;의 맥락 속에서 주어졌다고 하면 &lt;g4&gt;(fun x : α =&gt; t) : (x : α) → β x&lt;/g4&gt;을 갖는다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given a type &lt;g1&gt;α&lt;/g1&gt;, a relation &lt;g2&gt;r&lt;/g2&gt; on &lt;g3&gt;α&lt;/g3&gt;, and a proof &lt;g4&gt;p&lt;/g4&gt;
that &lt;g5&gt;r&lt;/g5&gt; is an equivalence relation, we can define &lt;g6&gt;Setoid.mk p&lt;/g6&gt;
as an instance of the setoid class.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T174417Z" creationid="tlqk3" creationdate="20220610T174417Z">
        <seg>어떤 &lt;g1&gt;α&lt;/g1&gt;형에 대한 관계 &lt;g2&gt;r&lt;/g2&gt; 및 &lt;g5&gt;r&lt;/g5&gt;와 등가 관계인 증명 &lt;g4&gt;p&lt;/g4&gt;가 주어지면 &lt;g6&gt;Setoid.mk p&lt;/g6&gt;를 setoid 클래스의 개체로 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given an application &lt;g4&gt;hMul a b&lt;/g4&gt;, after types of &lt;g5&gt;a&lt;/g5&gt; and &lt;g6&gt;b&lt;/g6&gt; are known, the type class
synthesizer is invoked, and the resulting type is obtained from the output parameter &lt;g7&gt;γ&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164147Z" creationid="tlqk3" creationdate="20220604T164104Z">
        <seg>활용 &lt;g4&gt;hMul a b&lt;/g4&gt;에 대해서 &lt;g5&gt;a&lt;/g5&gt;와 &lt;g6&gt;b&lt;/g6&gt;의 유형이 알려진 뒤에 유형 클래스 합성기가 호출됩니다. 그리고 결과 유형은 출력 매개변수 &lt;g7&gt;γ&lt;/g7&gt;로부터 얻어집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given an appropriate semantics, it then makes sense to reduce
terms in ways that preserve their meaning, ignoring the intermediate
bookkeeping needed to make the reductions type correct.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T180221Z" creationid="tlqk3" creationdate="20220605T175950Z">
        <seg>적절한 의미가 주어지면, 축소 유형을 올바르게 만드는 데 필요한 중간 장부를 무시하면서 항의 의미를 보존하는 방식으로 항를 줄이는 것이 합리적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given an expression
&lt;g1&gt;e&lt;/g1&gt; of an inductive type &lt;g2&gt;Foo&lt;/g2&gt; (possibly applied to some
arguments), the notation &lt;g3&gt;e.bar&lt;/g3&gt; is shorthand for &lt;g4&gt;Foo.bar e&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T132757Z" creationid="tlqk35" creationdate="20220321T163400Z">
        <seg>(아마 몇 인수에 적용한) 귀납형 &lt;g2&gt;Foo&lt;/g2&gt;의 표현식 &lt;g1&gt;e&lt;/g1&gt;에 대해 &lt;g3&gt;e.bar&lt;/g3&gt;과 같은 표기는 &lt;g4&gt;Foo.bar e&lt;/g4&gt;의 약식 표현입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given any type &lt;g9&gt;α&lt;/g9&gt;,
we should be able to assign a value to each accessible element of
&lt;g10&gt;α&lt;/g10&gt;, recursively, by assigning values to all its predecessors first.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T174522Z" creationid="tlqk3" creationdate="20220529T174522Z">
        <seg>임의의 유형 &lt;g9&gt;α&lt;/g9&gt;에 대해서 우리는 그것의 모든 전임자들을 우선으로 값을 할당하여 &lt;g10&gt;α&lt;/g10&gt;의 각 접근 가능한 원소에 값을 재귀적으로 할당할 수 있어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given only the assertion &lt;g1&gt;h&lt;/g1&gt; that &lt;g2&gt;α&lt;/g2&gt; is nonempty, &lt;g3&gt;choice h&lt;/g3&gt;
magically produces an element of &lt;g4&gt;α&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T183339Z" creationid="tlqk3" creationdate="20220610T183339Z">
        <seg>&lt;g2&gt;α&lt;/g2&gt;가 비어 있지 않다는 주장 &lt;g1&gt;h&lt;/g1&gt;만 주어지면 &lt;g3&gt;choice h&lt;/g3&gt;는 마술처럼 &lt;g4&gt;α&lt;/g4&gt;의 원소를 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given that every expression in Lean has a type, it is natural to ask:
what type does &lt;g1&gt;Type&lt;/g1&gt; itself have?</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141547Z" creationid="tlqk35" creationdate="20220321T141547Z">
        <seg>린의 모든 표현식이 유형을 가진다면 &lt;g1&gt;Type&lt;/g1&gt; 그 자체는 어떤 유형을 가져야 하는지 궁금한게 당연합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Given the fundamental importance of inductive types in Lean, it should
not be surprising that there are a number of tactics designed to work
with them effectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163649Z" creationid="tlqk3" creationdate="20220527T163649Z">
        <seg>린의 귀납형의 근본적인 중요성이 제시되었을 때 이들과 효과적으로 동작하도록 설계된 다수의 전략이 있는 것은 놀라운 일이 아닙니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Go back to the exercises in &lt;g1&gt;Chapter Propositions and
Proofs&lt;/g1&gt; and
&lt;g2&gt;Chapter Quantifiers and Equality&lt;/g2&gt; and
redo as many as you can now with tactic proofs, using also &lt;g3&gt;rw&lt;/g3&gt;
and &lt;g4&gt;simp&lt;/g4&gt; as appropriate.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T131836Z" creationid="tlqk35" creationdate="20220524T171356Z">
        <seg>&lt;g1&gt;명제와 증명&lt;/g1&gt;과 &lt;g2&gt; 한정기호와 동등성&lt;/g2&gt;의 연습문제로 돌아가서 
전략 증명으로 여러분이 할 수 있는 만큼 많이 다시 해보세요. 
&lt;g3&gt;rw&lt;/g3&gt;와 &lt;g4&gt;simp&lt;/g4&gt;도 적절히 사용하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Going beyond basic notations, Lean's
ability to factor out common boilerplate code into (well-behaved)
macros and to embed entire custom domain specific languages (DSLs) to
textually encode subproblems efficiently and readably can be of great
benefit to both programmers and proof engineers alike.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T121256Z" creationid="tlqk3" creationdate="20220526T121256Z">
        <seg>기본 기호를 넘어서 흔한 상용구 코드(잘 동작하는)를 매크로로 묶고 전체 사용자 정의 도메인 특정 언어(domain specific languages, DSLs)를 포함해 하위 문제를 효율적이고 가독성있게 텍스트로 인코딩하는 린의 능력은 프로그래머와 증명 엔지니어 같은 모든 이에게 큰 이득이 될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Goldbach's weak conjecture states
that every odd number greater than 5 is the sum of three
primes.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183948Z" creationid="tlqk35" creationdate="20220321T183948Z">
        <seg>골드바흐의 약한 추측은 5보다 큰 모든 홀수 세 소수의 합으로 표현될 수 있다고 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Having adopted a proof-irrelevant &lt;g1&gt;Prop&lt;/g1&gt;, one might consider it
legitimate to use, for example, the law of the excluded middle,
&lt;g2&gt;p ∨ ¬p&lt;/g2&gt;, where &lt;g3&gt;p&lt;/g3&gt; is any proposition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172529Z" creationid="tlqk3" creationdate="20220605T172529Z">
        <seg>증명 무관한 &lt;g1&gt;Prop&lt;/g1&gt;를 도입하였다면 어떤 이는 예를 들어 &lt;g3&gt;p&lt;/g3&gt; 가 임의의 명제일 때 이것이 배중률 &lt;g2&gt;p ∨ ¬p&lt;/g2&gt;을 사용해도 적법한지 고려할 지 모릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here
are a few examples:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140141Z" creationid="tlqk3" creationdate="20220526T140141Z">
        <seg>여기 몇 가지 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here
is an example:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T181420Z" creationid="tlqk35" creationdate="20220321T181420Z">
        <seg>여기 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here &lt;g1&gt;(a : α)&lt;/g1&gt; is a sequence of parameters, &lt;g2&gt;(b : β)&lt;/g2&gt; is the
sequence of arguments on which pattern matching takes place, and &lt;g3&gt;γ&lt;/g3&gt;
is any type, which can depend on &lt;g4&gt;a&lt;/g4&gt; and &lt;g5&gt;b&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170647Z" creationid="tlqk3" creationdate="20220529T170647Z">
        <seg>여기서 &lt;g1&gt;(a : α)&lt;/g1&gt;는 매개변수의 나열입니다. 패턴 매칭이 일어나는 &lt;g2&gt;(b : β)&lt;/g2&gt;은 인수의 나열입니다. 그리고 &lt;g3&gt;γ&lt;/g3&gt;는 &lt;g4&gt;a&lt;/g4&gt;와 &lt;g5&gt;b&lt;/g5&gt;에 의존할 수 있는 임의의 유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here &lt;g1&gt;sampleExpr&lt;/g1&gt; represents &lt;g2&gt;(v₀ * 7) + (2 * v₁)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180630Z" creationid="tlqk3" creationdate="20220603T180630Z">
        <seg>여기서 &lt;g1&gt;sampleExpr&lt;/g1&gt;이 &lt;g2&gt;(v₀ * 7) + (2 * v₁)&lt;/g2&gt;을 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here &lt;g1&gt;u_1&lt;/g1&gt; is a variable ranging over type levels.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141951Z" creationid="tlqk35" creationdate="20220321T141951Z">
        <seg>여기서 &lt;g1&gt;u_1&lt;/g1&gt;는 어떤 유형 세계에 대한 변수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are
few examples</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135638Z" creationid="tlqk3" creationdate="20220526T135638Z">
        <seg>여기 몇 가지 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are a number of similar examples:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183548Z" creationid="tlqk3" creationdate="20220603T183548Z">
        <seg>여기 비슷한 예제가 많이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are solutions to two of the more difficult ones:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183205Z" creationid="tlqk35" creationdate="20220321T183205Z">
        <seg>여기 더 어려운 두 문제에 대한 해답이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some additional examples:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172112Z" creationid="tlqk3" creationdate="20220527T172112Z">
        <seg>여기 추가 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some examples of how you can declare objects in Lean and
check their types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135259Z" creationid="tlqk35" creationdate="20220321T135259Z">
        <seg>린에서 여러분이 객체를 어떻게 선언하고 그들의 유형을 확인할 수 있는지 몇 가지 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some examples of structural
recursion from the last chapter, now defined using the equation
compiler:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T172301Z" creationid="tlqk3" creationdate="20220529T172301Z">
        <seg>이제 방정식 컴파일러를 사용해 정의될 마지막 장의 구조적 재귀에 대한 몇 가지 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some examples:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180921Z" creationid="tlqk35" creationdate="20220321T180921Z">
        <seg>여기 몇 가지 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some more examples</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142527Z" creationid="tlqk35" creationdate="20220321T142527Z">
        <seg>여기 추가 예제가 더 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some more examples
with lists:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T121112Z" creationid="tlqk35" creationdate="20220524T161430Z">
        <seg>여기에 리스트에 대한 몇 가지 예제가 더 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some more examples of nested pattern matching:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162836Z" creationid="tlqk3" creationdate="20220529T162836Z">
        <seg>여기 중첩된 패턴 매칭에 대한 몇 가지 추가 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some of the constructions generated for the
declaration above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174003Z" creationid="tlqk35" creationdate="20220528T174003Z">
        <seg>여기 생성자의 몇 가지가 위의 선언에 대해서 생성되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here are some simple theorems and expressions that use the generated
constructions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174230Z" creationid="tlqk35" creationdate="20220528T174230Z">
        <seg>여기 만들어진 생성자를 사용하는 몇 가지 간단한 정리와 표현식이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a better way:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T163733Z" creationid="tlqk3" creationdate="20220603T163733Z">
        <seg>여기 더 나은 방식이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a more
elaborate example:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183650Z" creationid="tlqk35" creationdate="20220321T183650Z">
        <seg>여기 더 협력(elaborate)하는 예제들이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a proof
of &lt;g11&gt;p ∧ q ↔ q ∧ p&lt;/g11&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164759Z" creationid="tlqk35" creationdate="20220321T164759Z">
        <seg>여기 &lt;g11&gt;p ∧ q ↔ q ∧ p&lt;/g11&gt;의 증명이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a similarly contrived example that shows how
&lt;g12&gt;propext&lt;/g12&gt; can get in the way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175551Z" creationid="tlqk3" creationdate="20220605T175551Z">
        <seg>다음은 마찬가지로 어떻게 &lt;g12&gt;propext&lt;/g12&gt;가 방해할 수 있는지를 보여주도록 고안된 예입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a small example,
adapted from the last section:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T165107Z" creationid="tlqk35" creationdate="20220321T165107Z">
        <seg>여기 이전 장에서 가져온 작은 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example of a calculation in the natural numbers that uses
substitution combined with associativity, commutativity, and
distributivity.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082954Z" creationid="tlqk35" creationdate="20220321T180018Z">
        <seg>여기는 결합성과 교환성, 분배성을 결합하여 치환을 사용하는 자연수 계산 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example of how the propositions-as-types correspondence gets put into practice.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064337Z" creationid="tlqk35" creationdate="20220321T173724Z">
        <seg>여기에 유형으로써 명제 대응이 실전에서 어떻게 쓰이는지에 대한 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example of how we can carry out elementary reasoning with an equivalence relation:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065820Z" creationid="tlqk35" creationdate="20220321T174357Z">
        <seg>여기서는 동등 관계로 어떻게 기초적인 추론을 할 수 있는지 예시를 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example of rewriting using a compound expression:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113816Z" creationid="tlqk35" creationdate="20220524T154307Z">
        <seg>여기서 복합 표현식을 사용하는 재작성에 대한 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example with multiple constructors with arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165155Z" creationid="tlqk3" creationdate="20220527T165155Z">
        <seg>인자를 갖는 다수의 생성자 있는 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is an example:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180323Z" creationid="tlqk35" creationdate="20220321T180323Z">
        <seg>여기 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is another example where we use the recursor &lt;g1&gt;Prod.casesOn&lt;/g1&gt; instead
of &lt;g2&gt;match&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153828Z" creationid="tlqk3" creationdate="20220526T153828Z">
        <seg>여기에 &lt;g2&gt;match&lt;/g2&gt; 대신 재귀자 &lt;g1&gt;Prod.casesOn&lt;/g1&gt;을 사용하는 또다른 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is another example, where we use the decidability of equality on
the natural numbers to split on the cases &lt;g1&gt;m = n&lt;/g1&gt; and &lt;g2&gt;m ≠ n&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T171354Z" creationid="tlqk3" creationdate="20220527T171354Z">
        <seg>여기 또 다른 예제가 있습니다. 우리는 &lt;g1&gt;m = n&lt;/g1&gt;과 &lt;g2&gt;m ≠ n&lt;/g2&gt;으로 나누도록  자연수에 대한 동등성의 결정가능성을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is another example:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T072437Z" creationid="tlqk35" creationdate="20220522T072437Z">
        <seg>여기 또 다른 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is another example: given any type &lt;g1&gt;α&lt;/g1&gt;, the type &lt;g2&gt;List α&lt;/g2&gt;
denotes the type of lists of elements of type &lt;g3&gt;α&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141520Z" creationid="tlqk35" creationdate="20220321T141520Z">
        <seg>또 다른 예제가 있습니다. &lt;g1&gt;α&lt;/g1&gt;라 하는 임의의 타입에 대해 &lt;g2&gt;List α&lt;/g2&gt;의 유형은 &lt;g3&gt;α&lt;/g3&gt; 유형을 원소로 하는 리스트 유형을 가리킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is another useful trick.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165335Z" creationid="tlqk35" creationdate="20220321T170408Z">
        <seg>여기 또 유용한 기법이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is another: it adds elements of the first list to elements of the second list, until one of the two lists runs out.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165331Z" creationid="tlqk3" creationdate="20220603T165331Z">
        <seg>여기 또 다른 것이 있습니다. 이것은 둘 중의 한 리스트의 원소가 소진될 때까지 첫 리스트의 원소를 두 번째 리스트의 원소와 더합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is essentially the definition of division on the natural numbers that is found in the standard library.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T170545Z" creationid="tlqk3" creationdate="20220603T170545Z">
        <seg>여기 있는 것은 본질적으로 표준 라이브러리에서 찾을 수 있는 자연수에 대한 나눗셈 정의입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is the example from the link above using Lean 4 implicit lambdas.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135457Z" creationid="tlqk3" creationdate="20220526T135457Z">
        <seg>링크 위로부터 린 4의 암시적인 람다를 사용하는 에제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is the same definition using a &lt;g1&gt;let rec&lt;/g1&gt; instead of a &lt;g2&gt;where&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T163823Z" creationid="tlqk3" creationdate="20220603T163817Z">
        <seg>&lt;g2&gt;where&lt;/g2&gt; 대신 &lt;g1&gt;let rec&lt;/g1&gt;을 사용한 같은 정의가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here the &lt;g1&gt;rewrite&lt;/g1&gt; tactic, abbreviated &lt;g2&gt;rw&lt;/g2&gt;, uses &lt;g3&gt;h&lt;/g3&gt; to replace
&lt;g4&gt;x&lt;/g4&gt; by &lt;g5&gt;3&lt;/g5&gt; again.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092311Z" creationid="tlqk35" creationdate="20220522T070016Z">
        <seg>여기 &lt;g1&gt;rewrite&lt;/g1&gt; 전략은 &lt;g2&gt;rw&lt;/g2&gt;로 축약되었고, &lt;g3&gt;h&lt;/g3&gt;로 &lt;g4&gt;x&lt;/g4&gt;가 다시 &lt;g5&gt;3&lt;/g5&gt;으로 바뀌게 했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here the left arrow before &lt;g1&gt;Nat.add_assoc&lt;/g1&gt; tells rewrite to use the
identity in the opposite direction.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T065918Z" creationid="tlqk35" creationdate="20220321T180724Z">
        <seg>&lt;g1&gt;Nat.add_assoc&lt;/g1&gt; 앞 왼쪽 화살표는 항등식을 반대 방향으로 사용하라고 재작성기에게 알립니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here the recursion is on
&lt;g1&gt;x&lt;/g1&gt;, and &lt;g2&gt;div.F x f : Nat → Nat&lt;/g2&gt; returns the "divide by &lt;g3&gt;y&lt;/g3&gt;"
function for that fixed &lt;g4&gt;x&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171241Z" creationid="tlqk3" creationdate="20220603T171241Z">
        <seg>여기서 재귀는 &lt;g1&gt;x&lt;/g1&gt;에 있습니다. 그리고 &lt;g2&gt;div.F x f : Nat → Nat&lt;/g2&gt;는 고정된 &lt;g4&gt;x&lt;/g4&gt;에 대해 "&lt;g3&gt;y&lt;/g3&gt;로 나눔" 함수를 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here we use it not only to define a function, but also to carry out a
proof by cases:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161634Z" creationid="tlqk3" creationdate="20220529T161634Z">
        <seg>여기서 우리는 이것을 함수를 정의하는 것과 경우에 따른 증명을 수행하는데에도 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here,
&lt;g3&gt;generalize&lt;/g3&gt; replaces a goal that could be proved using
&lt;g4&gt;rfl&lt;/g4&gt; with one that is not provable:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091858Z" creationid="tlqk35" creationdate="20220522T065254Z">
        <seg>여기서 &lt;g3&gt;generalize&lt;/g3&gt;는 &lt;g4&gt;rfl&lt;/g4&gt;을 사용해 증명할 수 있는 목표를 
증명할 수 없는 것으로 바꿉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, &lt;g1&gt;apply Or.inl; assumption&lt;/g1&gt; is functionally equivalent to a
single tactic which first applies &lt;g2&gt;apply Or.inl&lt;/g2&gt; and then applies
&lt;g3&gt;assumption&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111118Z" creationid="tlqk35" creationdate="20220524T145831Z">
        <seg>여기 &lt;g1&gt;apply Or.inl; assumption&lt;/g1&gt;는 &lt;g2&gt;apply Or.inl&lt;/g2&gt;을 
적용한 뒤 &lt;g3&gt;assumption&lt;/g3&gt;을 적용한 한 개의 전략과 기능적으로 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, &lt;g1&gt;h hq&lt;/g1&gt; establishes the equation &lt;g2&gt;x = y&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113911Z" creationid="tlqk35" creationdate="20220524T154343Z">
        <seg>여기서 &lt;g1&gt;h hq&lt;/g1&gt;는 방정식 &lt;g2&gt;x = y&lt;/g2&gt;을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, &lt;g1&gt;twice_double x&lt;/g1&gt; is definitionally equal to the term &lt;g2&gt;(x + x) * (x + x)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144822Z" creationid="tlqk35" creationdate="20220321T144822Z">
        <seg>여기서&lt;g1&gt;twice_double x&lt;/g1&gt;도 항  &lt;g2&gt;(x + x) * (x + x)&lt;/g2&gt;과 정의상으로 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, for example, is a proof of &lt;g1&gt;¬p → q → (q → p) → r&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164515Z" creationid="tlqk35" creationdate="20220321T164515Z">
        <seg>여기 &lt;g1&gt;¬p → q → (q → p) → r&lt;/g1&gt;의 증명에 대한 예제가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, for example, is the definition of a
semigroup:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T145853Z" creationid="tlqk3" creationdate="20220527T145800Z">
        <seg>예를 들어 여기 반군(半群, semigroup)의 정의가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the &lt;g1&gt;axiom&lt;/g1&gt; declaration postulates the existence of an
element of the given type and may compromise logical consistency.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121143Z" creationid="tlqk35" creationdate="20220321T161204Z">
        <seg>여기서 &lt;g1&gt;axiom&lt;/g1&gt; 선언은 주어진 유형의 원소의 존재성을 가정하고 논리적 일관성과 타협합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the &lt;g1&gt;constructor&lt;/g1&gt; tactic leaves the first component of the
existential assertion, the value of &lt;g2&gt;x&lt;/g2&gt;, implicit.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T094221Z" creationid="tlqk35" creationdate="20220522T072049Z">
        <seg>여기서 &lt;g1&gt;constructor&lt;/g1&gt; 전략은 존재 주장의 첫 구성요소를 암시적인 &lt;g2&gt;x&lt;/g2&gt;의 값으로 남깁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here, the value of the &lt;g1&gt;fib&lt;/g1&gt; function at &lt;g2&gt;n + 2&lt;/g2&gt; (which is
definitionally equal to &lt;g3&gt;succ (succ n)&lt;/g3&gt;) is defined in terms of the
values at &lt;g4&gt;n + 1&lt;/g4&gt; (which is definitionally equivalent to &lt;g5&gt;succ n&lt;/g5&gt;)
and the value at &lt;g6&gt;n&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T163613Z" creationid="tlqk3" creationdate="20220603T163613Z">
        <seg>여기서 (정의로 인해 &lt;g3&gt;succ (succ n)&lt;/g3&gt;과 같은)&lt;g2&gt;n + 2&lt;/g2&gt;에서 &lt;g1&gt;fib&lt;/g1&gt;의 함수값은 (&lt;g5&gt;succ n&lt;/g5&gt;와 정의로 인해 동등한)&lt;g4&gt;n + 1&lt;/g4&gt; 에서의 값과 &lt;g6&gt;n&lt;/g6&gt;에서 값에 대하여 정의되었다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Historical and Philosophical Context</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T164213Z" creationid="tlqk3" creationdate="20220605T164213Z">
        <seg>역사적이고 철학적인 맥락</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How can we prove the general theorem that &lt;g1&gt;next (previous d) = d&lt;/g1&gt;
for any Weekday &lt;g2&gt;d&lt;/g2&gt;?</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151321Z" creationid="tlqk3" creationdate="20220526T151321Z">
        <seg>임의의 Weekday &lt;g2&gt;d&lt;/g2&gt;에 대해 &lt;g1&gt;next (previous d) = d&lt;/g1&gt;이라는 일반적인 일반적인 정리를 어떻게 증명할 수 있을까요?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>How to deploy</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T172355Z" creationid="tlqk35" creationdate="20220321T172355Z">
        <seg>작동시키는 법</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, computation is still possible under an evaluation
scheme that erases propositional content, ignores intermediate typing
constraints, and reduces terms until they reach a normal form.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172311Z" creationid="tlqk3" creationdate="20220605T172311Z">
        <seg>그러나 명제적 내용은 삭제하고, 중간의 작성된 제약을 무시하고, 이들이 평범한 형태에 도달할 때까지 항을 축소하는 평가 과정 하에서 계산은 여전히 가능합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, functions such as &lt;g1&gt;compose&lt;/g1&gt; are still quite verbose to define.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134237Z" creationid="tlqk3" creationdate="20220526T134237Z">
        <seg>그러나 &lt;g1&gt;compose&lt;/g1&gt;같은 함수들은 여전히 정의하기에 꽤 장황합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, in &lt;g3&gt;Section Setting Options&lt;/g3&gt;, we will
discuss Lean's mechanisms for setting options, which does &lt;g4&gt;not&lt;/g4&gt; follow
this pattern: options can &lt;g5&gt;only&lt;/g5&gt; be set locally, which is to say,
their scope is always restricted to the current section or current
file.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T184117Z" creationid="tlqk3" creationdate="20220525T184117Z">
        <seg>하지만 &lt;g3&gt;Section Setting Options&lt;/g3&gt;에서 우리는 린의 이 패턴을 따르지 &lt;g4&gt;않는&lt;/g4&gt; 옵션 설정에 대한 메커니즘에 대해서 얘기할 것입니다. 옵션은 지역적으로&lt;g5&gt;만&lt;/g5&gt; 설정될 수 있습니다. 그 말은 즉, 그들의 범위는 항상 현재 섹션이나 현재 파일로 제한됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, it is natural to assume that the type of &lt;g3&gt;y&lt;/g3&gt; and &lt;g4&gt;x&lt;/g4&gt; should be the same in
this kind of situation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164934Z" creationid="tlqk3" creationdate="20220604T164934Z">
        <seg>그러나 이 같은 상황에서 &lt;g3&gt;y&lt;/g3&gt;형과 &lt;g4&gt;x&lt;/g4&gt;형은 동일하다고 가정하는 것이 자연스럽습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, such commands often support the &lt;g2&gt;local&lt;/g2&gt; modifier,
which indicates that they only have effect until
the current &lt;g3&gt;section&lt;/g3&gt; or &lt;g4&gt;namespace&lt;/g4&gt; is closed, or until the end
of the current file.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T182533Z" creationid="tlqk3" creationdate="20220525T182533Z">
        <seg>하지만 이런 명령은 종종 이들이 현재 &lt;g3&gt;section&lt;/g3&gt;이나 &lt;g4&gt;namespace&lt;/g4&gt;이 닫힐 때까지 혹은 현재 파일의 끝까지만 유효하다는 것을 가리키는 &lt;g2&gt;local&lt;/g2&gt; 수정자를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, this is often not the case with indexed
inductive families such as &lt;g4&gt;vector α n&lt;/g4&gt;, since case splits impose
constraints on the values of the indices.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175450Z" creationid="tlqk3" creationdate="20220603T175450Z">
        <seg>하지만 이것은 &lt;g4&gt;vector α n&lt;/g4&gt; 같이 인덱스된 귀납형 군의 경우에는 적용이 안됩니다. 왜냐하면 경우를 나누기는 인덱스의 값에 제약을 부과하기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, you can use the combinator &lt;g1&gt;unhygienic&lt;/g1&gt; to disable this restriction.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090552Z" creationid="tlqk35" creationdate="20220522T063253Z">
        <seg>하지만 여러분은 &lt;g1&gt;unhygienic&lt;/g1&gt; 조합자를 사용해서 이 제한을 풀 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identifiers are generally
&lt;g1&gt;camelCase&lt;/g1&gt;, and types are &lt;g2&gt;CamelCase&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131922Z" creationid="tlqk3" creationdate="20220526T131922Z">
        <seg>식별자들은 보통 &lt;g1&gt;camelCase&lt;/g1&gt;이고 유형은 &lt;g2&gt;CamelCase&lt;/g2&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Identifiers in Lean can include any alphanumeric characters, including
Greek characters (other than ∀ , Σ , and λ , which, as we have seen,
have a special meaning in the dependent type theory).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T191054Z" creationid="tlqk3" creationdate="20220525T191054Z">
        <seg>린의 식별자들은 임의의 그리스 문자를 포함해 (우리가 본 ∀ , Σ , λ 외에도  종속 유형론에서 특별한 의미를 갖습니다.) 알파벳과 수치 문자를 포함할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If
Lean tries to do so and fails, it returns with an error message "don't
know how to synthesize placeholder," followed by the type of
the term it is expecting, and all the objects and hypothesis available
in the context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165559Z" creationid="tlqk35" creationdate="20220321T170450Z">
        <seg>만약 린이 그렇게 하려고 했는데 실패한다면 다음에 오는 항의 유형을 기대했다면서 "어떻게 자리 차지자를 합성해야할 지 모르겠다"는 오류 메시지를 반환합니다. 그리고 모든 대상와 가정들은 맥락에서 이용가능합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If
the unspecified fields cannot be inferred, Lean flags an error
indicating the corresponding placeholder could not be synthesized.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T182458Z" creationid="tlqk35" creationdate="20220528T182458Z">
        <seg>만약 명시되지 않은 필드가 추론될 수 없다면 린은 대응하는 자리차지자를 합성할 수 없다고(the corresponding placeholder could not be synthesized) 나타내는 오류를 띄울 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g10&gt;f : α → β&lt;/g10&gt; is any function that
respects the equivalence relation in the sense that for every
&lt;g11&gt;x y : α&lt;/g11&gt;, &lt;g12&gt;r x y&lt;/g12&gt; implies &lt;g13&gt;f x = f y&lt;/g13&gt;, then &lt;g14&gt;f&lt;/g14&gt; "lifts" to a function
&lt;g15&gt;f' : α / r → β&lt;/g15&gt; defined on each equivalence class &lt;g16&gt;⟦x⟧&lt;/g16&gt; by
&lt;g17&gt;f' ⟦x⟧ = f x&lt;/g17&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T182402Z" creationid="tlqk3" creationdate="20220605T181248Z">
        <seg>&lt;g10&gt;f : α → β&lt;/g10&gt;가 모든 &lt;g11&gt;x y : α&lt;/g11&gt;에 대해 &lt;g12&gt;r x y&lt;/g12&gt;가 &lt;g13&gt;f x = f y&lt;/g13&gt;를 함의하면 &lt;g14&gt;f&lt;/g14&gt;이다를 의미하는 등가 관계에 대한 함수인 경우, &lt;g17&gt;f' ⟦x⟧ = f x&lt;/g17&gt;에 의해 각 등가 클래스 &lt;g16&gt;⟦x⟧&lt;/g16&gt;에 정의된 함수 &lt;g15&gt;f': α / r → β&lt;/g15&gt;로 "상승"합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g11&gt;q&lt;/g11&gt; does not mention
&lt;g12&gt;w&lt;/g12&gt;, then showing that &lt;g13&gt;q&lt;/g13&gt; follows from &lt;g14&gt;p w&lt;/g14&gt; is tantamount to
showing the &lt;g15&gt;q&lt;/g15&gt; follows from the existence of any such &lt;g16&gt;x&lt;/g16&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T091233Z" creationid="tlqk35" creationdate="20220321T181413Z">
        <seg>&lt;g11&gt;q&lt;/g11&gt;가  &lt;g12&gt;w&lt;/g12&gt;를 언급하지 않았다면 &lt;g13&gt;q&lt;/g13&gt;가 &lt;g14&gt;p w&lt;/g14&gt;로부터 도출됨을 보이는 것은 임의의 그런 &lt;g16&gt;x&lt;/g16&gt;의 존재로부터  &lt;g15&gt;q&lt;/g15&gt;를 도출하는 것과 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g1&gt;foo&lt;/g1&gt; is such a function, the
notation &lt;g2&gt;@foo&lt;/g2&gt; denotes the same function with all the arguments
made explicit.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153735Z" creationid="tlqk35" creationdate="20220321T153735Z">
        <seg>만약 &lt;g1&gt;foo&lt;/g1&gt;가 그런 함수라면 &lt;g2&gt;@foo&lt;/g2&gt; 표기는 모든 인수가 명시적으로 된 같은 함수를 지칭합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g1&gt;j&lt;/g1&gt; is not &lt;g2&gt;0&lt;/g2&gt;, then &lt;g3&gt;(x : α) → β&lt;/g3&gt; is
an element of &lt;g4&gt;Sort (max i j)&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070223Z" creationid="tlqk35" creationdate="20220321T174654Z">
        <seg>만약 &lt;g1&gt;j&lt;/g1&gt;가 &lt;g2&gt;0&lt;/g2&gt;이 아니라면 &lt;g3&gt;(x : α) → β&lt;/g3&gt;는 &lt;g4&gt;Sort (max i j)&lt;/g4&gt;의 원소입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g1&gt;p&lt;/g1&gt; and &lt;g2&gt;q&lt;/g2&gt; have been declared as variables, Lean will
generalize them for us automatically:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121848Z" creationid="tlqk35" creationdate="20220321T161522Z">
        <seg>&lt;g1&gt;p&lt;/g1&gt;와 &lt;g2&gt;q&lt;/g2&gt;가 변수로 선언되었다면 린은 이를 자동적으로 일반화시킬 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g1&gt;p&lt;/g1&gt; is any expression,
&lt;g2&gt;∀ x : α, p&lt;/g2&gt; is nothing more than alternative notation for
&lt;g3&gt;(x : α) → p&lt;/g3&gt;, with the idea that the former is more natural than the latter
in cases where &lt;g4&gt;p&lt;/g4&gt; is a proposition.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064040Z" creationid="tlqk35" creationdate="20220321T173317Z">
        <seg>만약 &lt;g1&gt;p&lt;/g1&gt;가 임의의 표현식이면, &lt;g2&gt;∀ x : α, p&lt;/g2&gt;은 그저 &lt;g3&gt;(x : α) → p&lt;/g3&gt;를 나타내는 또 다른 표현일 뿐입니다. &lt;g4&gt;p&lt;/g4&gt;가 명제일 때 전자의 표현이 후자의 경우보다 자연스럽습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g1&gt;p&lt;/g1&gt; is true, then every element of &lt;g2&gt;Prop&lt;/g2&gt; is in both &lt;g3&gt;U&lt;/g3&gt; and &lt;g4&gt;V&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185237Z" creationid="tlqk3" creationdate="20220610T185237Z">
        <seg>&lt;g1&gt;p&lt;/g1&gt;가 참이면 &lt;g2&gt;Prop&lt;/g2&gt;의 모든 원소는 &lt;g3&gt;U&lt;/g3&gt;와 &lt;g4&gt;V&lt;/g4&gt; 둘 다에 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g2&gt;RH&lt;/g2&gt; represents the Riemann
hypothesis, a classical mathematician is willing to assert
&lt;g3&gt;RH ∨ ¬RH&lt;/g3&gt;, even though we cannot yet assert either disjunct.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T162503Z" creationid="tlqk35" creationdate="20220321T165749Z">
        <seg>만약 &lt;g2&gt;RH&lt;/g2&gt;가 리만 가설을 나타낸다면 우리가 아직 어느 논리합도 주장하지 않았더라도 고전 수학자는 &lt;g3&gt;RH ∨ ¬RH&lt;/g3&gt;라고 기꺼이 주장할 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If &lt;g5&gt;p&lt;/g5&gt; is false, then &lt;g6&gt;U&lt;/g6&gt; is the singleton &lt;g7&gt;true&lt;/g7&gt;, and &lt;g8&gt;V&lt;/g8&gt; is the singleton &lt;g9&gt;false&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185455Z" creationid="tlqk3" creationdate="20220610T185455Z">
        <seg>&lt;g5&gt;p&lt;/g5&gt;가 거짓이면 &lt;g6&gt;U&lt;/g6&gt;는 &lt;g7&gt;true&lt;/g7&gt;를 단일 개체로 갖고 &lt;g8&gt;V&lt;/g8&gt;는 &lt;g9&gt;false&lt;/g9&gt;를 단일 개체로 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If a theorem or
definition makes use of &lt;g3&gt;Quot.sound&lt;/g3&gt;, it will show up in the
&lt;g4&gt;#print axioms&lt;/g4&gt; command.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183656Z" creationid="tlqk3" creationdate="20220605T183656Z">
        <seg>정리 또는 정의가 &lt;g3&gt;Quot.sound&lt;/g3&gt;를 사용하는 경우 &lt;g4&gt;#print axioms&lt;/g4&gt; 명령 위에 표시됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If doing so reduces the goal to an identity &lt;g2&gt;t = t&lt;/g2&gt;, the
tactic applies reflexivity to prove it.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064614Z" creationid="tlqk35" creationdate="20220321T180439Z">
        <seg>그렇게 하면 항등식 &lt;g2&gt;t = t&lt;/g2&gt;로 목표를 축약합니다. 전략은 그것을 증명하는데 대칭성을 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If it is a constant
or an axiom, Lean indicates that fact, and shows the type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125515Z" creationid="tlqk3" creationdate="20220526T125515Z">
        <seg>만약 그것이 상수나 공리라면 린은 그 사실을 가리키고 유형을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If more than one record object is provided, then they are
visited in order until Lean finds one that contains the unspecified
field.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181508Z" creationid="tlqk35" creationdate="20220528T181508Z">
        <seg>하나 이상의 레코드 개체가 제공되었다면 그럼 그들은 린이 명시되지 않은 필드를 포함하는 곳을 찾을 때까지 순서대로 방문될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If such a
term appears in a hypothesis and you want to generalize over that as
well, you need to &lt;g8&gt;revert&lt;/g8&gt; it explicitly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T170643Z" creationid="tlqk3" creationdate="20220527T170643Z">
        <seg>만약 그런 항이 가정에 나타나고 여러분이 그것에 대해서도 일반화하기 원한다다면 여러분은 그것을 명시적으로 &lt;g8&gt;revert&lt;/g8&gt; 할 필요가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If that is not the one
you want, you can use additional arguments to specify the appropriate
subterm.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114812Z" creationid="tlqk35" creationdate="20220524T155415Z">
        <seg>만약 이게 여러분이 원한 것이 아니라면 여러분은 추가 인수로 적절한 부분항을 지정할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If that were the extent of type class inference, it would not be all that impressive;
it would be simply a mechanism of storing a list of instances for the elaborator to find in a lookup table.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160856Z" creationid="tlqk3" creationdate="20220604T160856Z">
        <seg>그것이 유형 클래스 추론의 확장이라면 그리 인상적이지 않을 것 입니다. 이것은 협력기가 룩업 테이블에서 찾는 데 쓰는 단순히 개체의 리스트를 저장하는 메커니즘일 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the constructor name is not provided, then a constructor is named
&lt;g1&gt;mk&lt;/g1&gt; by default.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174033Z" creationid="tlqk35" creationdate="20220528T174033Z">
        <seg>만약 생성자 이름이 없다면 생성자는 기본적으로 &lt;g1&gt;mk&lt;/g1&gt;로 이름 붙습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the expression you case on does not appear in the goal, the
&lt;g1&gt;cases&lt;/g1&gt; tactic uses &lt;g2&gt;have&lt;/g2&gt; to put the type of the expression into
the context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T170754Z" creationid="tlqk3" creationdate="20220527T170754Z">
        <seg>여러분이 경우를 나누려는 표현식이 목표에 나타나지 않는다면 &lt;g1&gt;cases&lt;/g1&gt; 전략은 맥락에 표현식의 유형을 넣도록&lt;g2&gt;have&lt;/g2&gt; 를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the identifier denotes a definition or theorem, Lean
prints the type of the symbol, and its definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125436Z" creationid="tlqk3" creationdate="20220526T125436Z">
        <seg>만약 식별자가 정의나 정리를 의미한다면 린은 기호의 유형과 그것의 정의를 출력합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the inaccessible pattern can be inferred, you can also write
&lt;g3&gt;_&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T143925Z" creationid="tlqk3" creationdate="20220604T143925Z">
        <seg>만약 접근불가능한 패턴이 추론될 수 있다면 &lt;g3&gt;_&lt;/g3&gt;와 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the proof is incomplete, the token &lt;g3&gt;by&lt;/g3&gt; is
decorated with a red squiggly line, and the error message contains the
remaining goals.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084705Z" creationid="tlqk35" creationdate="20220522T060519Z">
        <seg>만일 증명이 불완전하다면, 토큰 &lt;g3&gt;by&lt;/g3&gt;은 빨간색 구불구불한 선으로 장식됩니다.
그리고 오류 메시지가 남은 목표를 포함됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the value of a field is not specified, Lean tries to infer it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T182330Z" creationid="tlqk35" creationdate="20220528T182330Z">
        <seg>만약 필드의 값이 명시되지 않았다면, 린은 그것을 추론하려고 할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If there are
multiple notations accepting the same longest parse, the choice will
be delayed until elaboration, which will fail unless exactly one
overload is type correct.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T124232Z" creationid="tlqk3" creationdate="20220526T124232Z">
        <seg>동일한 가장 긴 구문분석을 받아들이는 다수의 기호가 있다면 협력할 때까지 선택은 미뤄집니다. 그리고 이것은 정확히 한 오버로드가 유형이 옳바르지 않는 한 실패할 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If this command is used outside a namespace, the aliases
are exported to the top level.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181612Z" creationid="tlqk3" creationdate="20220525T181612Z">
        <seg>이 명령이 이름공간 밖에서 사용된다면 별명은 최상위 단계로 내보내지게 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If two notations overlap, we again apply the longest parse rule:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123934Z" creationid="tlqk3" creationdate="20220526T123934Z">
        <seg>만약 두 기호가 겹치면, 우리는 다시 가장 긴 구문분석 규칙을 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If we check the type of the recursor,</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155246Z" creationid="tlqk3" creationdate="20220527T155246Z">
        <seg>우리가 재귀자의 유형을 확인해보면</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you
don't want that to happen, you have to write &lt;g10&gt;@t&lt;/g10&gt; instead.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T184653Z" creationid="tlqk3" creationdate="20220525T184653Z">
        <seg>여러분이 이것이 일어나기 원하지 않는다면 대신 &lt;g10&gt;@t&lt;/g10&gt;를 써줘야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are ever in a situation where you need to supply an expression
that Lean can infer by type class inference, you can ask Lean to carry
out the inference using &lt;g1&gt;inferInstance&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T175851Z" creationid="tlqk3" creationdate="20220604T175851Z">
        <seg>린이 유형 클래스 추론으로 유추할 수 있는 표현식을 여러분이 제공해야 하는 상황에 있어 봤다면 여러분은 &lt;g1&gt;inferInstance&lt;/g1&gt;를 사용해 린에게 추론을 이끌어내도록 요청할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are not used to thinking constructively, it may take some time
for you to get a sense of where classical reasoning is used.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164140Z" creationid="tlqk35" creationdate="20220321T170002Z">
        <seg>여러분이 구성주의적 사고방식에 익숙하지 않다면 고전적 추론이 사용되어야 하는 곳이 어디인지를 아는데 시간이 걸릴지도 모릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are reading the book online, you will see a button that reads "try it!" Pressing the button opens up a tab with a
Lean editor, and copies the example with enough surrounding context to make the code compile correctly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134929Z" creationid="tlqk35" creationdate="20220321T134929Z">
        <seg>여러분이 온라인으로 책을 읽는다면 "실행해보기"라 적힌 버튼을 볼 것입니다. 버튼을 누르면 린 편집기 탭이 열리면서 코드가 올바르게 컴파일되도록 주변 맥락을 포함해 예제를 복사합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are using VS Code, you can read the results by hovering over
the relevant theorem or definition, or opening the messages window
with &lt;g1&gt;Ctrl-Shift-Enter&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180458Z" creationid="tlqk3" creationdate="20220604T180458Z">
        <seg>VS Code를 사용하는 경우 관련 정리 또는 정의 위로 마우스를 이동하거나 &lt;g1&gt;Ctrl-Shift-Enter&lt;/g1&gt;로 메시지 창을 열어 결과를 읽을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you do name a section, however, you
have to close it using the same name.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150146Z" creationid="tlqk35" creationdate="20220321T150146Z">
        <seg>그러나 여러분이 섹션에 이름을 붙이고자 한다면 같은 이름을 사용해 이를 닫아야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you do not name the constructor, Lean uses &lt;g1&gt;mk&lt;/g1&gt; as a default.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T162227Z" creationid="tlqk3" creationdate="20220526T162227Z">
        <seg>여러분이 생성자의 이름을 지어주지 않는다면, 린은 &lt;g1&gt;mk&lt;/g1&gt;를 기본 이름으로 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you don't remember the order of the parameters
but know their names, you can send the arguments in any order.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140808Z" creationid="tlqk3" creationdate="20220526T140808Z">
        <seg>여러분이 매개변수의 순서를 기억하지 못해도 그들의 이름을 알면 여러분은 임의의 순서로든 인자를 보낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you have installed Lean on your own computer,
you can find the library in the &lt;g1&gt;lean&lt;/g1&gt; folder, and explore it with
your file manager.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131447Z" creationid="tlqk3" creationdate="20220526T131447Z">
        <seg>여러분이 여러분 컴퓨터에 린을 설치했다면 여러분은 &lt;g1&gt;lean&lt;/g1&gt; 폴더에서 라이브러리를 찾을 수 있습니다. 그리고 파일관리자로 그것을 탐색할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you leave out any of the cases in
the following definition, the error message will let you know what has
not been covered.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170200Z" creationid="tlqk3" creationdate="20220529T170200Z">
        <seg>여러분이 다음 정의에서 어떤 경우라도 빠트리면, 오류 메시지가 어떤 것이 다뤄지지 못했는지 알릴 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you think of &lt;g4&gt;r y x&lt;/g4&gt; as denoting a kind of order relation
&lt;g5&gt;y ≺ x&lt;/g5&gt;, then &lt;g6&gt;Acc r x&lt;/g6&gt; says that &lt;g7&gt;x&lt;/g7&gt; is accessible from below,
in the sense that all its predecessors are accessible.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T174213Z" creationid="tlqk3" creationdate="20220529T174213Z">
        <seg>여러분이 &lt;g4&gt;r y x&lt;/g4&gt;을 순서 관계 &lt;g5&gt;y ≺ x&lt;/g5&gt;의 일종으로 나타났다고 생각한다면 &lt;g6&gt;Acc r x&lt;/g6&gt;는 &lt;g7&gt;x&lt;/g7&gt;가 아래로부터 접근가능하다고 말합니다. 이 관점으로부터 그것의 모든 전임자들은 접근가능합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want
to specify a witness to the existential quantifier explicitly, you can
use the &lt;g6&gt;exists&lt;/g6&gt; tactic instead:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T094449Z" creationid="tlqk35" creationdate="20220522T072410Z">
        <seg>여러분이 명시적으로 존재 한정기호에 대한 발견을 나타내길 원한다면,
&lt;g6&gt;exists&lt;/g6&gt; 전략을 대신 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you want to use additional files, however, they need to be imported
manually, via an &lt;g1&gt;import&lt;/g1&gt; statement at the beginning of a file.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174028Z" creationid="tlqk35" creationdate="20220524T174028Z">
        <seg>그러나 여러분이 추가 파일을 사용하길 원한다면 파일의 시작에서 &lt;g1&gt;import&lt;/g1&gt; 구문을 통해 수동으로 불러와야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implement "constant fusion," a procedure that simplifies subterms like
&lt;g1&gt;5 + 7&lt;/g1&gt; to &lt;g2&gt;12&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180528Z" creationid="tlqk3" creationdate="20220603T180528Z">
        <seg>"상수 융합,"의 구현은 &lt;g1&gt;5 + 7&lt;/g1&gt; to &lt;g2&gt;12&lt;/g2&gt;같은 부분항을 단순화하는 절차이다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implicit Arguments</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152413Z" creationid="tlqk35" creationdate="20220321T152413Z">
        <seg>암시적 인자(Implicit Arguments)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implicit Lambdas</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134957Z" creationid="tlqk3" creationdate="20220526T134957Z">
        <seg>암시적인 람다</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Importing Files</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173340Z" creationid="tlqk35" creationdate="20220524T173340Z">
        <seg>파일 불러오기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In
Lean 4, we generalize this notation using &lt;g3&gt;·&lt;/g3&gt; As a placeholder.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140130Z" creationid="tlqk3" creationdate="20220526T140130Z">
        <seg>린 4에서 우리는 &lt;g3&gt;·&lt;/g3&gt;를 자리차지자로 사용하여  이 표기를 일반화합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In
either case, the defining equations hold definitionally.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162526Z" creationid="tlqk3" creationdate="20220529T162516Z">
        <seg>각 경우에서 정의한 방정식들은 정의로 인해 성립합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In
general, instances may depend on other instances in complicated ways.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T154832Z" creationid="tlqk3" creationdate="20220604T154832Z">
        <seg>일반적으로 개체는 다른 개체에 복잡한 방식으로 종속될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In
principle, two terms that reduce to the same value are called
&lt;g2&gt;definitionally equal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143728Z" creationid="tlqk35" creationdate="20220321T143723Z">
        <seg>원리적으로 같은 값으로 축약되는 두 항은 &lt;g2&gt;정의상으로 동등(definitionally equal)&lt;/g2&gt;하다고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In
the case of multiplication the latter is expressed as follows:
&lt;g2&gt;x * (y * z) = y * (x * z)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171754Z" creationid="tlqk35" creationdate="20220524T162041Z">
        <seg>곱셈의 경우 후자는 다음과 같이 표현됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In
this case, however, &lt;g5&gt;apply&lt;/g5&gt; would work just as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084436Z" creationid="tlqk35" creationdate="20220522T055358Z">
        <seg>하지만 이 경우 &lt;g5&gt;apply&lt;/g5&gt;도 잘 작동할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;g1&gt;Chapter Inductive Types&lt;/g1&gt;,
we will explain &lt;g2&gt;how&lt;/g2&gt; equality is defined from the primitives of Lean's logical framework.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T071505Z" creationid="tlqk35" creationdate="20220321T175415Z">
        <seg>&lt;g1&gt;귀납형 장&lt;/g1&gt;에서 우리는 &lt;g2&gt;어떻게&lt;/g2&gt; 린의 기초적인 논리 프레임워크로부터 동등이 정의되는지 설명할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;g1&gt;Section Implicit Arguments&lt;/g1&gt;,
we saw that if Lean displays the type
of a term &lt;g2&gt;t&lt;/g2&gt; as &lt;g3&gt;{x : α} → β x&lt;/g3&gt;, then the curly brackets
indicate that &lt;g4&gt;x&lt;/g4&gt; has been marked as an &lt;g5&gt;implicit argument&lt;/g5&gt; to
&lt;g6&gt;t&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T184454Z" creationid="tlqk3" creationdate="20220525T184454Z">
        <seg>&lt;g1&gt;Section Implicit Arguments&lt;/g1&gt;에서 우리는 린은 항 &lt;g2&gt;t&lt;/g2&gt;의 유형을 &lt;g3&gt;{x : α} → β x&lt;/g3&gt;으로 표시하고 나서 중괄호는 &lt;g4&gt;x&lt;/g4&gt;가  &lt;g5&gt;암시적인 인수&lt;/g5&gt;로써 &lt;g6&gt;t&lt;/g6&gt;로 표시되었음을 나타냄을 봤습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;g1&gt;Section Notation&lt;/g1&gt; below, we will discuss Lean's
mechanisms for defining notation, and see that they also support the
&lt;g2&gt;local&lt;/g2&gt; modifier.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183843Z" creationid="tlqk3" creationdate="20220525T183843Z">
        <seg>아래 &lt;g1&gt;Section Notation&lt;/g1&gt;에서 우리는 린의 기호를 정의하는 메커니즘에 대해 얘기하고 또 이들이 &lt;g2&gt;local&lt;/g2&gt; 수정자를 지원함을 볼 예정입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;g1&gt;Section Using the Simplifier&lt;/g1&gt;,
we saw that theorems can be annotated with the &lt;g2&gt;[simp]&lt;/g2&gt; attribute,
which makes them available for use by the simplifier.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T182721Z" creationid="tlqk3" creationdate="20220525T182721Z">
        <seg>&lt;g1&gt;Section Using the Simplifier&lt;/g1&gt;에서 우리는 정리들이 단순화기에 의한 사용이 가능하도록 만드는 &lt;g2&gt;[simp]&lt;/g2&gt; 특성이 붙는 것을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;g1&gt;t₁ &lt;;&gt; t₂&lt;/g1&gt;, the &lt;g2&gt;&lt;;&gt;&lt;/g2&gt; operator provides a &lt;g3&gt;parallel&lt;/g3&gt; version of the sequencing operation:
&lt;g4&gt;t₁&lt;/g4&gt; is applied to the current goal, and then &lt;g5&gt;t₂&lt;/g5&gt; is applied to &lt;g6&gt;all&lt;/g6&gt; the resulting subgoals:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111324Z" creationid="tlqk35" creationdate="20220524T150229Z">
        <seg>&lt;g1&gt;t₁&lt;;&gt;  t₂&lt;/g1&gt;에서 &lt;g2&gt;&lt;;&gt;&lt;/g2&gt; 연산자는 순차 연산의 &lt;g3&gt;병렬적인&lt;/g3&gt; 버전을 제공합니다.
&lt;g4&gt;t₁&lt;/g4&gt;가 현재 목표에 적용된 후 생기는 하위목표 &lt;g6&gt;모두&lt;/g6&gt;에 &lt;g5&gt;t₂&lt;/g5&gt;를 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;g3&gt;Chapter Axioms and Computation&lt;/g3&gt;,
we will see that using the law of the
excluded middle to define functions can prevent them from being used
computationally.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174024Z" creationid="tlqk3" creationdate="20220604T174024Z">
        <seg>&lt;g3&gt;공리와 계산 장&lt;/g3&gt;에서 우리는 배중률을 사용해 함수를 정의하는 것은 그들이 계산적으로 사용되는 것을 막을 수 있음을 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In &lt;g8&gt;Section Dependent Pattern Matching&lt;/g8&gt;,
we will see that it is sometimes necessary to include explicit terms in patterns that
are needed to make an expression type check, though they do not play a
role in pattern matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T171529Z" creationid="tlqk3" creationdate="20220529T171529Z">
        <seg>이들이 패턴 매칭에 핵심 역할을 하지 않더라도 &lt;g8&gt;의존적인 패턴 매칭 섹션&lt;/g8&gt;에서 우리는 이것이 때때로 표현식 유형 확인을 만드는데 필요한 패턴에 대해 명시적으로 포함될 필요가 있음을 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Emacs, you can see the goal at the end of any
line by pressing &lt;g2&gt;C-c C-g&lt;/g2&gt;, or see the remaining goal in an
incomplete proof by putting the cursor after the first character of
the last tactic.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084644Z" creationid="tlqk35" creationdate="20220522T055823Z">
        <seg>Emacs에서 여러분은 임의의 줄의 끝에서 &lt;g2&gt;C-c C-g&lt;/g2&gt;을 눌러 목표를 볼 수 있습니다. 
아니면 마지막 전략의 첫 문자 뒤에 커서를 놓으면 불완전한 증명에 대한 남은 목표를 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Emacs, you can use &lt;g2&gt;C-c C-x&lt;/g2&gt; to run an
independent Lean process on your file, and the output buffer will show
a trace every time the type class resolution procedure is subsequently
triggered.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180620Z" creationid="tlqk3" creationdate="20220604T180620Z">
        <seg>Emacs에서 &lt;g2&gt;C-c C-x&lt;/g2&gt;를 사용하여 파일에서 독립적인 린 프로세스를 실행할 수 있으며 출력 버퍼는 유형 클래스 해결 절차가 이후에 사용될 때마다 추적을 표시합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean 3 stdlib, we find many
&lt;g1&gt;instances&lt;/g1&gt; of the dreadful &lt;g2&gt;@&lt;/g2&gt;+&lt;g3&gt;_&lt;/g3&gt; idiom.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135058Z" creationid="tlqk3" creationdate="20220526T135058Z">
        <seg>린 3의 표준라이브러리에서 우리는 치명적인 &lt;g2&gt;@&lt;/g2&gt;+&lt;g3&gt;_&lt;/g3&gt; 구문의 수 많은 &lt;g1&gt;instances&lt;/g1&gt;를 발견했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean 3, we can create simple functions from infix operators by
using parentheses.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135959Z" creationid="tlqk3" creationdate="20220526T135959Z">
        <seg>린 3에서는 괄호를 사용해 전위 연산자로부터 간단한 함수를 만들 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean 4, the elaborator automatically introduces lambdas
for consuming implicit arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135331Z" creationid="tlqk3" creationdate="20220526T135331Z">
        <seg>린 4에서 협력기는 자동적으로 암시적인 인자를 소모하기 위해 람다를 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, a calculation proof starts with the keyword
&lt;g1&gt;calc&lt;/g1&gt;, and has the following syntax:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180258Z" creationid="tlqk35" creationdate="20220321T180258Z">
        <seg>린에서 계산 증명은 키워드 &lt;g1&gt;calc&lt;/g1&gt;로 시작합니다. 그리고 다음 문법을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, by changing
&lt;g2&gt;structure&lt;/g2&gt; to &lt;g3&gt;class&lt;/g3&gt; in the example above, the type of &lt;g4&gt;Add.add&lt;/g4&gt; becomes</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T154117Z" creationid="tlqk3" creationdate="20220604T154117Z">
        <seg>린에서 위 예제에서&lt;g2&gt;structure&lt;/g2&gt;를 &lt;g3&gt;class&lt;/g3&gt;로 바꿈으로 &lt;g4&gt;Add.add&lt;/g4&gt;형이 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, identifiers are given by hierarchical &lt;g1&gt;names&lt;/g1&gt; like
&lt;g2&gt;Foo.Bar.baz&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175657Z" creationid="tlqk35" creationdate="20220524T175609Z">
        <seg>린에서 식별자는 &lt;g2&gt;Foo.Bar.baz&lt;/g2&gt;처럼 계층적인 &lt;g1&gt;names&lt;/g1&gt;으로 제시됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, one uses an underscore, &lt;g1&gt;_&lt;/g1&gt;, to specify
that the system should fill in the information automatically.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152757Z" creationid="tlqk35" creationdate="20220321T152757Z">
        <seg>Lean에서 누군가는 시스템이 자동적으로 정보를 채워넣도록 명시하기 위해 밑줄문자(&lt;g1&gt;_&lt;/g1&gt;)를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, the
&lt;g2&gt;theorem&lt;/g2&gt; command introduces a new theorem:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T160647Z" creationid="tlqk35" creationdate="20220321T160647Z">
        <seg>린에서 &lt;g2&gt;theorem&lt;/g2&gt; 명령은 새로운 정리를 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, the
keyword &lt;g2&gt;structure&lt;/g2&gt; can be used to define such an inductive type as
well as its projections, at the same time.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152034Z" creationid="tlqk3" creationdate="20220526T161714Z">
        <seg>린에에서 키워드 &lt;g2&gt;structure&lt;/g2&gt;는 그것의 투영 뿐만 아니라 귀납형 같은 것을 동시에 정의하는데 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, the syntax for specifying such a type is as
follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T142245Z" creationid="tlqk3" creationdate="20220526T142245Z">
        <seg>린에서 그런 유형을 나타내는 문법은 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Lean, the type of natural numbers, &lt;g1&gt;Nat&lt;/g1&gt;, is different from the
type of integers, &lt;g2&gt;Int&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T124407Z" creationid="tlqk3" creationdate="20220526T124407Z">
        <seg>린에서 자연수 유형 &lt;g1&gt;Nat&lt;/g1&gt;은 정수의 유형 &lt;g2&gt;Int&lt;/g2&gt;과는 다릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In VS Code, you can open
a window to display messages by pressing &lt;g1&gt;Ctrl-Shift-Enter&lt;/g1&gt;, and
that window will then show you the current goal whenever the cursor is
in a tactic block.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084557Z" creationid="tlqk35" creationdate="20220522T055738Z">
        <seg>VS Code에서 여러분은  &lt;g1&gt;Ctrl-Shift-Enter&lt;/g1&gt;을 눌러 메시지을 보고자 창을 열 수 있습니다. 
그러면 그 창은 전략 블록 속의 커서가 어디에 있든지 간에 현재 목표를 여러분에게 보여줄 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a nested block,
Lean focuses on the first goal, and generates an error if it has not
been fully solved at the end of the block.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T110144Z" creationid="tlqk35" creationdate="20220524T144844Z">
        <seg>중첩된 블럭 속에 린은 첫 번째 목표에 집중하고 블록 끝에서도 완전히 풀리지 않는다면 오류를 발생시킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a proof, there are often multiple goals outstanding.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112617Z" creationid="tlqk35" creationdate="20220524T152042Z">
        <seg>증명에서는 미해결된 다수의 목표가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a sense, however, a cast does not change the meaning of an
expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175915Z" creationid="tlqk3" creationdate="20220605T175915Z">
        <seg>그러나 어떤 의미에서 형변환는 표현식의 의미를 변경하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In a similar way, &lt;g12&gt;∃ x : α, p&lt;/g12&gt; is a &lt;g13&gt;Prop&lt;/g13&gt;-valued
variant of &lt;g14&gt;Σ x : α, p&lt;/g14&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T153154Z" creationid="tlqk3" creationdate="20220527T153154Z">
        <seg>마찬가지로 &lt;g12&gt;∃ x : α, p&lt;/g12&gt;은 &lt;g14&gt;Σ x : α, p&lt;/g14&gt;의 &lt;g13&gt;Prop&lt;/g13&gt; 값이 매겨진 변형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to &lt;g1&gt;apply&lt;/g1&gt; and &lt;g2&gt;exact&lt;/g2&gt;, another useful tactic is
&lt;g3&gt;intro&lt;/g3&gt;, which introduces a hypothesis.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T062004Z" creationid="tlqk35" creationdate="20220522T062004Z">
        <seg>&lt;g1&gt;apply&lt;/g1&gt;과 &lt;g2&gt;exact&lt;/g2&gt;에 더해 또 다른 유용한 전략은 가정을 도입하는 &lt;g3&gt;intro&lt;/g3&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to axioms, however, we would also need rules to build new
proofs from old ones.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T154932Z" creationid="tlqk35" creationdate="20220321T154932Z">
        <seg>하지만 공리에 더해 우리는 이전 증명으로부터 새로운 증명을 만드는데 사용할 규칙도 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition, you
can use the &lt;g5&gt;#print&lt;/g5&gt; command to get information about any
identifier.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125358Z" creationid="tlqk3" creationdate="20220526T125358Z">
        <seg>게다가 여러분은 &lt;g5&gt;#print&lt;/g5&gt; 명령을 사용해서 임의의 식별자에 대한 정보를 얻을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In all cases, the command &lt;g3&gt;#print t1&lt;/g3&gt; still yields
&lt;g4&gt;∀ p q : Prop, p → q → p&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T122136Z" creationid="tlqk35" creationdate="20220321T161633Z">
        <seg>모든 경우에 명령 &lt;g3&gt;#print t1&lt;/g3&gt;은 여전히 &lt;g4&gt;∀ p q : Prop, p → q → p&lt;/g4&gt;을 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In all these cases, the attribute remains in effect in any file that
imports the one in which the declaration occurs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183219Z" creationid="tlqk3" creationdate="20220525T183219Z">
        <seg>모든 경우에 대해서, 특성은 선언이 있는 파일을 불러온 임의의 파일에 대해 영향을 미칩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In all these examples, pattern matching was used to carry out a single
case distinction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161820Z" creationid="tlqk3" creationdate="20220529T161820Z">
        <seg>이 모든 에제에서 패턴 매칭은 한 경우의 구별을 수행하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In any case, all that really matters is the bottom line.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114253Z" creationid="tlqk35" creationdate="20220321T160455Z">
        <seg>어떤 경우든 가장 중요한 것은 아래의 문장입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In any case, the additional rules are
added to the collection of identities that are used to simplify a
term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123328Z" creationid="tlqk35" creationdate="20220524T163318Z">
        <seg>어떤 경우든지 항을 간단히 하는데 사용되는 항등식의 모임에 추가적인 규칙이 더해질 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In both cases, Lean generates the auxiliary function &lt;g1&gt;fibFast.loop&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T163904Z" creationid="tlqk3" creationdate="20220603T163904Z">
        <seg>두 경우 모두에 대해 린은 부가 함수 &lt;g1&gt;fibFast.loop&lt;/g1&gt;를 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast
to usage outside the equation compiler, here the underscore does &lt;g3&gt;not&lt;/g3&gt;
indicate an implicit argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163315Z" creationid="tlqk3" creationdate="20220529T163315Z">
        <seg>방정식 컴파일러 밖에서의 사용과 대조적으로 여기서 밑줄 문자는 암시적인 인수를 지칭하지 &lt;g3&gt;않습니다.&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast to &lt;g1&gt;p ∨ ¬ p&lt;/g1&gt;, which can only eliminate to &lt;g2&gt;Prop&lt;/g2&gt;, the
type &lt;g3&gt;decidable p&lt;/g3&gt; is equivalent to the sum type &lt;g4&gt;Sum p (¬ p)&lt;/g4&gt;, which
can eliminate to any type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190843Z" creationid="tlqk3" creationdate="20220610T190843Z">
        <seg>&lt;g2&gt;Prop&lt;/g2&gt;만 제거할 수 있는 &lt;g1&gt;p ∨ ¬ p&lt;/g1&gt;와 달리 &lt;g3&gt;decidable p&lt;/g3&gt;형은 합계 유형 &lt;g4&gt;Sum p(¬ p)&lt;/g4&gt;과 동일합니다. 이는 임의의 유형을 제거할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast to ordinary inductive definition, which constructs an
element of some &lt;g1&gt;Sort u&lt;/g1&gt;, the more general version constructs a
function &lt;g2&gt;... → Sort u&lt;/g2&gt;, where "&lt;g3&gt;...&lt;/g3&gt;" denotes a sequence of
argument types, also known as &lt;g4&gt;indices&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153033Z" creationid="tlqk35" creationdate="20220528T153033Z">
        <seg>어떤 &lt;g1&gt;Sort u&lt;/g1&gt;의 원소를 생성하는 평범한 재귀적 정의와는 반대로 더 일반적인 형태는 함수 &lt;g2&gt;... → Sort u&lt;/g2&gt;을 생성합니다. 한편, "&lt;g3&gt;...&lt;/g3&gt;"은 &lt;g4&gt;indices&lt;/g4&gt;로도 알려진 인수 유형의 나열을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast,
&lt;g10&gt;infixr&lt;/g10&gt; reuses the notation's precedence for the right-hand side
operand, so &lt;g11&gt;a ^ b ^ c&lt;/g11&gt; &lt;g12&gt;can&lt;/g12&gt; be parsed as &lt;g13&gt;a ^ (b ^ c)&lt;/g13&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123058Z" creationid="tlqk3" creationdate="20220526T123058Z">
        <seg>반대로, &lt;g10&gt;infixr&lt;/g10&gt;은 우변의 피연산자 표기의 우선순위를 재사용합니다. 그래서 &lt;g11&gt;a ^ b ^ c&lt;/g11&gt;은 &lt;g13&gt;a ^ (b ^ c)&lt;/g13&gt;으로 구문분석 &lt;g12&gt;될&lt;/g12&gt; 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast, &lt;g1&gt;interactive
theorem proving&lt;/g1&gt; focuses on the "verification" aspect of theorem proving, requiring that every claim is supported by a
proof in a suitable axiomatic foundation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131435Z" creationid="tlqk35" creationdate="20220321T131435Z">
        <seg>반대로 &lt;g1&gt;상호작용 증명기&lt;/g1&gt;는 모든 진술은 적절한 공리적 기초에 의한 증명으로 지지될 것을 요구하면서 정리 증명의 "식별" 측면에 초점을 둡니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast, if we think in terms of the coding trick
described above, then the expressions themselves do not denote
anything interesting.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T112442Z" creationid="tlqk35" creationdate="20220321T160400Z">
        <seg>대조적으로 위에서 설명한 코딩 트릭으로 생각한다면 표현식 그 자체는 어떤 흥미로운 것도 나타내지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast, the
constructor &lt;g2&gt;succ&lt;/g2&gt; can only be applied to a previously constructed
&lt;g3&gt;Nat&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154209Z" creationid="tlqk3" creationdate="20220527T154209Z">
        <seg>반대로 생성자 &lt;g2&gt;succ&lt;/g2&gt;은 이전에 생성된 &lt;g3&gt;Nat&lt;/g3&gt;에만 적용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In contrast, the sum type has &lt;g1&gt;two&lt;/g1&gt; constructors, &lt;g2&gt;inl&lt;/g2&gt; and &lt;g3&gt;inr&lt;/g3&gt;
(for "insert left" and "insert right"), each of which takes &lt;g4&gt;one&lt;/g4&gt;
(explicit) argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T154827Z" creationid="tlqk3" creationdate="20220526T154827Z">
        <seg>대조적으로 합 유형은 &lt;g1&gt;두&lt;/g1&gt; 생성자 &lt;g2&gt;inl&lt;/g2&gt;과 &lt;g3&gt;inr&lt;/g3&gt;이 있습니다. ("왼쪽 삽입"과 "오른쪽 삽입" 의미) 각각은 &lt;g4&gt;한&lt;/g4&gt;개의 (명시적인) 인수를 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In each
file, you need to open the namespaces you wish to use.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130944Z" creationid="tlqk3" creationdate="20220526T130944Z">
        <seg>각 파일에서 여러분은 여러분이 사용하려는 이름공간을 열어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In each of the following examples, splitting occurs on only the first
argument, even though the others are included among the list of
patterns.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163048Z" creationid="tlqk3" creationdate="20220529T163048Z">
        <seg>다른 인수들도 패턴의 리스트 사이에 포함되어 있음에도 다음의 각 예제에서 분할은 첫 번째 인수에만 일어납니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact,
all builtin syntax is parsed and processed using the same mechanisms
and APIs open to users.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T120027Z" creationid="tlqk3" creationdate="20220526T120027Z">
        <seg>사실 모든 내장 문법은 같은 메커니즘과 사용자에게 개방된 API를 사용하여 구문분석되고 처리됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact,
the expression denotes the same function as &lt;g7&gt;fun (u : β) (z : α) =&gt; u&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143430Z" creationid="tlqk35" creationdate="20220321T143430Z">
        <seg>사실 표현식은  &lt;g7&gt;fun (u : β) (z : α) =&gt; u&lt;/g7&gt;처럼 같은 함수를 가리킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, &lt;g4&gt;Nonempty α&lt;/g4&gt; is equivalent to &lt;g5&gt;∃ x : α, True&lt;/g5&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T183051Z" creationid="tlqk3" creationdate="20220610T183051Z">
        <seg>실제로 &lt;g4&gt;Nonempty α&lt;/g4&gt;는 &lt;g5&gt;∃ x : α, True&lt;/g5&gt;와 동일합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, Lean allows us to define the inductive type we really want:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152400Z" creationid="tlqk35" creationdate="20220528T170256Z">
        <seg>사실 린은 우리가 원하는 귀납형을 정의하도록 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, Lean is generally
able to process and check proofs in parallel, since assessing the
correctness of one proof does not require knowing the details of
another.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T115840Z" creationid="tlqk35" creationdate="20220321T161001Z">
        <seg>사실, 어떤 증명의 옳음에 접근하는 것은 다른 증명의 세부사항 알기를 요구하지 않기에 린은 일반적으로 증명의 검증과 처리를 동시에 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, a single inductive definition can introduce an
indexed &lt;g1&gt;family&lt;/g1&gt; of inductive types, in a manner we now describe.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152140Z" creationid="tlqk35" creationdate="20220528T152510Z">
        <seg>사실 단일 재귀적 정의는 이제 우리가 설명할 방식으로 귀납형의 색인된 &lt;g1&gt;family&lt;/g1&gt;를 도입할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, by the propositions-as-types correspondence, we can declare
the assumption &lt;g1&gt;hp&lt;/g1&gt; that &lt;g2&gt;p&lt;/g2&gt; holds, as another variable:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121955Z" creationid="tlqk35" creationdate="20220321T161547Z">
        <seg>사실 유형으로써 명제 대응에 의해 우리는 &lt;g2&gt;p&lt;/g2&gt;가 성립하는 가정 &lt;g1&gt;hp&lt;/g1&gt;를 또 다른 변수로 선언할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, function extensionality follows from the existence of
quotients, which we describe in the next section.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174121Z" creationid="tlqk3" creationdate="20220605T174121Z">
        <seg>사실, 함수 확장성은 다음 섹션에서 설명하는 몫의 존재에서 비롯됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, in
Lean's library, every concrete type other than the universes and every
type constructor other than dependent arrows is an instance of a general family of
type constructions known as &lt;g8&gt;inductive types&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T142146Z" creationid="tlqk3" creationdate="20220526T142146Z">
        <seg>사실 린의 라이브러리에서 세계보다는 모든 구체적인 유형과 의존 화살표 외에 모든 형 생성자는 &lt;g8&gt;inductive types&lt;/g8&gt;으로 알려진 일반적인 유형 생성의 일종의 개체입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, in Lean, &lt;g1&gt;Subtype&lt;/g1&gt; is defined using the structure command:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T153512Z" creationid="tlqk3" creationdate="20220527T153512Z">
        <seg>사실 린에서 &lt;g1&gt;Subtype&lt;/g1&gt;은 구조체 명령을 사용해 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, more should be true: applying the expression &lt;g3&gt;(fun x : Nat
=&gt; x)&lt;/g3&gt; to &lt;g4&gt;1&lt;/g4&gt; should "return" the value &lt;g5&gt;1&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143634Z" creationid="tlqk35" creationdate="20220321T143634Z">
        <seg>사실, 더 중요한건 표현식&lt;g3&gt;(fun x : Nat =&gt; x)&lt;/g3&gt;을 &lt;g5&gt;1&lt;/g5&gt;에 적용하는 것은 값 &lt;g4&gt;1&lt;/g4&gt;을 "반환"하는 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, most such systems provide fully elaborated "proof objects" that can be communicated to other systems and
checked independently.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131457Z" creationid="tlqk35" creationdate="20220321T131457Z">
        <seg>사실, 그런 시스템의 대부분은 증명 대상과의 완전한 협력을 제공합니다. 이 대상은 다른 시스템과 상호작용될 수 있고 독립적으로 검증될 수 있습니다.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, the
notation is defined in Lean as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183515Z" creationid="tlqk35" creationdate="20220321T183515Z">
        <seg>사실 린에서 정의된 기호는 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, the computation
principle is declared as a reduction rule, as the proof below makes
clear.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T182701Z" creationid="tlqk3" creationdate="20220605T182701Z">
        <seg>사실, 계산 원리는 아래 증명이 명확하게 하는 것처럼 축소 규칙으로 선언됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, the function
&lt;g3&gt;id&lt;/g3&gt; is defined in the standard library in exactly this way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153328Z" creationid="tlqk35" creationdate="20220321T153328Z">
        <seg>사실 함수 &lt;g3&gt;id&lt;/g3&gt;는 표준 라이브러리에서도 이와 정확히 동일한 방식으로 정의되어 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, the type &lt;g3&gt;Prop&lt;/g3&gt; is
syntactic sugar for &lt;g4&gt;Sort 0&lt;/g4&gt;, the very bottom of the type hierarchy
described in the last chapter.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T105432Z" creationid="tlqk35" creationdate="20220321T155739Z">
        <seg>사실 &lt;g3&gt;Prop&lt;/g3&gt;형은 지난 장에서 설명한 유형 계층의 최하층인 &lt;g4&gt;Sort 0&lt;/g4&gt;에 대한 문법 설탕입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, there is a &lt;g1&gt;show&lt;/g1&gt; tactic, which is similar to the
&lt;g2&gt;show&lt;/g2&gt; expression in a proof term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105121Z" creationid="tlqk35" creationdate="20220524T143254Z">
        <seg>사실 증명 항에서 &lt;g2&gt;show&lt;/g2&gt; 표현식과 비슷한 &lt;g1&gt;show&lt;/g1&gt; 전략이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, this is exactly how the logical
connectives are defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151608Z" creationid="tlqk3" creationdate="20220527T151608Z">
        <seg>사실 이것은 논리 결합자가 어떻게 정의되는가에 대한 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, we can compress the full tactic down to one line:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113039Z" creationid="tlqk35" creationdate="20220524T152820Z">
        <seg>사실, 우리는 모든 전략을 한 줄로 압축시킬 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, with this
notation, you can even omit both the type and the label, in which case
the new fact is introduced with the label &lt;g4&gt;this&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105626Z" creationid="tlqk35" creationdate="20220524T144138Z">
        <seg>사실 이 기호와 관련해서 유형과 레이블 모두를 생략할 수 있습니다. 
그 경우 이 새로운 사실은 &lt;g4&gt;this&lt;/g4&gt; 레이블로 도입됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, you can use Lean's &lt;g1&gt;(t : T)&lt;/g1&gt; notation to specify the class whose instance you are looking for,
in a concise manner:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180028Z" creationid="tlqk3" creationdate="20220604T180028Z">
        <seg>사실 여러분은 린의 &lt;g1&gt;(t : T)&lt;/g1&gt; 기호로 여러분이 찾는 개체의 클래스를 엄밀하게 명시할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In full generality, the problem of
determining whether a higher-order unifier exists is undecidable, and
Lean can at best provide imperfect and approximate solutions to the
problem.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064247Z" creationid="tlqk35" creationdate="20220321T180110Z">
        <seg>완전히 일반적인 문제에서 고차 단일화기가 존재하는지 정하는 문제는 결정 불가능합니다. 그래도 린은 최선을 다해 이 문제에 대해 불완전하지만 근사적인 해를 제공하려고 최선을 다합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In general, a
"construction" can depend on data, which is then represented in the
constructed argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152816Z" creationid="tlqk3" creationdate="20220526T152816Z">
        <seg>일반적으로 "생성"은 데이터에 의존할 수 있습니다. 그러면 그것은 생성된 인자에서 표현됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In general, it is important for you to be familiar with the library
and its contents, so you know what theorems, definitions, notations,
and resources are available to you.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131112Z" creationid="tlqk3" creationdate="20220526T131112Z">
        <seg>일반적으로 여러분이 라이브러리와 그것의 내용물에 친숙해지는 것이 중요합니다. 그래야 여러분이 어떤 정리, 정의, 기호, 자원을 쓸 수 있는지 압니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In general, whenever we define a structure &lt;g3&gt;S&lt;/g3&gt;, we usually
define &lt;g4&gt;projection&lt;/g4&gt; functions that allow us to "destruct" each
instance of &lt;g5&gt;S&lt;/g5&gt; and retrieve the values that are stored in its
fields.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173030Z" creationid="tlqk35" creationdate="20220528T172918Z">
        <seg>일반적으로 언제든 우리가 구조체 &lt;g3&gt;S&lt;/g3&gt;를 정의하면 우리는 보통 &lt;g5&gt;S&lt;/g5&gt;의 각 개체를 "파괴"할 수 있게 해주고 그 필드에 저장된 값을 인출할 수 있게 해주는 &lt;g4&gt;투영&lt;/g4&gt;함수를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In its most basic form, it is
applied to an element &lt;g2&gt;x&lt;/g2&gt; in the local context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164005Z" creationid="tlqk3" creationdate="20220527T164005Z">
        <seg>그것의 가장 기본 형태에서 이것은 지역 맥락에서 원소 &lt;g2&gt;x&lt;/g2&gt;에 적용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In its most basic form, the quotient construction does not even
require &lt;g1&gt;r&lt;/g1&gt; to be an equivalence relation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T181550Z" creationid="tlqk3" creationdate="20220605T181529Z">
        <seg>가장 기본적인 형태의 몫 생성은 &lt;g1&gt;r&lt;/g1&gt;이 등가 관계일 필요 조차 요구하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In light of that fact,
Lean tags proofs as &lt;g1&gt;irreducible&lt;/g1&gt;, which serves as a hint to the
parser (more precisely, the &lt;g2&gt;elaborator&lt;/g2&gt;) that there is generally no
need to unfold it when processing a file.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T115655Z" creationid="tlqk35" creationdate="20220321T160948Z">
        <seg>그 사실로부터 린은 증명에 &lt;g1&gt;축약할 수 없는(irreducible)&lt;/g1&gt; 태그를 붙여 파서(parser)(더 정확히는  &lt;g2&gt;협력기(elaborator)&lt;/g2&gt;)가 파일을 처리할 때 대게 증명을 펼칠 필요가 없다는 힌트를 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In many respects, however, a &lt;g1&gt;namespace ... end&lt;/g1&gt; block behaves the
same as a &lt;g2&gt;section ... end&lt;/g2&gt; block.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150718Z" creationid="tlqk35" creationdate="20220321T150718Z">
        <seg>하지만 여러 관점에서 &lt;g1&gt;namespace ... end&lt;/g1&gt;블록은 &lt;g2&gt;section ... end&lt;/g2&gt;블록과 동일하게 동작합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In most cases, the first argument of &lt;g1&gt;Or.intro_right&lt;/g1&gt; and
&lt;g2&gt;Or.intro_left&lt;/g2&gt; can be inferred automatically by Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T153942Z" creationid="tlqk35" creationdate="20220321T163946Z">
        <seg>대부분의 경우 &lt;g1&gt;Or.intro_right&lt;/g1&gt;와 &lt;g2&gt;Or.intro_left&lt;/g2&gt;의 첫 번 째 인수는 린에 의해 자동으로 추론됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In much the same way, you might want to maintain a
view of functions that does not force you to identify two functions
that have the same input / output behavior.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174028Z" creationid="tlqk3" creationdate="20220605T174028Z">
        <seg>거의 같은 방식으로 동일한 입력/출력 동작을 갖는 두 함수를 식별하도록 강요하지 않는 함수 관점를 유지하기를 원할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In normal circumstances, it is never necessary to
unfold the "definition" of a theorem; by proof irrelevance, any two
proofs of that theorem are definitionally equal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T160904Z" creationid="tlqk35" creationdate="20220321T160904Z">
        <seg>평범한 상황에서 증명 무연관에 의해 정리의 "정의"를 펼칠 필요는 절대 없습니다. 그리고 그 정리의 임의의 두 증명도 정의상으로 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In one of these cases, &lt;g5&gt;u = True&lt;/g5&gt; and
&lt;g6&gt;v = False&lt;/g6&gt;, and in all the other cases, &lt;g7&gt;p&lt;/g7&gt; is true.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185826Z" creationid="tlqk3" creationdate="20220610T185826Z">
        <seg>이러한 경우 중 하나는 &lt;g5&gt;u = True&lt;/g5&gt; 및 &lt;g6&gt;v = False&lt;/g6&gt;이고 다른 모든 경우에는 &lt;g7&gt;p&lt;/g7&gt;가 참입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other
words, &lt;g7&gt;assuming&lt;/g7&gt; &lt;g8&gt;α : Type&lt;/g8&gt; is the first argument to the function,
the type of the next two elements are &lt;g9&gt;α&lt;/g9&gt; and &lt;g10&gt;List α&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151425Z" creationid="tlqk35" creationdate="20220321T151425Z">
        <seg>다시 말하면 함수의 첫 번째 인수로  &lt;g8&gt;α : Type&lt;/g8&gt;으로  &lt;g7&gt;가정&lt;/g7&gt;하면 다음 두 원소의 유형은  &lt;g9&gt;α&lt;/g9&gt;와 &lt;g10&gt;List α&lt;/g10&gt;가 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other
words, under the propositions-as-types correspondence, the proof by
cases is a kind of definition by cases, where what is being "defined"
is a proof instead of a piece of data.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151834Z" creationid="tlqk3" creationdate="20220526T151834Z">
        <seg>다시 말하자면 유형으로써 명제 대응하에서 경우에 따른 증명은 경우에 따른 정의의 일종이고, 여기서 "정의되는" 것은 데이터의 조각 대신 증명입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other situations, however,
reductions hold only &lt;g3&gt;propositionally&lt;/g3&gt;, which is to say, they are
equational theorems that must be applied explicitly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173048Z" creationid="tlqk3" creationdate="20220529T173048Z">
        <seg>하지만 다른 상황에서 축약은 &lt;g3&gt;명제적으로&lt;/g3&gt;만 성립합니다. 즉, 명시적으로 적용해야 하는 등식 정리입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words,
&lt;g4&gt;True&lt;/g4&gt; is simply true, and has a canonical proof, &lt;g5&gt;True.intro&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164603Z" creationid="tlqk35" creationdate="20220321T164603Z">
        <seg>다시 말하자면 &lt;g4&gt;True&lt;/g4&gt;는 단순히 참이고, 정식 증명 &lt;g5&gt;True.intro&lt;/g5&gt;를 가집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words,
Lean parses the more general definitions, defines auxiliary inductive
types based on them, and then uses the auxiliary types to define the
ones we really want.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152331Z" creationid="tlqk35" creationdate="20220528T164744Z">
        <seg>다시 말하면, 린은 더 일반적인 정의를 구문분석해 이들이 기반하는 부가적인 귀납형을 정의하고, 그 뒤 부가적인 유형을 우리가 원하는 것을 정의하는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, &lt;g3&gt;s&lt;/g3&gt; is a proof of &lt;g4&gt;p&lt;/g4&gt;,
&lt;g5&gt;t&lt;/g5&gt; is a proof of the desired conclusion assuming &lt;g6&gt;h : p&lt;/g6&gt;, and the
two are combined by a lambda abstraction and application.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T161321Z" creationid="tlqk35" creationdate="20220321T165203Z">
        <seg>다시 말하자면 &lt;g3&gt;s&lt;/g3&gt;는 &lt;g4&gt;p&lt;/g4&gt;의 증명입니다. &lt;g5&gt;t&lt;/g5&gt;는 &lt;g6&gt;h : p&lt;/g6&gt;를 가정했을 때 원하는 결론의 증명입니다. 그리고 이 둘은 람다 추상화와 적용으로 결합되어 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, double-negation elimination allows
one to carry out a proof by contradiction, something which is not
generally possible in constructive logic.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T165833Z" creationid="tlqk35" creationdate="20220321T165833Z">
        <seg>다시 말하자면 이중 부정 제거는 직관주의적 논리에서 일반적으로 불가능한 귀류법을 사용한 증명을 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, for each unresolved placeholder, Lean
reports the subgoal that needs to be filled at that point.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165626Z" creationid="tlqk35" creationdate="20220321T170458Z">
        <seg>다시 말하자면 각 해결되지 않은 자리 차지자에 대해 린은 그 지점에서 채워져야 할 하위 목표를 보고합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, for every &lt;g12&gt;α&lt;/g12&gt;,
&lt;g13&gt;cons α&lt;/g13&gt; is the function that takes an element &lt;g14&gt;a : α&lt;/g14&gt; and a list
&lt;g15&gt;as : List α&lt;/g15&gt;, and returns a new list, so you have &lt;g16&gt;cons α a as : List α&lt;/g16&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151242Z" creationid="tlqk35" creationdate="20220321T151242Z">
        <seg>다시 말하면 모든 &lt;g12&gt;α&lt;/g12&gt;에 대해  &lt;g13&gt;cons α&lt;/g13&gt;는 원소 &lt;g14&gt;a : α&lt;/g14&gt;와 리스트 &lt;g15&gt;as : List α&lt;/g15&gt;를 받는 함수입니다.  그리고 새로운 리스트를 반환합니다. 그래서 여러분은  &lt;g16&gt;cons α a as : List α&lt;/g16&gt;를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, if &lt;g15&gt;β&lt;/g15&gt; is a
proposition depending on &lt;g16&gt;α&lt;/g16&gt;, then &lt;g17&gt;∀ x : α, β&lt;/g17&gt; is again a
proposition.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070421Z" creationid="tlqk35" creationdate="20220321T175033Z">
        <seg>다시 말해서, 만약 &lt;g15&gt;β&lt;/g15&gt;가 &lt;g16&gt;α&lt;/g16&gt;에 의존하는 명제라면 &lt;g17&gt;∀ x : α, β&lt;/g17&gt;도 명제인 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, if you import &lt;g4&gt;Foo&lt;/g4&gt; and &lt;g5&gt;Foo&lt;/g5&gt; imports &lt;g6&gt;Bar&lt;/g6&gt;,
then you also have access to the contents of &lt;g7&gt;Bar&lt;/g7&gt;, and do not need to import it explicitly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174626Z" creationid="tlqk35" creationdate="20220524T174626Z">
        <seg>다시 말하면, 여러분이 &lt;g4&gt;Foo&lt;/g4&gt;를 부르고 &lt;g5&gt;Foo&lt;/g5&gt;는 &lt;g6&gt;Bar&lt;/g6&gt;를 불러온다면
여러분은 &lt;g7&gt;Bar&lt;/g7&gt;의 내용에도 접근할 수 있습니다. 그리고 명시적으로 불러올 필요가 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, implication between propositions &lt;g3&gt;p&lt;/g3&gt; and &lt;g4&gt;q&lt;/g4&gt;
corresponds to having a function that takes any element of &lt;g5&gt;p&lt;/g5&gt; to an
element of &lt;g6&gt;q&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T104651Z" creationid="tlqk35" creationdate="20220321T155625Z">
        <seg>다시 말하면, 명제 &lt;g3&gt;p&lt;/g3&gt;과 &lt;g4&gt;q&lt;/g4&gt;사이의 함의는 어떤 &lt;g5&gt;p&lt;/g5&gt;의 원소를 받아 어떤 &lt;g6&gt;q&lt;/g6&gt;의 원소로 가는 함수를 갖는 것에 대응됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, it is a
proof by cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T163805Z" creationid="tlqk35" creationdate="20220321T163805Z">
        <seg>다시 말하자면 경우에 따라 증명한 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, the expressions
&lt;g2&gt;themselves&lt;/g2&gt; are the proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T113801Z" creationid="tlqk35" creationdate="20220321T160431Z">
        <seg>다시 말하면 표현식 &lt;g2&gt;그 자체는&lt;/g2&gt; 증명입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, the type of
dependent functions from &lt;g5&gt;α&lt;/g5&gt; to &lt;g6&gt;β&lt;/g6&gt; "lives" in the universe whose
index is the maximum of &lt;g7&gt;i&lt;/g7&gt; and &lt;g8&gt;j&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070311Z" creationid="tlqk35" creationdate="20220321T174838Z">
        <seg>다시 말하면, &lt;g5&gt;α&lt;/g5&gt;에서 &lt;g6&gt;β&lt;/g6&gt;로의 의존 함수 유형이 그것의 첨자가 &lt;g7&gt;i&lt;/g7&gt;와 &lt;g8&gt;j&lt;/g8&gt; 중 최대값인 유형세계에 "속한다"는 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, the type of the value
returned by &lt;g14&gt;f&lt;/g14&gt; depends on its input.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151837Z" creationid="tlqk35" creationdate="20220321T151837Z">
        <seg>다시 말하자면 &lt;g14&gt;f&lt;/g14&gt;에 의해 반환되는 값의 유형은 그것의 입력에 의존합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, the universe level &lt;g1&gt;u&lt;/g1&gt; is required to be at least as
large as the universe level of each type that represents an argument
to a constructor.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T162439Z" creationid="tlqk35" creationdate="20220528T162249Z">
        <seg>다시 말하면,  세계 수준 &lt;g1&gt;u&lt;/g1&gt;는 적어도 생성자에 대한 인자로 나타난 각 유형의 세계 수준 만큼이나 클 필요가 있음을 요구합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In other words, whenever we have &lt;g4&gt;p : Prop&lt;/g4&gt;, we
can interpret &lt;g5&gt;p&lt;/g5&gt; as a type, namely, the type of its proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T104339Z" creationid="tlqk35" creationdate="20220321T155450Z">
        <seg>다시 말하자면, &lt;g4&gt;p : Prop&lt;/g4&gt;를 갖는 한 우리는&lt;g5&gt;p&lt;/g5&gt;를 그것의 증명 유형으로 해석할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular,
if &lt;g8&gt;x&lt;/g8&gt; has no predecessors, it is accessible.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T174242Z" creationid="tlqk3" creationdate="20220529T174242Z">
        <seg>특히 &lt;g8&gt;x&lt;/g8&gt;의 전임자가 없다면 그것은 접근가능합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular,
we can define predicates on &lt;g6&gt;α&lt;/g6&gt; by quantifying over all predicates
on &lt;g7&gt;α&lt;/g7&gt;, which is exactly the type of circularity that was once
considered problematic.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T071037Z" creationid="tlqk35" creationdate="20220321T175253Z">
        <seg>특히, 우리는 &lt;g6&gt;α&lt;/g6&gt;에 대한 술어를 모든 &lt;g7&gt;α&lt;/g7&gt;에 대한 술어를 정량화하여 정의할 수 있습니다. 그리고 이게 한때 문제라고 여겼던 악순환 유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, any closed
computationally pure expression of type &lt;g1&gt;Nat&lt;/g1&gt;, for example, will
reduce to a numeral.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T161401Z" creationid="tlqk3" creationdate="20220605T161401Z">
        <seg>특히, 예를 들어 &lt;g1&gt;Nat&lt;/g1&gt;형의 임의의 닫힌 계산적으로 순수한 표현식 수치값으로 축약됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, if &lt;g21&gt;r&lt;/g21&gt;
was an equivalence relation to start with, then for all &lt;g22&gt;a&lt;/g22&gt; and
&lt;g23&gt;b&lt;/g23&gt; we have &lt;g24&gt;r a b&lt;/g24&gt; iff &lt;g25&gt;r' a b&lt;/g25&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T184721Z" creationid="tlqk3" creationdate="20220605T184616Z">
        <seg>특히, &lt;g21&gt;r&lt;/g21&gt;이 첫 등가 관계라면 모든 &lt;g22&gt;a&lt;/g22&gt;와 &lt;g23&gt;b&lt;/g23&gt;에 대해 &lt;g24&gt;r a b&lt;/g24&gt;는 &lt;g25&gt;r' b&lt;/g25&gt;와 동등하다가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, if &lt;g5&gt;p&lt;/g5&gt; is a true closed
expression, &lt;g6&gt;decide p&lt;/g6&gt; will reduce definitionally to the Boolean &lt;g7&gt;true&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174914Z" creationid="tlqk3" creationdate="20220604T174914Z">
        <seg>특히, &lt;g5&gt;p&lt;/g5&gt;가 정말로 닫힌 표현식이라면 &lt;g6&gt;decide p&lt;/g6&gt;는 정의로부터 불리언 &lt;g7&gt;true&lt;/g7&gt;로 축소됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, if you use the
&lt;g3&gt;variable&lt;/g3&gt; command within a namespace, its scope is limited to the
namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150731Z" creationid="tlqk35" creationdate="20220321T150731Z">
        <seg>특히, 이름공간 안에서 &lt;g3&gt;variable&lt;/g3&gt; 명령을 사용한다면 그것의 범위는 이름공간으로 제한될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the following equations hold
definitionally:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164916Z" creationid="tlqk3" creationdate="20220529T164916Z">
        <seg>특히 다음 방정식은 정의로부터 성립합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, the use of axioms bears on the
computational content of definitions and theorems, in ways we will
explore here.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T160920Z" creationid="tlqk3" creationdate="20220605T160920Z">
        <seg>특히 공리의 사용은 여기서 탐구할 정리와 공리의 계산적 내용에 영향을 미칩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In particular, we
can often write &lt;g11&gt;⟨hp, hq⟩&lt;/g11&gt; instead of &lt;g12&gt;And.intro hp hq&lt;/g12&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T163302Z" creationid="tlqk35" creationdate="20220321T163302Z">
        <seg>특히 &lt;g12&gt;And.intro hp hq&lt;/g12&gt;대신  &lt;g11&gt;⟨hp, hq⟩&lt;/g11&gt;와 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In practice, there is not a
sharp distinction between verifying a piece of mathematics and verifying the correctness of a system: formal
verification requires describing hardware and software systems in mathematical terms, at which point establishing claims
as to their correctness becomes a form of theorem proving.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131208Z" creationid="tlqk35" creationdate="20220321T131208Z">
        <seg>실제로 수학의 일부를 식별하는 것과 시스템의 명확성을 식별하는 것 사이에 명확한 구분이 없습니다. 형식 증명은 하드웨어와 소프트웨어 시스템을 수학적 항으로 묘사하기를 요구합니다. 그리고 그때 그들의 올바름에 대한 주장을 세우는 것은 정리 증명의 형태가 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In previous Lean versions, users often found it cumbersome
to have to include these extra discriminants.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151059Z" creationid="tlqk3" creationdate="20220604T151059Z">
        <seg>린의 이전 버전에서 사용자는 이 별도의 구별자를 포함시켜야 하는 것이 종종 성가신 일임을 알았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In principle, any closed term (that is, term with no free
variables) of type &lt;g2&gt;Nat&lt;/g2&gt; should evaluate to a numeral, &lt;g3&gt;succ
(... (succ zero)...)&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171535Z" creationid="tlqk3" creationdate="20220605T171535Z">
        <seg>원리상 임의의 닫힌 항(즉, 자유 변수가 없는 항)의 유형 &lt;g2&gt;Nat&lt;/g2&gt;은 수치값 &lt;g3&gt;succ(... (succ zero)...)&lt;/g3&gt;으로 평가되어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In situations like this, it can be tedious to supply the arguments
&lt;g1&gt;a b c&lt;/g1&gt;, when they can be inferred from &lt;g2&gt;hab hbc&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065524Z" creationid="tlqk35" creationdate="20220321T174212Z">
        <seg>&lt;g2&gt;hab hbc&lt;/g2&gt;으로부터 인자 &lt;g1&gt;a b c&lt;/g1&gt;를 추론할 수 있는 상황에서 인수를 제공하는 것은 번거롭습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case,
&lt;g12&gt;(x : α) → β&lt;/g12&gt; is an element of &lt;g13&gt;Sort 0&lt;/g13&gt; as well, no matter which
type universe &lt;g14&gt;α&lt;/g14&gt; lives in.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T175001Z" creationid="tlqk35" creationdate="20220321T174900Z">
        <seg>그 경우 &lt;g14&gt;α&lt;/g14&gt;가 어느 유형세계에 속하였든 상관없이 &lt;g12&gt;(x : α) → β&lt;/g12&gt;도 &lt;g13&gt;Sort 0&lt;/g13&gt;의 원소입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case,
adding new axioms in &lt;g1&gt;Prop&lt;/g1&gt; does not matter; by proof irrelevance,
an expression in &lt;g2&gt;Prop&lt;/g2&gt; carries no information, and can be safely
ignored by the reduction procedures.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T180318Z" creationid="tlqk3" creationdate="20220605T180318Z">
        <seg>이 경우 &lt;g1&gt;Prop&lt;/g1&gt;에 새로운 공리를 추가하는 것은 중요하지 않습니다. 증명 무관성에 의해 &lt;g2&gt;Prop&lt;/g2&gt;의 표현식은 정보를 전달하지 않으며 축소 절차에서 안전하게 무시될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, given
&lt;g5&gt;x : α&lt;/g5&gt;, &lt;g6&gt;p x&lt;/g6&gt; denotes the assertion that &lt;g7&gt;p&lt;/g7&gt; holds of
&lt;g8&gt;x&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T060847Z" creationid="tlqk35" creationdate="20220321T172714Z">
        <seg>이 경우 &lt;g5&gt;x : α&lt;/g5&gt;일 때, &lt;g6&gt;p x&lt;/g6&gt;는 &lt;g7&gt;p&lt;/g7&gt;가 &lt;g8&gt;x&lt;/g8&gt;에 대해 성립한다는 주장을 가리킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In that case, the type &lt;g9&gt;(a : α) → β a&lt;/g9&gt; denotes the type
of functions &lt;g10&gt;f&lt;/g10&gt; with the property that, for each &lt;g11&gt;a : α&lt;/g11&gt;, &lt;g12&gt;f a&lt;/g12&gt;
is an element of &lt;g13&gt;β a&lt;/g13&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151821Z" creationid="tlqk35" creationdate="20220321T151821Z">
        <seg>이 경우 유형 &lt;g9&gt;(a : α) → β a&lt;/g9&gt;는 모든  &lt;g11&gt;a : α&lt;/g11&gt;에 대해,  &lt;g12&gt;f a&lt;/g12&gt;가 &lt;g13&gt;β a&lt;/g13&gt;의 원소라는 성질로 &lt;g10&gt;f&lt;/g10&gt; 함수의 유형을 지칭합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the
Lean standard library, you often see Greek letters to denote types,
and the Unicode symbol &lt;g11&gt;→&lt;/g11&gt; as a more compact version of &lt;g12&gt;-&gt;&lt;/g12&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140139Z" creationid="tlqk35" creationdate="20220321T140139Z">
        <seg>린의 표준 라이브러리에서 여러분은 유형을 나타내는데 그리스 문자를 자주 보게 됩니다. 그리고 유니코드 기호 &lt;g11&gt;→&lt;/g11&gt; 은 &lt;g12&gt;-&gt;&lt;/g12&gt;보다 더 간결한 버전입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the
next two examples, they are used to define functions which swap the
components of the product and sum types:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T094711Z" creationid="tlqk35" creationdate="20220522T072556Z">
        <seg>다음 두 예제에서, 이들은 곱과 합 유형의 교환하는 함수를 정의하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the
previous example, the proper value of the metavariable is determined
by the tactic &lt;g3&gt;exact px&lt;/g3&gt;, since &lt;g4&gt;px&lt;/g4&gt; has type &lt;g5&gt;p x&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T072240Z" creationid="tlqk35" creationdate="20220522T072240Z">
        <seg>이전 예제에서 메타변수의 적절한 값은&lt;g3&gt;exact px&lt;/g3&gt; 전략에 의해 결정됩니다. 
그 이유는 &lt;g4&gt;px&lt;/g4&gt;가 &lt;g5&gt;p x&lt;/g5&gt;형을 갖기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the
second expression, &lt;g6&gt;a&lt;/g6&gt; is a variable, and the expression
&lt;g7&gt;fun a =&gt; t2&lt;/g7&gt; has to make sense independently of the value of &lt;g8&gt;a&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145013Z" creationid="tlqk35" creationdate="20220321T145013Z">
        <seg>두 번째 표현식에서 &lt;g6&gt;a&lt;/g6&gt;는 변수이고 표현식 &lt;g7&gt;fun a =&gt; t2&lt;/g7&gt;는  &lt;g8&gt;a&lt;/g8&gt;의 값과 별개로 의미를 가져야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the
successor step, assuming the value &lt;g6&gt;add m n&lt;/g6&gt; is already determined,
we define &lt;g7&gt;add m (succ n)&lt;/g7&gt; to be &lt;g8&gt;succ (add m n)&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160228Z" creationid="tlqk3" creationdate="20220527T160228Z">
        <seg>계승자 단계에서 우리는 &lt;g7&gt;add m (succ n)&lt;/g7&gt;이 &lt;g7&gt;add m (succ n)&lt;/g7&gt;이 되도록 정의하여 값 &lt;g6&gt;add m n&lt;/g6&gt;의 추정은 이미 결정되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the &lt;g1&gt;nil&lt;/g1&gt; case, &lt;g2&gt;m&lt;/g2&gt; is instantiated to &lt;g3&gt;0&lt;/g3&gt;, and
&lt;g4&gt;noConfusion&lt;/g4&gt; makes use of the fact that &lt;g5&gt;0 = succ n&lt;/g5&gt; cannot
occur.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183325Z" creationid="tlqk3" creationdate="20220603T183325Z">
        <seg>&lt;g1&gt;nil&lt;/g1&gt; 경우에서 &lt;g2&gt;m&lt;/g2&gt;은 &lt;g3&gt;0&lt;/g3&gt;으로 개체화되고 &lt;g4&gt;noConfusion&lt;/g4&gt;은 &lt;g5&gt;0 = succ n&lt;/g5&gt;이 일어날 수 없다는 사실을 사용하게 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the Lean standard
library, therefore, &lt;g1&gt;funext&lt;/g1&gt; is thus
&lt;g2&gt;proved from the quotient construction&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174225Z" creationid="tlqk3" creationdate="20220605T174225Z">
        <seg>그러므로 린 표준 라이브러리에서 &lt;g1&gt;funext&lt;/g1&gt;는 &lt;g2&gt;몫 생성으로부터 증명됩니다.&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the above Lean code, the field &lt;g1&gt;add&lt;/g1&gt; has type
&lt;g2&gt;Add.add : {α : Type} → Add α → α → α → α&lt;/g2&gt;
where the curly braces around the type &lt;g3&gt;a&lt;/g3&gt; mean that it is an implicit argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153306Z" creationid="tlqk3" creationdate="20220604T153306Z">
        <seg>위의 린 코드에서 &lt;g1&gt;add&lt;/g1&gt;은 &lt;g2&gt;Add.add : {α : Type} → Add α → α → α → α&lt;/g2&gt;형 입니다. 여기서 유형 &lt;g3&gt;a&lt;/g3&gt; 주위의 중괄호는 이것이 암시적인 인수임을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the base case, we set &lt;g4&gt;add m zero&lt;/g4&gt; to &lt;g5&gt;m&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160058Z" creationid="tlqk3" creationdate="20220527T160058Z">
        <seg>기저의 경우에서 우리는 &lt;g4&gt;add m zero&lt;/g4&gt;를 &lt;g5&gt;m&lt;/g5&gt;으로 설정합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the case of the &lt;g4&gt;apply&lt;/g4&gt;
tactic, the tags are inferred from the parameters names used in the
&lt;g5&gt;And.intro&lt;/g5&gt; declaration.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084949Z" creationid="tlqk35" creationdate="20220522T061147Z">
        <seg>&lt;g4&gt;apply&lt;/g4&gt; 전략의 경우 태그는 &lt;g5&gt;And.intro&lt;/g5&gt; 선언에서 사용된 매개변수의 이름으로부터 추론됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the case where &lt;g1&gt;p x&lt;/g1&gt; has type &lt;g2&gt;Prop&lt;/g2&gt;, if we replace
&lt;g3&gt;(x : α) → β x&lt;/g3&gt; with &lt;g4&gt;∀ x : α, p x&lt;/g4&gt;, we can read these as the correct rules
for building proofs involving the universal quantifier.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T173157Z" creationid="tlqk35" creationdate="20220321T173157Z">
        <seg>&lt;g1&gt;p x&lt;/g1&gt;는 &lt;g2&gt;Prop&lt;/g2&gt;형을 갖는 이 경우에 대해, 우리가  &lt;g3&gt;(x : α) → β x&lt;/g3&gt;을 &lt;g4&gt;∀ x : α, p x&lt;/g4&gt;으로 대체한다면, 우리는 이것들을 전칭 한정기호를 포함한 증명을 만드는데 옳바른 규칙이라고 읽을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the class &lt;g1&gt;HMul&lt;/g1&gt;, the parameters &lt;g2&gt;α&lt;/g2&gt; and &lt;g3&gt;β&lt;/g3&gt; are treated as input values.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164628Z" creationid="tlqk3" creationdate="20220604T164628Z">
        <seg>클래스 &lt;g1&gt;HMul&lt;/g1&gt;에서 매개변수 &lt;g2&gt;α&lt;/g2&gt;와 &lt;g3&gt;β&lt;/g3&gt;는 입력값으로 취급됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the current setting, it shows
how to "introduce" or establish an implication.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T123849Z" creationid="tlqk35" creationdate="20220321T162426Z">
        <seg>현재 상황에서 이는 함의를 어떻게 "도입"하거나 세우는지 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the definition
of &lt;g8&gt;linv&lt;/g8&gt;, choice is used twice: first, to show that
&lt;g9&gt;(∃ a : A, f a = b)&lt;/g9&gt; is "decidable," and then to choose an &lt;g10&gt;a&lt;/g10&gt; such that
&lt;g11&gt;f a = b&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191355Z" creationid="tlqk3" creationdate="20220610T191355Z">
        <seg>&lt;g8&gt;linv&lt;/g8&gt;의 정의에서 선택은 두 번 사용됩니다. 먼저 &lt;g9&gt;(∃ a : A, f a = b)&lt;/g9&gt;가 "결정 가능"임을 보이는 데 그 뒤 &lt;g11&gt;f a = b&lt;/g11&gt;을 만족하는 &lt;g10&gt;a&lt;/g10&gt;를 선택하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the editors, you can type the backwards arrow as
&lt;g4&gt;\l&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114437Z" creationid="tlqk35" creationdate="20220524T155059Z">
        <seg>편집기에게 여러분은 뒷방향 화살표를 &lt;g4&gt;\l&lt;/g4&gt;로 칠 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example
below, notice that the hypothesis &lt;g6&gt;h : n ≠ 0&lt;/g6&gt; becomes &lt;g7&gt;h : 0 ≠ 0&lt;/g7&gt;
in the first branch, and &lt;g8&gt;h : succ m ≠ 0&lt;/g8&gt; in the second.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164821Z" creationid="tlqk3" creationdate="20220527T164821Z">
        <seg>아래 예제에서 가정 &lt;g6&gt;h : n ≠ 0&lt;/g6&gt;이  첫 분기에서 &lt;g7&gt;h : 0 ≠ 0&lt;/g7&gt;이 되고 두 번째 분기에서 &lt;g8&gt;h : succ m ≠ 0&lt;/g8&gt;이 됨을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above we set the option &lt;g1&gt;codegen&lt;/g1&gt; to false because the code
generator currently does not support &lt;g2&gt;WellFounded.fix&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T170134Z" creationid="tlqk3" creationdate="20220603T170134Z">
        <seg>위의 예제에서 우리는 옵션 &lt;g1&gt;codegen&lt;/g1&gt;이 실패하도록 설정했습니다. 왜냐하면 코드 생성기는 현재  &lt;g2&gt;WellFounded.fix&lt;/g2&gt;를 지원하지 않기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above,
it created the declaration &lt;g2&gt;replicate.loop&lt;/g2&gt; for the &lt;g3&gt;let rec loop&lt;/g3&gt; occurring at &lt;g4&gt;replicate&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182104Z" creationid="tlqk3" creationdate="20220603T182104Z">
        <seg>위 예제에서 &lt;g4&gt;replicate&lt;/g4&gt;에서 생긴 &lt;g3&gt;let rec loop&lt;/g3&gt;에 대해 &lt;g2&gt;replicate.loop&lt;/g2&gt; 선언을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, &lt;g2&gt;def m : Nat := 1&lt;/g2&gt;
defines a new constant &lt;g3&gt;m&lt;/g3&gt; of type &lt;g4&gt;Nat&lt;/g4&gt; whose value is &lt;g5&gt;1&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135810Z" creationid="tlqk35" creationdate="20220321T135810Z">
        <seg>위 예제에서 &lt;g2&gt;def m : Nat := 1&lt;/g2&gt;는 &lt;g5&gt;1&lt;/g5&gt;을 값으로 갖는 새로운 상수 &lt;g3&gt;m&lt;/g3&gt;을 &lt;g4&gt;Nat&lt;/g4&gt;유형으로 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, the command &lt;g2&gt;apply And.intro&lt;/g2&gt; yields two
subgoals:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184640Z" creationid="tlqk35" creationdate="20220321T184640Z">
        <seg>위의 예에서 &lt;g2&gt;apply And.intro&lt;/g2&gt; 명령은 두 하위 목표를 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, the first use of &lt;g1&gt;rw&lt;/g1&gt; replaces &lt;g2&gt;k&lt;/g2&gt; with
&lt;g3&gt;0&lt;/g3&gt; in the goal &lt;g4&gt;f k = 0&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113711Z" creationid="tlqk35" creationdate="20220524T154134Z">
        <seg>다음 예제에서 &lt;g1&gt;rw&lt;/g1&gt;의 첫 번째 사용은 목표 &lt;g4&gt;f k = 0&lt;/g4&gt;에서 
&lt;g2&gt;k&lt;/g2&gt;를 &lt;g3&gt;0&lt;/g3&gt;으로 바꿉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, the inaccessible annotation makes it clear that
&lt;g1&gt;f&lt;/g1&gt; is &lt;g2&gt;not&lt;/g2&gt; a pattern matching variable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T145048Z" creationid="tlqk3" creationdate="20220604T145048Z">
        <seg>위 예제에서 접근불가 주석은 &lt;g1&gt;f&lt;/g1&gt;가 패턴 매칭 변수가 &lt;g2&gt;아님&lt;/g2&gt;을 명확히 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the example above, we defined two instances.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164131Z" creationid="tlqk3" creationdate="20220604T164131Z">
        <seg>위의 예제에서 우리는 두 개체를 정의 했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the examples below, the minus sign and
&lt;g4&gt;only&lt;/g4&gt; are used to block the application of &lt;g5&gt;reverse_mk_symm&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T130411Z" creationid="tlqk35" creationdate="20220524T170337Z">
        <seg>아래 예제에서 음의 부호와 &lt;g4&gt;only&lt;/g4&gt;는 &lt;g5&gt;reverse_mk_symm&lt;/g5&gt;의 
적용을 막는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the examples below, we will henceforth use
Lean's version of the natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160748Z" creationid="tlqk3" creationdate="20220527T160748Z">
        <seg>아래 예제에서 우리는 이후부터 자연수의 린 버전을 사용할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the examples, we have
also made use of additional types like &lt;g3&gt;Bool&lt;/g3&gt;, &lt;g4&gt;Nat&lt;/g4&gt;, and &lt;g5&gt;Int&lt;/g5&gt;,
and type constructors, like &lt;g6&gt;List&lt;/g6&gt;, and product, &lt;g7&gt;×&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T141922Z" creationid="tlqk3" creationdate="20220526T141922Z">
        <seg>예제에서 우리는 &lt;g3&gt;Bool&lt;/g3&gt;, &lt;g4&gt;Nat&lt;/g4&gt;, and &lt;g5&gt;Int&lt;/g5&gt; 같은 추가 유형과 유형 생성자 &lt;g6&gt;List&lt;/g6&gt;과 product, &lt;g7&gt;×&lt;/g7&gt;의 사용을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the exercises below, we encourage you to prove as many
as you can.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072813Z" creationid="tlqk35" creationdate="20220321T183126Z">
        <seg>아래 연습 문제를 가능한 많이 증명해보길 권합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the exercises below, you are asked to spell out the details.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T165514Z" creationid="tlqk35" creationdate="20220528T165514Z">
        <seg>아래 연습에서 여러분은 세부 사항을 말하도록 요청받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the exposition below, we will slip back and forth between these two
ways of talking, at times saying that an expression "constructs" or
"produces" or "returns" a proof of a proposition, and at other times
simply saying that it "is" such a proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114055Z" creationid="tlqk35" creationdate="20220321T160439Z">
        <seg>아래의 설명에서 우리는 이 두 말하기 방식 사이를 왔다갔다 할 것인데, 어떤 때에는 명제의 증명을 "구성" 또는 "생성", "반환"으로 표현해 말하고 또 다른 때에는 단순히 그런 증명이 "있다"고 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the expression &lt;g8&gt;Or.elim hpq hpr hqr&lt;/g8&gt;, &lt;g9&gt;Or.elim&lt;/g9&gt;
takes three arguments, &lt;g10&gt;hpq : p ∨ q&lt;/g10&gt;, &lt;g11&gt;hpr : p → r&lt;/g11&gt; and
&lt;g12&gt;hqr : q → r&lt;/g12&gt;, and produces a proof of &lt;g13&gt;r&lt;/g13&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T153747Z" creationid="tlqk35" creationdate="20220321T163854Z">
        <seg>표현식 &lt;g8&gt;Or.elim hpq hpr hqr&lt;/g8&gt;에서 &lt;g9&gt;Or.elim&lt;/g9&gt;은 세 인수 &lt;g10&gt;hpq : p ∨ q&lt;/g10&gt;와 &lt;g11&gt;hpr : p → r&lt;/g11&gt;, &lt;g12&gt;hqr : q → r&lt;/g12&gt;를 받습니다. 그리고 &lt;g13&gt;r&lt;/g13&gt;의 증명을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the first
case, we simply specify a target value with the appropriate type, as
before.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155051Z" creationid="tlqk3" creationdate="20220527T155051Z">
        <seg>첫 번째 경우에서 우리는 단순히 이전처럼 적절한 유형으로 대상 값을 명시할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the first branch, we have the hypothesis &lt;g3&gt;h₁ : m &lt; n&lt;/g3&gt;, and
in the second we have the hypothesis &lt;g4&gt;h₂ : m ≥ n&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T171044Z" creationid="tlqk3" creationdate="20220527T171044Z">
        <seg>첫 분기에서 우리는 가정 &lt;g3&gt;h₁ : m &lt; n&lt;/g3&gt;을 갖고 두 번째에서 우리는 가정 &lt;g4&gt;h₂ : m ≥ n&lt;/g4&gt;을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the first case, the function returns &lt;g4&gt;2 * n&lt;/g4&gt;, and the second
case, it returns &lt;g5&gt;2 * n + 1&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160531Z" creationid="tlqk3" creationdate="20220526T155243Z">
        <seg>첫 번째 경우는 함수는 &lt;g4&gt;2 * n&lt;/g4&gt;을 반환하고 두 번째 경우는 &lt;g5&gt;2 * n + 1&lt;/g5&gt;을 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the first example above, the first step rewrites &lt;g1&gt;a + b + c&lt;/g1&gt; to
&lt;g2&gt;a + (b + c)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T115231Z" creationid="tlqk35" creationdate="20220524T155458Z">
        <seg>위의 첫 예제에서 첫 단계는 &lt;g1&gt;a + b + c&lt;/g1&gt;을 &lt;g2&gt;a + (b + c)&lt;/g2&gt;으로 재작성 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the first example, the left branch succeeds, whereas in the second one, it is the right one that succeeds.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111541Z" creationid="tlqk35" creationdate="20220524T150808Z">
        <seg>첫 예제에서 왼쪽 분기는 성공했습니다. 반면 두 번째에서 성공한 것은 오른쪽의 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the first example, the left-hand side of the equality in the goal
is simplified using the usual identities involving 0 and 1, reducing
the goal to &lt;g1&gt;x * y = x * y&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120929Z" creationid="tlqk35" creationdate="20220524T161117Z">
        <seg>첫 예제에서 목표를  &lt;g1&gt;x * y = x * y&lt;/g1&gt;으로 축약하면서 
목표 속 등식의 좌변은 0과 1을 포함한 평범한 항등식을 사용해 단순화됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the first expression, you should think of every instance
of &lt;g3&gt;a&lt;/g3&gt; in &lt;g4&gt;t2&lt;/g4&gt; as a syntactic abbreviation for &lt;g5&gt;t1&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144938Z" creationid="tlqk35" creationdate="20220321T144938Z">
        <seg>첫 번째 표현식에서, 여러분은 &lt;g4&gt;t2&lt;/g4&gt;속 &lt;g3&gt;a&lt;/g3&gt;의 모든 개체를 &lt;g5&gt;t1&lt;/g5&gt;에 대한 문법적 약어로 생각해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, the tactic &lt;g2&gt;rename_i h1 _ h2&lt;/g2&gt; renames two of the last three hypotheses in
your context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090741Z" creationid="tlqk35" creationdate="20220522T063649Z">
        <seg>다음 예제에서 &lt;g2&gt;rename_i h1 _ h2&lt;/g2&gt; 전략은 맥락 속  마지막 세 가정 중 두 개의 이름을 바꿉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, two different lambda expressions are created.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140358Z" creationid="tlqk3" creationdate="20220526T140358Z">
        <seg>다음 예제에서 다른 두 가지 람다 표현식이 만들어집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, we
use this basic form to rewrite the goal using a hypothesis.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113630Z" creationid="tlqk35" creationdate="20220524T154032Z">
        <seg>다음 예제에서 우리는 이 기본 형태를 가정을 사용하여 목표를 재작성하는 데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, we define &lt;g1&gt;even a&lt;/g1&gt; as &lt;g2&gt;∃ b, a = 2*b&lt;/g2&gt;,
and then we show that the sum of two even numbers is an even number.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T093125Z" creationid="tlqk35" creationdate="20220321T182926Z">
        <seg>다음 예제에서 우리는 &lt;g1&gt;is_even a&lt;/g1&gt;를 &lt;g2&gt;∃ b, a = 2*b&lt;/g2&gt;와 같이 정의합니다. 그런 뒤 두 짝수의 합이 짝수임을 보일 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, we define the notation &lt;g1&gt;triv&lt;/g1&gt; using the command &lt;g2&gt;syntax&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T130635Z" creationid="tlqk35" creationdate="20220524T170454Z">
        <seg>다음 에제에서 우리는&lt;g1&gt;triv&lt;/g1&gt;기호를 &lt;g2&gt;syntax&lt;/g2&gt; 명령을 사용해 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, we prove &lt;g2&gt;symm&lt;/g2&gt; and leave as exercise the theorems &lt;g3&gt;trans&lt;/g3&gt; and &lt;g4&gt;congr&lt;/g4&gt; (congruence).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154919Z" creationid="tlqk35" creationdate="20220528T154755Z">
        <seg>다음 예제에서 우리는&lt;g2&gt;symm&lt;/g2&gt;을 증명합니다. 그리고 정리 &lt;g3&gt;trans&lt;/g3&gt;과 &lt;g4&gt;congr&lt;/g4&gt; (적합, congruence)을 연습으로 남겨놓겠습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, we use
&lt;g14&gt;Or.elim&lt;/g14&gt; to prove &lt;g15&gt;p ∨ q → q ∨ p&lt;/g15&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T153819Z" creationid="tlqk35" creationdate="20220321T163917Z">
        <seg>다음 예제에서 &lt;g14&gt;Or.elim&lt;/g14&gt;로 &lt;g15&gt;p ∨ q → q ∨ p&lt;/g15&gt;을 증명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, we use &lt;g2&gt;rw [h] at t&lt;/g2&gt; to rewrite the hypothesis &lt;g3&gt;t : Tuple α n&lt;/g3&gt; to &lt;g4&gt;t : Tuple α 0&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120239Z" creationid="tlqk35" creationdate="20220524T160542Z">
        <seg>다음 예제에서 우리는 가정 &lt;g3&gt;t : Tuple α n&lt;/g3&gt;를 &lt;g4&gt;t : Tuple α 0&lt;/g4&gt;으로 재작성하도록 &lt;g2&gt;rw [h] at t&lt;/g2&gt;를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following example, we use output parameters to define a &lt;g3&gt;heterogeneous&lt;/g3&gt; polymorphic
multiplication.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163825Z" creationid="tlqk3" creationdate="20220604T163825Z">
        <seg>다음 예제에서 우리는 출력 매개변수를 &lt;g3&gt;이질적인&lt;/g3&gt; 다형적 곱셈을 정의하는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the following examples, we illustrate the interaction between named
and default arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T141010Z" creationid="tlqk3" creationdate="20220526T141010Z">
        <seg>다음 예제에서 우리는 이름 지어진 것과 기본 인자 사이의 상호작용을 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the last &lt;g4&gt;#eval&lt;/g4&gt;, note that the instance was used twice on an array of arrays.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164525Z" creationid="tlqk3" creationdate="20220604T164525Z">
        <seg>지난 &lt;g4&gt;#eval&lt;/g4&gt;에서 배열의 배열에 대해 개체가 두 번 사용되었음을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the last chapter we observed that lambda abstraction can be viewed
as an "introduction rule" for &lt;g1&gt;→&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T123710Z" creationid="tlqk35" creationdate="20220321T162419Z">
        <seg>지난 장에서 람다 추상화가 &lt;g1&gt;→&lt;/g1&gt;에 대한 "도입 규칙"이라고 봤습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the latter case, let us say that (the type associated
with) &lt;g5&gt;p&lt;/g5&gt; is &lt;g6&gt;inhabited&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T110803Z" creationid="tlqk35" creationdate="20220321T160016Z">
        <seg>후자의 경우 (연관된 유형)&lt;g5&gt;p&lt;/g5&gt;은 &lt;g6&gt;머무른다(inhabited)&lt;/g6&gt;고 말합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the meanwhile, here we explain how to use it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T175424Z" creationid="tlqk35" creationdate="20220321T175424Z">
        <seg>한편, 여기서는 어떻게 그것을 사용할지 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the meanwhile, think about what is going on in
these examples.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153002Z" creationid="tlqk3" creationdate="20220526T153002Z">
        <seg>한편, 이 예제에서 무슨 일이 일어나는 건지 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next chapter, we will describe Lean's function definition
package, which provides even more convenient ways to define functions
on inductive types and carry out inductive proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151904Z" creationid="tlqk3" creationdate="20220526T144637Z">
        <seg>다음 장에서 우리는 린의 정의 패키지를 설명합니다. 이 패키지는 함수와 귀납형과 귀납 증명을 수행하는 심지어 더 편리한 방법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next chapter, you will learn how to define a function like
&lt;g1&gt;add&lt;/g1&gt; so that it works generically for elements of &lt;g2&gt;Point α&lt;/g2&gt;
rather than just &lt;g3&gt;Point Nat&lt;/g3&gt;, assuming &lt;g4&gt;α&lt;/g4&gt; has an associated
addition operation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T180228Z" creationid="tlqk35" creationdate="20220528T180228Z">
        <seg>다음 장에서 여러분은 &lt;g1&gt;add&lt;/g1&gt;같은 함수를 어떻게 정의하는지 배울 것입니다. 그래서 그저 &lt;g3&gt;Point Nat&lt;/g3&gt;보다는 &lt;g2&gt;Point α&lt;/g2&gt;의 원소에 대해 일반적으로 동작하도록 할 것입니다. 여기서 &lt;g4&gt;α&lt;/g4&gt;는 덧셈 연산과 연관이 있다고 가정합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example we
use &lt;g7&gt;And.intro&lt;/g7&gt; to create a proof of &lt;g8&gt;p → q → p ∧ q&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162642Z" creationid="tlqk35" creationdate="20220321T162642Z">
        <seg>다음 예제에서 우리는 &lt;g7&gt;And.intro&lt;/g7&gt;를 &lt;g8&gt;p → q → p ∧ q&lt;/g8&gt;의 증명을 만들기 위해 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example, for example, we choose the name
&lt;g3&gt;m&lt;/g3&gt; for the argument to &lt;g4&gt;succ&lt;/g4&gt;, so that the second case refers to
&lt;g5&gt;succ m&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164451Z" creationid="tlqk3" creationdate="20220527T164451Z">
        <seg>다음 예제에서 예를들어 우리는 이름&lt;g3&gt;m&lt;/g3&gt;을 &lt;g4&gt;succ&lt;/g4&gt;에 대한 인수로 선택하여 두 번쨰 경우가 &lt;g5&gt;succ m&lt;/g5&gt;을 참조하도록 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example, the second
&lt;g8&gt;constructor&lt;/g8&gt; succeeds on the right conjunct &lt;g9&gt;q ∧ r&lt;/g9&gt; (remember that
disjunction and conjunction associate to the right) but fails on the
first.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112213Z" creationid="tlqk35" creationdate="20220524T151729Z">
        <seg>다음 예제에서 두 번째 &lt;g8&gt;constructor&lt;/g8&gt;는 논리곱 &lt;g9&gt;q ∧ r&lt;/g9&gt;의 오른쪽(논리합과 
논리곱은 오른쪽 결합성을 가짐을 기억하세요.)에서 성공합니다. 그러나 첫 번째에서는 실패합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next example, we define a structure using multiple inheritance,
and then define an object using objects of the parent structures.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T180616Z" creationid="tlqk35" creationdate="20220528T180616Z">
        <seg>다음 예제에서 우리는 다수의 상속을 사용한 구조체를 정의하고 그 후 부모 구조체의 대상을 사용하는 대상을 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next section, we will see that &lt;g1&gt;propext&lt;/g1&gt;, &lt;g2&gt;funext&lt;/g2&gt;, and
&lt;g3&gt;choice&lt;/g3&gt;, taken together, imply the law of the excluded middle and
the decidability of all propositions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184430Z" creationid="tlqk3" creationdate="20220610T184430Z">
        <seg>다음 섹션에서는 &lt;g1&gt;propext&lt;/g1&gt;, &lt;g2&gt;funext&lt;/g2&gt; 및 &lt;g3&gt;choice&lt;/g3&gt;가 함께 배중률과 모든 명제의 결정 가능성을 함의 한다는 것을 알 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next three examples, the same compound tactic succeeds in each case.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T150833Z" creationid="tlqk35" creationdate="20220524T150833Z">
        <seg>다음 세 예제에서 동일한 복합 전략은 각 경우에서 성공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the next three sections, we will describe,
respectively:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170420Z" creationid="tlqk3" creationdate="20220529T170420Z">
        <seg>다음 세 섹션에서 우리는 개별적으로 설명할 예정입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the nineteenth century, however, increases in the complexity of
mathematical arguments pushed mathematicians to develop new styles of
reasoning that suppress algorithmic information and invoke
descriptions of mathematical objects that abstract away the details of
how those objects are represented.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T165019Z" creationid="tlqk3" creationdate="20220605T165019Z">
        <seg>그러나 19세기에 수학적 논쟁의 복잡성이 증가함에 따라 수학자들은 알고리즘적 정보를 억제하고 어떻게 이 대상이 표현되는지에 대한 상세함을 추상화시키고 수학적 대상의 설명을 일으키는 새로운 형식의 논리를 만들도록 몰아붙였습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the previous chapter, we saw that inductive definitions provide a
powerful means of introducing new types in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T155925Z" creationid="tlqk3" creationdate="20220529T155925Z">
        <seg>이전 장에서 우리는 귀납적 정의가 린의 새 유형을 도입하는 강력한 수단을 제공함을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the previous section, we have shown how implicit arguments make functions more convenient to use.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134206Z" creationid="tlqk3" creationdate="20220526T134206Z">
        <seg>이전 섹션에서 우리는 어떻게 암시적인 인자가 함수를 쓰기 더 편리하게 만드는지 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the propositions-as-types paradigm, theorems involving only &lt;g1&gt;→&lt;/g1&gt;
can be proved using lambda abstraction and application.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114608Z" creationid="tlqk35" creationdate="20220321T160637Z">
        <seg>유형으로써 명제 패러다임에서 &lt;g1&gt;→&lt;/g1&gt;만을 포함하는 정리는 람다 추상화와 적용으로 증명될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the second case, however, the recursor can assume that a
value of &lt;g10&gt;f&lt;/g10&gt; at &lt;g11&gt;n&lt;/g11&gt; has already been computed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155129Z" creationid="tlqk3" creationdate="20220527T155129Z">
        <seg>그러나 두 번째 경우에서 재귀자는 &lt;g11&gt;n&lt;/g11&gt;에서 &lt;g10&gt;f&lt;/g10&gt;의 값이 이미 계산되었음을 가정합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the second example, &lt;g3&gt;simp&lt;/g3&gt; reduces
the goal to &lt;g4&gt;p (x * y)&lt;/g4&gt;, at which point the assumption &lt;g5&gt;h&lt;/g5&gt;
finishes it off.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T121034Z" creationid="tlqk35" creationdate="20220524T161353Z">
        <seg>두 번째 예제에서 &lt;g3&gt;simp&lt;/g3&gt;는 목표를 &lt;g4&gt;p (x * y)&lt;/g4&gt;으로 축약합니다.
이 때, 가정 &lt;g5&gt;h&lt;/g5&gt;가 이 목표를 끝냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the second pair of examples below, this mechanism is
used to specify the desired types of the expressions &lt;g6&gt;id&lt;/g6&gt; and
&lt;g7&gt;List.nil&lt;/g7&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153603Z" creationid="tlqk35" creationdate="20220321T153603Z">
        <seg>아래 예제의 쌍의 두 번째에서, 이 메커니즘은 식 &lt;g6&gt;id&lt;/g6&gt;와 &lt;g7&gt;List.nil&lt;/g7&gt;의 바람직한 유형을 명시하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the second presentation, the patterns overlap; for example, the
pair of arguments &lt;g1&gt;0 0&lt;/g1&gt; matches all three cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164755Z" creationid="tlqk3" creationdate="20220529T164755Z">
        <seg>두 번째 나타남에서 패턴은 겹칩니다. 예를 들어 인수의 쌍 &lt;g1&gt;0 0&lt;/g1&gt;은 세 경우 모두 일치합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the section after next we will see what happens when the
constructor of an inductive type takes arguments from the inductive
type itself.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152021Z" creationid="tlqk3" creationdate="20220526T155651Z">
        <seg>이 섹션 다음에 우리는 귀납형의 생성자가 자기 자신의 귀납형으로부터 인수를 받을 때 무슨 일이 생기는지 알아볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the semantics of dependent type theory, there is no built-in notion
of a partial function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T150031Z" creationid="tlqk3" creationdate="20220527T150031Z">
        <seg>의존 유형론의 의미론에서 부분 함수의 내장 개념은 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the standard library, &lt;g1&gt;Decidable&lt;/g1&gt; is defined formally as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172138Z" creationid="tlqk3" creationdate="20220604T172103Z">
        <seg>표준 라이브러리에서 &lt;g1&gt;Decidable&lt;/g1&gt;은 다음과 같이 형식적으로 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the type theory literature, there are further generalizations of
inductive definitions, for example, the principles of
&lt;g1&gt;induction-recursion&lt;/g1&gt; and &lt;g2&gt;induction-induction&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T155053Z" creationid="tlqk35" creationdate="20220528T155053Z">
        <seg>유형론 교재에서는 재귀적 정의의 더 일반화 예를 들어 &lt;g1&gt;induction-recursion&lt;/g1&gt;과 &lt;g2&gt;induction-induction&lt;/g2&gt;의 원리가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In these languages, the interpreter produces an exception
or returns an arbitrary value for incomplete cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165322Z" creationid="tlqk3" creationdate="20220529T165322Z">
        <seg>이 언어들에서 인터프리터는 예외을 만들거나 불완전한 경우에 대한 임의의 값을 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this
case, we may be tempted to reduce the expression to &lt;g10&gt;0&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175154Z" creationid="tlqk3" creationdate="20220605T175154Z">
        <seg>이 경우 식을 &lt;g10&gt;0&lt;/g10&gt;으로 줄이고 싶을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this
chapter, we consider ways of extending the CIC with additional axioms
and rules.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T160522Z" creationid="tlqk3" creationdate="20220605T160522Z">
        <seg>이 장에서 추가 공리와 규칙을 사용해 CIC를 확장하는 방벙을 고려합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this
section and the next, we discuss them in greater detail.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113308Z" creationid="tlqk35" creationdate="20220524T153301Z">
        <seg>이 섹션과 다음 섹션에서 우리는 이들에 대해 더 자세히 논의할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case you can think of &lt;g1&gt;def&lt;/g1&gt; as a kind of named &lt;g2&gt;lambda&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144029Z" creationid="tlqk35" creationdate="20220321T144029Z">
        <seg>이 경우 여러분은 &lt;g1&gt;def&lt;/g1&gt;를 &lt;g2&gt;lambda&lt;/g2&gt;와 같은 종류로 생각할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, detecting the
possibility of well-founded recursion on the natural numbers, it uses
the usual lexicographic ordering on the pair &lt;g1&gt;(x, y)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172039Z" creationid="tlqk3" creationdate="20220603T172039Z">
        <seg>이 경우 자연수에 대한 잘 세워진 재귀의 가능성을 감지하여 순서쌍 &lt;g1&gt;(x, y)&lt;/g1&gt;에 대해 평범한 사전적 순서를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, each can be used to reduce the proof to:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164208Z" creationid="tlqk3" creationdate="20220527T161300Z">
        <seg>여기서 각각은 증명을 다음과 같이 간단히 하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, the &lt;g1&gt;any_goals&lt;/g1&gt; tactic provides a more robust solution.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112821Z" creationid="tlqk35" creationdate="20220524T152345Z">
        <seg>이 경우에 &lt;g1&gt;any_goals&lt;/g1&gt; 전략은 더 강건한 답을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter,
we extend the repertoire of logical constructions to include the
universal and existential quantifiers, and the equality relation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T060727Z" creationid="tlqk35" creationdate="20220321T172553Z">
        <seg>이번 장에서는 우리는 전칭과 존재 한정기호와 동등 관계를 포함한 논리 구성 목록를 확장합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter, we describe an alternative approach to constructing
proofs, using &lt;g1&gt;tactics&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T075703Z" creationid="tlqk35" creationdate="20220321T184252Z">
        <seg>이 장에서는 &lt;g1&gt;전략&lt;/g1&gt;을 사용하여 증명을 구성하는 다른 접근 방식을 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter, we will begin to explain how to write
mathematical assertions and proofs in the language of dependent type
theory as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T102113Z" creationid="tlqk35" creationdate="20220321T154806Z">
        <seg>이 장에서 여러분에게 의존 유형론의 언어로 수학적 주장과 증명을 작성하는 법에 대해 설명하려고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the &lt;g1&gt;admit&lt;/g1&gt; tactic is the analogue of the &lt;g2&gt;sorry&lt;/g2&gt;
proof term.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T065339Z" creationid="tlqk35" creationdate="20220522T065339Z">
        <seg>이 예제에서 &lt;g1&gt;admit&lt;/g1&gt; 전략은 증명항 &lt;g2&gt;sorry&lt;/g2&gt;와 유사합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, the term &lt;g1&gt;←h₁&lt;/g1&gt; instructs the rewriter to replace
&lt;g2&gt;b&lt;/g2&gt; with &lt;g3&gt;a&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114358Z" creationid="tlqk35" creationdate="20220524T155024Z">
        <seg>이 예제에서 항 &lt;g1&gt;←h₁&lt;/g1&gt;은 &lt;g2&gt;b&lt;/g2&gt;를 &lt;g3&gt;a&lt;/g3&gt;로 대체하도록 재작성기에게 지시합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, there is only one goal after the &lt;g1&gt;cases&lt;/g1&gt; tactic is
applied, with &lt;g2&gt;h : p ∧ q&lt;/g2&gt; replaced by a pair of assumptions,
&lt;g3&gt;hp : p&lt;/g3&gt; and &lt;g4&gt;hq : q&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T093853Z" creationid="tlqk35" creationdate="20220522T071237Z">
        <seg>이 예제에서, 한 쌍의 가정 &lt;g3&gt;hp : p&lt;/g3&gt;과 &lt;g4&gt;hq : q&lt;/g4&gt;로 &lt;g2&gt;h : p ∧ q&lt;/g2&gt;가 대체되어 
&lt;g1&gt;cases&lt;/g1&gt; 전략이 적용된 뒤에는 한 목표만 남습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, two types are defined simultaneously: a natural
number &lt;g1&gt;n&lt;/g1&gt; is &lt;g2&gt;Even&lt;/g2&gt; if it is &lt;g3&gt;0&lt;/g3&gt; or one more than an &lt;g4&gt;Odd&lt;/g4&gt;
number, and &lt;g5&gt;Odd&lt;/g5&gt; if it is one more than an &lt;g6&gt;Even&lt;/g6&gt; number.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T165452Z" creationid="tlqk35" creationdate="20220528T165452Z">
        <seg>이 예제에서 두 유형은 동시에 정의되었습니다.. 자연수 &lt;g1&gt;n&lt;/g1&gt;은 만약 이것이 &lt;g3&gt;0&lt;/g3&gt; 혹은 &lt;g4&gt;홀수(Odd)&lt;/g4&gt;보다 하나 크면&lt;g2&gt;짝수(Even)&lt;/g2&gt;입니다. 그리고 &lt;g5&gt;홀수(Odd)&lt;/g5&gt;는 &lt;g6&gt;짝수(Even)&lt;/g6&gt;보다 하나 큰 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this section, we describe some means that help provide
structure to a tactic-style proof, making such proofs more readable
and robust.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104652Z" creationid="tlqk35" creationdate="20220524T142740Z">
        <seg>이 섹션은 더욱 가독성있고 강건한 전략 스타일의 증명을 구조화하여
만드는 데 도움을 주는 몇 가지 방식을 설명할 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this section, we discuss some
additional features of the proof language that are often convenient.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183301Z" creationid="tlqk35" creationdate="20220321T183301Z">
        <seg>이 섹션에서는 종종 편리한 증명 언어의 몇 가지 추가적인 기능에 대해 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this section, we will deal with &lt;g4&gt;structural recursion&lt;/g4&gt;, in
which the arguments to &lt;g5&gt;foo&lt;/g5&gt; occurring on the right-hand side of the
&lt;g6&gt;:=&lt;/g6&gt; are subterms of the patterns on the left-hand side.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T172050Z" creationid="tlqk3" creationdate="20220529T172050Z">
        <seg>이 섹션에서 우리는 &lt;g4&gt;구조적 재귀&lt;/g4&gt;를 다룰 예정입니다. 여기서 &lt;g5&gt;foo&lt;/g5&gt;에 대한 인수는 좌변에 대한 패턴의 부분항인 &lt;g6&gt;:=&lt;/g6&gt;의 우변에서 나타납니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this section, we will describe and explain
the various extension points.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T120110Z" creationid="tlqk3" creationdate="20220526T120110Z">
        <seg>이 섹션에서 우리는 다양한 확장성에 대해 보여주고 설명할 예정입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In type theory it is common to say &lt;g2&gt;motive&lt;/g2&gt; is the &lt;g3&gt;motive&lt;/g3&gt; for the elimination/recursion,
since it describes the kind of object we wish to construct.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155531Z" creationid="tlqk3" creationdate="20220527T155531Z">
        <seg>유형론에서 &lt;g2&gt;motive&lt;/g2&gt;가 제거/재귀에 대한 &lt;g3&gt;motive&lt;/g3&gt;다 라고 흔히 말합니다. 왜냐하면 이는 우리가 생성하고자 하는 대산의 종류를 설명하기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In type theory, this is generally more convenient than
writing &lt;g10&gt;Nat.add&lt;/g10&gt; as a function that takes a pair of natural numbers as
input and returns a natural number as output.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140842Z" creationid="tlqk35" creationdate="20220321T140842Z">
        <seg>유형론에서 보통 &lt;g10&gt;Nat.add&lt;/g10&gt;과 같이 쓰는 것이 자연수 쌍을 입력으로 받고 자연수를 출력으로 하는 함수로 쓰는 것보다 더 편리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inaccessible Patterns</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183215Z" creationid="tlqk3" creationdate="20220603T183215Z">
        <seg>접근할 수 없는 패턴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inaccessible patterns can be used to clarify and control definitions that
make use of dependent pattern matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T145319Z" creationid="tlqk3" creationdate="20220604T145319Z">
        <seg>접근불가한 패턴은 명확성과 종속 패턴 매칭을 활용하는 정의 제어를 위해 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Incidentally, just as &lt;g1&gt;False&lt;/g1&gt; has only an elimination rule, &lt;g2&gt;True&lt;/g2&gt;
has only an introduction rule, &lt;g3&gt;True.intro : true&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164549Z" creationid="tlqk35" creationdate="20220321T164549Z">
        <seg>참고로 &lt;g1&gt;False&lt;/g1&gt;은 제거 규칙만 있듯이 &lt;g2&gt;True&lt;/g2&gt;는 도입 규칙 &lt;g3&gt;True.intro : true&lt;/g3&gt;만 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indeed,
it is the "failure" state that causes the &lt;g1&gt;first&lt;/g1&gt; combinator to
backtrack and try the next tactic.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111842Z" creationid="tlqk35" creationdate="20220524T151249Z">
        <seg>당연히, "실패" 상태는 &lt;g1&gt;first&lt;/g1&gt; 조합자가 되돌아와 다음 전략을 시도하도록 야기합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indeed, &lt;g7&gt;r'&lt;/g7&gt; is the &lt;g8&gt;kernel&lt;/g8&gt; of the function
&lt;g9&gt;a ↦ quot.mk r a&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T184036Z" creationid="tlqk3" creationdate="20220605T184036Z">
        <seg>실제로 &lt;g7&gt;r'&lt;/g7&gt;은 함수 &lt;g9&gt;a ↦ quot.mk r a&lt;/g9&gt;의 &lt;g8&gt;커널&lt;/g8&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indeed, if &lt;g1&gt;p : Prop&lt;/g1&gt; is any proposition, Lean's kernel treats any
two elements &lt;g2&gt;t1 t2 : p&lt;/g2&gt; as being definitionally equal, much the
same way as it treats &lt;g3&gt;(fun x =&gt; t) s&lt;/g3&gt; and &lt;g4&gt;t[s/x]&lt;/g4&gt; as
definitionally equal.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T111433Z" creationid="tlqk35" creationdate="20220321T160239Z">
        <seg>물론 &lt;g1&gt;p : Prop&lt;/g1&gt;가 어떤 명제라면, 린의 커널은 임의의 두 원소 &lt;g2&gt;t1 t2 : p &lt;/g2&gt;을 &lt;g3&gt;(fun x = t) s&lt;/g3&gt;와 &lt;g4&gt;t[/x]&lt;/g4&gt;를 다루는 것과 마찬가지로 정의상으로 동등하다 취급합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indeed, if you replace the "sorry" by an underscore in the example
above, Lean will report that it is exactly this goal that has been
left unsolved.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T083145Z" creationid="tlqk35" creationdate="20220321T184450Z">
        <seg>실제로 위의 예에서 "sorry"를 밑줄로 바꾸면 린은 이 목표가 해결되지 않은 것으로 보고합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indeed, in dependent type theory (and in Lean), &lt;g11&gt;α → β&lt;/g11&gt;
is just notation for &lt;g12&gt;(a : α) → β&lt;/g12&gt; when &lt;g13&gt;β&lt;/g13&gt; does not depend on &lt;g14&gt;a&lt;/g14&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152055Z" creationid="tlqk35" creationdate="20220321T152055Z">
        <seg>물론, 종속 유형론에서(그리고 Lean에서) &lt;g11&gt;α → β&lt;/g11&gt;는 &lt;g13&gt;β&lt;/g13&gt;가 &lt;g14&gt;a&lt;/g14&gt;에 의존하지 않을 때 &lt;g12&gt;(a : α) → β&lt;/g12&gt;에 대한 표기일 뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Indeed, it would defeat most of the potential benefits of ad-hoc
polymorphism.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153655Z" creationid="tlqk3" creationdate="20220604T153655Z">
        <seg>물론 이는 특수 목적 다형성의 잠재적 이점의 대부분을 좌절시킬 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Induction and Recursion</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T155833Z" creationid="tlqk3" creationdate="20220529T155833Z">
        <seg>귀납과 재귀</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inductive Families</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152503Z" creationid="tlqk3" creationdate="20220527T173226Z">
        <seg>귀납군</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inductive Types</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151746Z" creationid="tlqk3" creationdate="20220526T141517Z">
        <seg>귀납형</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inductive types and dependent function types
can be viewed as data types, and terms of these types can be
"evaluated" by applying reduction rules until no more rules can be
applied.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171423Z" creationid="tlqk3" creationdate="20220605T171423Z">
        <seg>귀납형과 의존 함수 유형은 데이터 유형으로 볼 수 있고, 이들 유형의 항은 더 이상 적용할 규칙이 없을 때까지 제거 규칙을 적용함으로써 "평가"될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inductively Defined Propositions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151402Z" creationid="tlqk3" creationdate="20220527T151402Z">
        <seg>귀납적으로 정의된 명제</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inductively defined types can live in any type universe, including the
bottom-most one, &lt;g1&gt;Prop&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151511Z" creationid="tlqk3" creationdate="20220527T151511Z">
        <seg>귀납적으로 정의된 유형은 가장 바닥의 것인 &lt;g1&gt;Prop&lt;/g1&gt;을 포함하는 임의의 유형 세계에 살 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inferring this predicate therefore requires an instance
of &lt;g3&gt;higher-order unification&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T083246Z" creationid="tlqk35" creationdate="20220321T180055Z">
        <seg>따라서 이 술어를 추론하는 것은 &lt;g3&gt;고차 단일화(Higer-order unification)&lt;/g3&gt;의 인스턴스를 요구합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Informally, the
introduction rule states:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T061309Z" creationid="tlqk35" creationdate="20220321T172855Z">
        <seg>비형식적으로 도입 규칙은 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Informally, you might begin a
mathematical proof by saying "to prove the forward direction, unfold
the definition, apply the previous lemma, and simplify." Just as these
are instructions that tell the reader how to find the relevant proof,
tactics are instructions that tell Lean how to construct a proof
term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082415Z" creationid="tlqk35" creationdate="20220321T184307Z">
        <seg>비형식적으로 "앞 방향으로 증명하고, 정의를 펼치고, 이전 보조 정리를 적용하고, 단순화하라"고 말함으로써 수학 증명을 시작할 수 있습니다. 이것이 독자에게 연관된 증명을 찾는 법을 알려주는 지시사항인 것처럼 전략은 린에게 증명 항를 구성하는 법을 알려주는 지시사항입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Information as to how
the search path is determined can be found on the
&lt;g3&gt;documentation pages&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174257Z" creationid="tlqk35" creationdate="20220524T174257Z">
        <seg>어떻게 탐색경로가 결정되는지에 대한 정보는 &lt;g3&gt;documentation pages&lt;/g3&gt;에서 찾아볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inheritance</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T180657Z" creationid="tlqk35" creationdate="20220528T180657Z">
        <seg>상속(Inheritance)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inside a tactic block, one can use the keyword &lt;g1&gt;conv&lt;/g1&gt; to enter
conversion mode.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181847Z" creationid="tlqk3" creationdate="20220604T181847Z">
        <seg>전략 블록 안에서 &lt;g1&gt;conv&lt;/g1&gt; 키워드를 사용하여 전환 모드로 들어갈 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances
which are declared last are tried first.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181321Z" creationid="tlqk3" creationdate="20220604T181302Z">
        <seg>마지막에 선언된 개체가 가장 먼저 시도됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instances declared in
namespaces which are opened later are tried earlier.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181445Z" creationid="tlqk3" creationdate="20220604T181445Z">
        <seg>이름공간에 선언된 개체는 나중에 열린 것이 더 일찍 시도됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of &lt;g1&gt;zero&lt;/g1&gt; and &lt;g2&gt;succ&lt;/g2&gt;, we can use more familiar notation:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161323Z" creationid="tlqk3" creationdate="20220529T161323Z">
        <seg>&lt;g1&gt;zero&lt;/g1&gt;과 &lt;g2&gt;succ&lt;/g2&gt; 대신 우리는 더 친숙한 기호를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of a single
token, the &lt;g3&gt;notation&lt;/g3&gt; command accepts a mixed sequence of tokens and
named term placeholders with precedences, which can be referenced on
the right-hand side of &lt;g4&gt;=&gt;&lt;/g4&gt; and will be replaced by the respective
term parsed at that position.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122730Z" creationid="tlqk3" creationdate="20220526T122730Z">
        <seg>한 토큰 대신 &lt;g3&gt;notation&lt;/g3&gt; 명령은 토큰의 혼합된 열과 이름이 붙고 우선순위가 있는 항 자리차지자를 받아들입니다. 그리고 이는&lt;g4&gt;=&gt;&lt;/g4&gt;의 우변을 참조할 수 있고 그 위치에서 구문 분석된 개별적인 항으로 대체될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Instead of using &lt;g1&gt;sorry&lt;/g1&gt;, you can use
an underscore &lt;g2&gt;_&lt;/g2&gt; as a placeholder.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170429Z" creationid="tlqk35" creationdate="20220321T170429Z">
        <seg>&lt;g1&gt;sorry&lt;/g1&gt;를 사용하는 것 대신 밑줄 문자  &lt;g2&gt;_&lt;/g2&gt;를 자리 차지자로 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Interacting with Lean</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T172630Z" creationid="tlqk35" creationdate="20220524T172630Z">
        <seg>린과 상호작용하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Internally, the expression &lt;g1&gt;have h : p := s; t&lt;/g1&gt; produces the term
&lt;g2&gt;(fun (h : p) =&gt; t) s&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T165138Z" creationid="tlqk35" creationdate="20220321T165138Z">
        <seg>내부적으로 표현식 &lt;g1&gt;have h : p := s; t&lt;/g1&gt;은 항 &lt;g2&gt;(fun (h : p) =&gt; t) s&lt;/g2&gt;을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Introducing Auxiliary Subgoals</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T160510Z" creationid="tlqk35" creationdate="20220321T165041Z">
        <seg>보조적인 하위 목표 도입하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Introducing a proof-irrelevant &lt;g1&gt;Prop&lt;/g1&gt; and marking theorems
irreducible represents a first step towards separation of
concerns.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171642Z" creationid="tlqk3" creationdate="20220605T171642Z">
        <seg>증명에 무관한 &lt;g1&gt;Prop&lt;/g1&gt;을 도입하는 것과 정리가 축약 불가함을 표시하는 것은 문제의 분리를 위한 첫 단계를 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131051Z" creationid="tlqk35" creationdate="20220321T131051Z">
        <seg>소개(Introduction)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Intuitively,
&lt;g7&gt;Nat&lt;/g7&gt; is the "smallest" type with these constructors, meaning that
it is exhaustively (and freely) generated by starting with &lt;g8&gt;zero&lt;/g8&gt;
and applying &lt;g9&gt;succ&lt;/g9&gt; repeatedly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154629Z" creationid="tlqk3" creationdate="20220527T154629Z">
        <seg>직관적으로 &lt;g7&gt;Nat&lt;/g7&gt;은 이 생성자에서 "가장 작은" 유형입니다. &lt;g8&gt;zero&lt;/g8&gt;으로 시작하여 &lt;g9&gt;succ&lt;/g9&gt;를 반복적으로 적용함으로 남김없이 (그리고 자유롭게) 생성됨을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Intuitively, an inductive type is built up from a specified list of
constructors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151759Z" creationid="tlqk3" creationdate="20220526T142221Z">
        <seg>당연히 귀납형은 생성자의 명시된 리스트로부터 만들어집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Intuitively, our proof of
&lt;g3&gt;p → q → p&lt;/g3&gt; assumes &lt;g4&gt;p&lt;/g4&gt; and &lt;g5&gt;q&lt;/g5&gt; are true, and uses the first
hypothesis (trivially) to establish that the conclusion, &lt;g6&gt;p&lt;/g6&gt;, is
true.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114859Z" creationid="tlqk35" creationdate="20220321T160813Z">
        <seg>직관적으로  &lt;g3&gt;p → q → p&lt;/g3&gt;의 증명은 &lt;g4&gt;p&lt;/g4&gt;와 &lt;g5&gt;q&lt;/g5&gt;가 참이라고 가정합니다. 그리고 (뻔하게도) 첫 가정을 &lt;g6&gt;p&lt;/g6&gt;가 참이라는 결론을 입증하는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Intuitively, the constructive "Or" is very strong: asserting &lt;g1&gt;p ∨ q&lt;/g1&gt;
amounts to knowing which is the case.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T162341Z" creationid="tlqk35" creationdate="20220321T165726Z">
        <seg>직관적으로 구성주의적 "논리합"은 아주 강력합니다. &lt;g1&gt;p ∨ q&lt;/g1&gt;라 주장하는 것은 각 경우를 아는 것과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Intuitively, the only way to construct a proof of &lt;g8&gt;Eq a x&lt;/g8&gt;
is to use reflexivity, in the case where &lt;g9&gt;x&lt;/g9&gt; is &lt;g10&gt;a&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153855Z" creationid="tlqk35" creationdate="20220528T153855Z">
        <seg>직관적으로 &lt;g8&gt;Eq a x&lt;/g8&gt;의 증명을 생성하는 유일한 방법은 &lt;g9&gt;x&lt;/g9&gt;가 &lt;g10&gt;a&lt;/g10&gt;인 경우 반사성을 사용하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It
allows us to prove a proposition &lt;g3&gt;q&lt;/g3&gt; from &lt;g4&gt;∃ x : α, p x&lt;/g4&gt;, by
showing that &lt;g5&gt;q&lt;/g5&gt; follows from &lt;g6&gt;p w&lt;/g6&gt; for an arbitrary value
&lt;g7&gt;w&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T090927Z" creationid="tlqk35" creationdate="20220321T181249Z">
        <seg>임의의 값 &lt;g7&gt;w&lt;/g7&gt;에 대해 &lt;g6&gt;p w&lt;/g6&gt;라는 사실로부터 &lt;g5&gt;q&lt;/g5&gt;임을 보임으로써 &lt;g4&gt;∃ x : α, p x&lt;/g4&gt;으로부터 명제 &lt;g3&gt;q&lt;/g3&gt;를 증명하게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It accepts the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171635Z" creationid="tlqk3" creationdate="20220603T171635Z">
        <seg>이것은 다음을 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It allows you to
define a function by specifying equations that it should satisfy, and
it allows you to prove a theorem by specifying how to handle various
cases that can arise.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160321Z" creationid="tlqk3" creationdate="20220529T160321Z">
        <seg>이는 여러분이 그것이 만족해야 하는 방정식을 명시함으로써 함수를 정의하도록 해줍니다. 그리고 이것은 일어날 수 있는 다양한 경우를 어떻게 다뤄야 하는지 나타내줌으로써 여러분이 정리를 증명하게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also knows a number of ways of constructing new well
founded orders from others, for example, using lexicographic order.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T170430Z" creationid="tlqk3" creationdate="20220603T170430Z">
        <seg>이것도 다른 것으로부터 새로운 잘 세워진 순서를 생성하는 많은 방법을 알고 있습니다. 예를 들어 사전적 순서를 사용하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also makes proofs more readable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183644Z" creationid="tlqk35" creationdate="20220321T183644Z">
        <seg>또 이것은 증명을 더 가독성있게 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also uses other rules that have been previously declared to
the system, and applies commutativity wisely to avoid looping.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T085433Z" creationid="tlqk35" creationdate="20220321T180518Z">
        <seg>또 이것은 시스템 속 이전에 선언된 적 있는 다른 규칙도 사용합니다. 그리고 무한 루프를 현명하게 피하면서 교환성을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It asserts that when two propositions imply one another, they are
actually equal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173048Z" creationid="tlqk3" creationdate="20220605T173048Z">
        <seg>그것은 두 명제가 서로를 함의할 때 그들은 실제로 동등하다고 주장합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It can even combine different relations.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T065656Z" creationid="tlqk35" creationdate="20220321T180647Z">
        <seg>심지어 이것은 다른 관계와 혼합할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It closes the current goal, producing the usual warning
that &lt;g3&gt;sorry&lt;/g3&gt; has been used.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091958Z" creationid="tlqk35" creationdate="20220522T065446Z">
        <seg>이것은 현재 목표를 끝내고, &lt;g3&gt;sorry&lt;/g3&gt;를 사용했다는 경고를 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It determines
the necessary case splits from the patterns that are presented to it,
and raises an error if the patterns fail to exhaust the cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162407Z" creationid="tlqk3" creationdate="20220529T162226Z">
        <seg>이것은 그것에 제시된 패턴에 필요한 경우를 나누는 것을 결정하고, 패턴이 경우를 처리하는데 실패하면 오류를 발생시킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It does not affect the code generator which compiles recursive
functions as other functional programming language compilers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165033Z" creationid="tlqk3" creationdate="20220603T164937Z">
        <seg>다른 함수형 프로그래밍 언어의 컴파일러와 마찬가지로 이것은 재귀 함수를 컴파일하는 코드 생성기에 영향을 끼치지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It enables us to define the value of a dependent
function of type &lt;g6&gt;(n : Nat) → C n&lt;/g6&gt; at a particular input &lt;g7&gt;n&lt;/g7&gt; in terms of all the previous values of the function,
presented as an element of &lt;g8&gt;@Nat.below C n&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165017Z" creationid="tlqk3" creationdate="20220603T164635Z">
        <seg>이것은 &lt;g8&gt;@Nat.below C n&lt;/g8&gt;의 원소로 나타났던 함수의 모든 이전의 값들로 특정 입력 &lt;g7&gt;n&lt;/g7&gt;에 대해 &lt;g6&gt;(n : Nat) → C n&lt;/g6&gt;형의 종속함수의 값을 정의할 수 있게 해줍니다. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It falls outside the
strict specification of an inductive type given in the last section
because &lt;g2&gt;Tree&lt;/g2&gt; does not occur strictly positively among the
arguments to &lt;g3&gt;mk&lt;/g3&gt;, but, rather, nested inside the &lt;g4&gt;List&lt;/g4&gt; type
constructor.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152413Z" creationid="tlqk35" creationdate="20220528T170602Z">
        <seg>이것은 마지막 섹션에서 제시된 귀납형의 엄격한 명세를 바깥으로 빠져나옵니다. 왜냐하면 &lt;g2&gt;Tree&lt;/g2&gt;는 &lt;g3&gt;mk&lt;/g3&gt;에 대한 인수 사이에서 엄격하게 긍정적으로 일어나지 않고 대신  &lt;g4&gt;List&lt;/g4&gt;형 생성자의 중첩된 안쪽에서 일어나기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It has
the important property that every assertion respects the equivalence,
in the sense that we can substitute equal expressions without changing
the truth value.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T063519Z" creationid="tlqk35" creationdate="20220321T175710Z">
        <seg>같은 표현식들의 진리값을 바꾸지 않고 치환할 수 있다는 점에서 모든 주장이 동치를 준수한다는 중요한 성질을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It has a compiler that
generates a binary executable and an interactive interpreter.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143751Z" creationid="tlqk35" creationdate="20220321T143751Z">
        <seg>이것은 이진 실행 프로그램을 만드는 컴파일러와 상호작용적인 인터프리터를 갖고 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It has to handle two cases: the case where the input is &lt;g7&gt;zero&lt;/g7&gt;, and the case where
the input is of the form &lt;g8&gt;succ n&lt;/g8&gt; for some &lt;g9&gt;n : Nat&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155021Z" creationid="tlqk3" creationdate="20220527T155021Z">
        <seg>이것은 입력이 &lt;g7&gt;zero&lt;/g7&gt;인 경우와  입력이 어떤 &lt;g9&gt;n : Nat&lt;/g9&gt;에 대해 &lt;g8&gt;succ n&lt;/g8&gt; 꼴인 입력에 대한 경우 두가지를 다뤄야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It has type &lt;g2&gt;{α : Sort u} → [i : α] → α&lt;/g2&gt;,
and is useful for triggering the type class resolution procedure when the expected type is an instance.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161742Z" creationid="tlqk3" creationdate="20220604T161742Z">
        <seg>이것은 &lt;g2&gt;{α : Sort u} → [i : α] → α&lt;/g2&gt;형이고 예상 유형이 개체일 때 유형 클래스 해결 절차를 일으키는데 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is
certainly the case that two computer programs can compute the same
answer for every input despite the fact that they are syntactically
quite different.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173943Z" creationid="tlqk3" creationdate="20220605T173943Z">
        <seg>두 개의 컴퓨터 프로그램이 구문론적으로 상당히 다르다는 사실에도 불구하고 모든 입력에 대해 동일한 답을 계산할 수 있는 경우가 확실히 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is
equivalent to &lt;g6&gt;first | t | skip&lt;/g6&gt;, where &lt;g7&gt;skip&lt;/g7&gt; is a tactic that does
nothing (and succeeds in doing so).</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112106Z" creationid="tlqk35" creationdate="20220524T151558Z">
        <seg>이는 &lt;g6&gt;first | t | skip&lt;/g6&gt;과 동일합니다. 여기서 &lt;g7&gt;skip&lt;/g7&gt;은 
아무것도 하지 않는(그래서 그것의 실행은 성공하는) 전략입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is
needed in the following example because, from a constructive
standpoint, knowing that &lt;g1&gt;p&lt;/g1&gt; and &lt;g2&gt;q&lt;/g2&gt; are not both true does not
necessarily tell you which one is false:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T163946Z" creationid="tlqk35" creationdate="20220321T170025Z">
        <seg>다음 예제에서 이게 필요한데 왜냐하면 구성주의적 관점에서 &lt;g1&gt;p&lt;/g1&gt;와 &lt;g2&gt;q&lt;/g2&gt; 둘 다 참이 아니라는 것을 아는 것이 반드시 이들 중 하나가 거짓임을 말하지 않기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is a remarkable fact that all the basic axioms for equality follow
from the constructor, &lt;g1&gt;refl&lt;/g1&gt;, and the eliminator, &lt;g2&gt;Eq.rec&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154127Z" creationid="tlqk35" creationdate="20220528T154127Z">
        <seg>동등성에 대한 모든 기본 공리는 생성자 &lt;g1&gt;refl&lt;/g1&gt;과 제거자 &lt;g2&gt;Eq.rec&lt;/g2&gt;로부터 따라 나온다는 사실은 주목할만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is also known
as a &lt;g7&gt;recursor&lt;/g7&gt;, and it is what makes the type "inductive": it allows
us to define a function on &lt;g8&gt;Weekday&lt;/g8&gt; by assigning values
corresponding to each constructor.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T150005Z" creationid="tlqk3" creationdate="20220526T150005Z">
        <seg>이는 &lt;g7&gt;recursor&lt;/g7&gt;로도 알려져 있고, 이게 유형을 "유도적"으로 만드는 것입니다. 이게 각 생성자에 대응하는 값을 할당함으로 &lt;g8&gt;Weekday&lt;/g8&gt;에 함수를 정의할 수 있게 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is also known as the &lt;g6&gt;major premise&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155811Z" creationid="tlqk3" creationdate="20220527T155811Z">
        <seg>이것은 &lt;g6&gt;주요 전제&lt;/g6&gt;로 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is also more robust than &lt;g4&gt;apply&lt;/g4&gt;, since the
elaborator takes the expected type, given by the target of the goal,
into account when processing the expression that is being applied.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084426Z" creationid="tlqk35" creationdate="20220522T055322Z">
        <seg>협력기는 적용될 표현식을 처리할 때 고려하는 목표에 의해 주어진 기대 유형을 받으므로
이것은 &lt;g4&gt;apply&lt;/g4&gt;보다 더 강건합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is an ongoing, long-term
effort, and much of the potential for automation will be realized only gradually over time.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131736Z" creationid="tlqk35" creationdate="20220321T131736Z">
        <seg>이것은 장기적으로 현재진행 중이고 자동화에 대한 대부분의 잠재성은 시간이 지나면서 점차 실현될 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is clear that &lt;g1&gt;cons α&lt;/g1&gt; should have type &lt;g2&gt;α → List α → List α&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151301Z" creationid="tlqk35" creationdate="20220321T151301Z">
        <seg>&lt;g1&gt;cons α&lt;/g1&gt;가  &lt;g2&gt;α → List α → List α&lt;/g2&gt; 유형을 가져야 함은 분명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is common to describe
&lt;g5&gt;And.intro&lt;/g5&gt; as the &lt;g6&gt;and-introduction&lt;/g6&gt; rule.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162615Z" creationid="tlqk35" creationdate="20220321T162615Z">
        <seg>&lt;g5&gt;And.intro&lt;/g5&gt;를 &lt;g6&gt;and-도입&lt;/g6&gt; 규칙이라고 설명하는 것은 흔합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is common to iterate constructions like "And." Lean also allows you
to flatten nested constructors that associate to the right, so that
these two proofs are equivalent:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T134537Z" creationid="tlqk35" creationdate="20220321T163527Z">
        <seg>"And"같은 반복적 구성은 흔합니다. 두 증명이 동등함을 보이기 위해 린은 여러분이 오른쪽으로 결합한 중첩된 생성자로 꺽인 괄호 하나만 사용하는 것(flatten)을 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is common to use a similar trick with the &lt;g1&gt;List.map&lt;/g1&gt; function,
which takes a list as its second non-implicit argument:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181835Z" creationid="tlqk35" creationdate="20220528T181835Z">
        <seg>두 번째 비암시적인 인자로써 리스트를 받는 &lt;g1&gt;List.map&lt;/g1&gt; 함수로 비슷한 트릭을 쓰는 것은 흔합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is convenient for illustration,
and we will use it often.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124707Z" creationid="tlqk35" creationdate="20220321T162714Z">
        <seg>이는 설명에 편리하므로 이를 자주 사용할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is defined as
follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172605Z" creationid="tlqk3" creationdate="20220604T172605Z">
        <seg>이것은 다음과 같이 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is good form to use
it in a tactic proof, since its failure signals that something has
gone wrong.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084143Z" creationid="tlqk35" creationdate="20220522T055131Z">
        <seg>전략 증명에서 이것은 사용하기에 좋은 형태입니다. 
왜냐하면 그것의 실패는 무언가 잘못되었음을 알려주기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is just the macro.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184404Z" creationid="tlqk3" creationdate="20220604T184404Z">
        <seg>이것은 그저 매크로입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is mathematically common to form the "quotient" &lt;g4&gt;α / r&lt;/g4&gt;,
that is, the type of elements of &lt;g5&gt;α&lt;/g5&gt; "modulo" &lt;g6&gt;r&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T180610Z" creationid="tlqk3" creationdate="20220605T180610Z">
        <seg>"몫" &lt;g4&gt;α / r&lt;/g4&gt;, 즉 &lt;g5&gt;α&lt;/g5&gt; "나머지 연산(modulo)" &lt;g6&gt;r&lt;/g6&gt;의 원소 유형을 형성하는 것은 수학적으로 흔합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is modeled after subset notation in set theory: the idea is that &lt;g3&gt;{x : α // p x}&lt;/g3&gt;
denotes the collection of elements of &lt;g4&gt;α&lt;/g4&gt; that have property &lt;g5&gt;p&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T153639Z" creationid="tlqk3" creationdate="20220527T153639Z">
        <seg>집합론에서 부분집합 표기 이후에 모델되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is not hard to prove that &lt;g1&gt;Eq&lt;/g1&gt; is symmetric and transitive.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154600Z" creationid="tlqk35" creationdate="20220528T154600Z">
        <seg>&lt;g1&gt;Eq&lt;/g1&gt;가 대칭적이고 추이적임을 증명하는 것은 어렵지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is not hard to show
that extensional equality on the &lt;g1&gt;(x : α) → β x&lt;/g1&gt; is an equivalence
relation, and so we can consider the type &lt;g2&gt;extfun α β&lt;/g2&gt; of functions
"up to equivalence." Of course, application respects that equivalence
in the sense that if &lt;g3&gt;f₁&lt;/g3&gt; is equivalent to &lt;g4&gt;f₂&lt;/g4&gt;, then &lt;g5&gt;f₁ a&lt;/g5&gt; is
equal to &lt;g6&gt;f₂ a&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T182248Z" creationid="tlqk3" creationdate="20220610T182248Z">
        <seg>&lt;g1&gt;(x : α) → β x&lt;/g1&gt;에 대한 확장적 동등성이 등가 관계임을 보여주는 것은 어렵지 않으므로  "동등할 때까지" 함수 &lt;g2&gt;extfun α β&lt;/g2&gt;형을 고려할 수 있습니다. 물론 함수 적용은 &lt;g3&gt;f₁&lt;/g3&gt;가 &lt;g4&gt;f₂&lt;/g4&gt;와 동등하면 &lt;g5&gt;f₁ a&lt;/g5&gt;가 &lt;g6&gt;f₂ a&lt;/g6&gt;와 같다는 의미에서 등가를 존중합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is often possible to bring a component of a formula outside a
universal quantifier, when it does not depend on the quantified
variable.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074612Z" creationid="tlqk35" creationdate="20220321T183811Z">
        <seg>식이 정량화된 변수에 의존하지 않을 때 때때로 전칭 한정기호를 식의 바깥으로 빼낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is often used when we the expected type is a function type with implicit arguments,
and we have a constant (&lt;g4&gt;reader_t.pure&lt;/g4&gt; in the example) which also takes implicit arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135307Z" creationid="tlqk3" creationdate="20220526T135307Z">
        <seg>이것은 우리가 기대하는 유형이 암시적인 인자를 갖는 함수 유형일 때 종종 사용합니다. 그리고 우리는 암시적인 인수를 받을 수 있는 상수(예제에서 &lt;g4&gt;reader_t.pure&lt;/g4&gt;)를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is often useful to group definitions and theorems related to a
structure in a namespace with the same name.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151021Z" creationid="tlqk3" creationdate="20220526T151021Z">
        <seg>정의들과 정리들을 같은 이름인 이름공간에 구조체와 연관지어 모으는 것이 종종 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is only the choice
principles discussed in :numref:&lt;g4&gt;choice&lt;/g4&gt; that completely erase the
distinction between the proof-irrelevant and data-relevant parts of
the theory.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173013Z" creationid="tlqk3" creationdate="20220605T172653Z">
        <seg>이론의 증명 무관함과 데이터 연관 부분 사이의 구별을 완전히 지우는 :numref:&lt;g4&gt;선택&lt;/g4&gt;에서 논의된 선택 원리입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is remarkable that
it is possible to construct a substantial edifice of mathematics based
on nothing more than the type universes, dependent arrow types, and inductive
types; everything else follows from those.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151752Z" creationid="tlqk3" creationdate="20220526T142541Z">
        <seg>유형 세계, 의존 화살표 유형과 귀납형과 그들로부터 나라 나온 모든 것 외에는 아무것도 기반으로 하지 않는 수학의 실질적인 구조를 구성하는 것이 가능하다는 것은 주목할 만합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is represented
by a metavariable, which should be instantiated later on.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T094239Z" creationid="tlqk35" creationdate="20220522T072123Z">
        <seg>이는 메타변수로 나타나며 나중에 반드시 인스턴스화되어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is similar to &lt;g2&gt;all_goals&lt;/g2&gt;, except it fails unless its argument
succeeds on at least one goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112948Z" creationid="tlqk35" creationdate="20220524T152643Z">
        <seg>&lt;g1&gt;any_goals&lt;/g1&gt;은 그것의 인수가 어느 한 목표에서도 성공하지 않는 한 
실패하는 경우를 제외하고 &lt;g2&gt;all_goals&lt;/g2&gt;과 유사합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is sometimes useful to &lt;g1&gt;export&lt;/g1&gt; aliases from one namespace to another, or to the top level.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181416Z" creationid="tlqk3" creationdate="20220525T181416Z">
        <seg>별명을 한 이름 공간에서 다른 곳 혹은 최상위 단계로 &lt;g1&gt;내보내기&lt;/g1&gt;하는 것은 때때로 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is still tedious, however, to type all these underscores.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153139Z" creationid="tlqk35" creationdate="20220321T153139Z">
        <seg>그래도 여전히 이 밑줄문자를 치는 것은 번거롭습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is the tactic analogue of a &lt;g3&gt;let&lt;/g3&gt; in a proof
term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105831Z" creationid="tlqk35" creationdate="20220524T144352Z">
        <seg>이것은 증명 항에서 &lt;g3&gt;let&lt;/g3&gt;과 유사한 전략입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is the typing rule for dependent arrow types, and the universal
quantifier in particular, that distinguishes &lt;g1&gt;Prop&lt;/g1&gt; from other
types.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065955Z" creationid="tlqk35" creationdate="20220321T174429Z">
        <seg>이것은 의존 화살표 유형의 입력 규칙입니다. 특히 그리고 전칭 한정기호는 &lt;g1&gt;Prop&lt;/g1&gt; 과 다른 유형들을 구분합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is this data that is needed to write an
if-then-else expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190931Z" creationid="tlqk3" creationdate="20220610T190931Z">
        <seg>if-then-else 표현식을 작성하는 데 필요한 것은 이 데이터입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is useful to put such definitions into a namespace, &lt;g1&gt;Nat&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160314Z" creationid="tlqk3" creationdate="20220527T160314Z">
        <seg>&lt;g1&gt;Nat&lt;/g1&gt; 이름공간에 그런 정의를 넣는 것은 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It just so happens that the rules for
function application and abstraction can conveniently help us keep
track of which elements of &lt;g7&gt;Prop&lt;/g7&gt; are inhabited.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T111018Z" creationid="tlqk35" creationdate="20220321T160048Z">
        <seg>함수 적용 및 추상화 규칙은 &lt;g7&gt;Prop&lt;/g7&gt;의 원소가 머무르는지를 추적하는 걸 돕는데 편리하게 해 줄 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It makes functions such as
&lt;g2&gt;compose&lt;/g2&gt; much more convenient to write.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134542Z" creationid="tlqk3" creationdate="20220526T134542Z">
        <seg>이것은 &lt;g2&gt;compose&lt;/g2&gt; 같은 함수를 쓰기에 훨씬 더 편리하게 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may be helpful to compare the exists-elimination rule to the
or-elimination rule: the assertion &lt;g1&gt;∃ x : α, p x&lt;/g1&gt; can be thought of
as a big disjunction of the propositions &lt;g2&gt;p a&lt;/g2&gt;, as &lt;g3&gt;a&lt;/g3&gt; ranges over
all the elements of &lt;g4&gt;α&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071023Z" creationid="tlqk35" creationdate="20220321T181604Z">
        <seg>존재 제거 규칙과 논리합 제거 규칙을 비교하는 게 아마 도움이 될 것입니다. &lt;g3&gt;a&lt;/g3&gt;가 모든 &lt;g4&gt;α&lt;/g4&gt;의 원소의  범위(range)를 가지므로 주장 &lt;g1&gt;∃ x : α, p x&lt;/g1&gt;은 명제 &lt;g2&gt;p a&lt;/g2&gt;의 큰 논리합으로 생각할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It may seem that commutativity and
left-commutativity are problematic, in that repeated application of
either causes looping.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T121942Z" creationid="tlqk35" creationdate="20220524T162327Z">
        <seg>둘 중 어떤 것의 반복적인 적용이 무한루프를 유발한다는 점에서 
교환성과 왼쪽 교환성은 문제가 있어 보입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It means
that even though we can treat proofs &lt;g6&gt;t : p&lt;/g6&gt; as ordinary objects in
the language of dependent type theory, they carry no information
beyond the fact that &lt;g7&gt;p&lt;/g7&gt; is true.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T111809Z" creationid="tlqk35" creationdate="20220321T160316Z">
        <seg>이는 증명&lt;g6&gt;t : p&lt;/g6&gt;을 의존 유형론 언어에 대해 평범한 대상으로 다룰 수 있음에도 &lt;g7&gt;p&lt;/g7&gt;가 참이라는 사실 외의 정보를 주지 않음을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It often happens that we would like a definition to return an arbitrary element in a "corner case."
For example, we may like the expression &lt;g1&gt;head xs&lt;/g1&gt; to be of type &lt;g2&gt;a&lt;/g2&gt; when &lt;g3&gt;xs&lt;/g3&gt; is of type &lt;g4&gt;List a&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155459Z" creationid="tlqk3" creationdate="20220604T155459Z">
        <seg>우리는 정의가 "막다른 경우"에 대해 임의의 원소를 반환하게 만들고 싶은 상황이 종종 있습니다. 예를 들어 &lt;g3&gt;xs&lt;/g3&gt;가 &lt;g4&gt;List a&lt;/g4&gt;형일 때 표현식 &lt;g1&gt;head xs&lt;/g1&gt;가 &lt;g2&gt;a&lt;/g2&gt;형이 되길 좋아합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It represents the familiar
pattern of an inductive proof: to prove &lt;g4&gt;∀ n, motive n&lt;/g4&gt;, first prove &lt;g5&gt;motive 0&lt;/g5&gt;,
and then, for arbitrary &lt;g6&gt;n&lt;/g6&gt;, assume &lt;g7&gt;ih : motive n&lt;/g7&gt; and prove &lt;g8&gt;motive (succ n)&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T161050Z" creationid="tlqk3" creationdate="20220527T161050Z">
        <seg>이는 귀납적 적의의 유사한 패턴을 보여줍니다. &lt;g4&gt;∀ n, motive n&lt;/g4&gt;을 증명하기 위해 우선 &lt;g5&gt;motive 0&lt;/g5&gt;을 증명하고 그 뒤 임의의 &lt;g6&gt;n&lt;/g6&gt;에 대해 &lt;g7&gt;ih : motive n&lt;/g7&gt;을 가정하고 &lt;g8&gt;motive (succ n)&lt;/g8&gt;를 증명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It reverts
these elements, does the split, and reintroduces them.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164711Z" creationid="tlqk3" creationdate="20220527T164711Z">
        <seg>이것은 이 원소를 되돌리고, 나누기를 하고, 그들을 다시 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It says that if &lt;g2&gt;≺&lt;/g2&gt; is well founded and you want to prove
&lt;g3&gt;∀ x, C x&lt;/g3&gt;, it suffices to show that for an arbitrary &lt;g4&gt;x&lt;/g4&gt;, if we
have &lt;g5&gt;∀ y ≺ x, C y&lt;/g5&gt;, then we have &lt;g6&gt;C x&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T170038Z" creationid="tlqk3" creationdate="20220603T170038Z">
        <seg>이것은 만약 &lt;g2&gt;≺&lt;/g2&gt;이 잘 세워졌고 여러분이 &lt;g3&gt;∀ x, C x&lt;/g3&gt;을 증명하기 원한다고 말하면, 이는 임의의  &lt;g4&gt;x&lt;/g4&gt;에 대해 우리가 &lt;g5&gt;∀ y ≺ x, C y&lt;/g5&gt;이면 &lt;g6&gt;C x&lt;/g6&gt;임을 보이는 것으로 충분합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It simply declares the type of the
goal that is about to be solved, while remaining in tactic
mode.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105204Z" creationid="tlqk35" creationdate="20220524T143405Z">
        <seg>전략모드에 남아있는 동안 이것는 단순히 막 풀려고 하는 목표의 유형을 선언합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It supports the same options available in regular tactic mode.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184243Z" creationid="tlqk3" creationdate="20220604T184243Z">
        <seg>보통의 전략 모드에서 사용할 수 있는 것과 동일한 옵션을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It then does a case split on
whether &lt;g3&gt;x&lt;/g3&gt; is of the form &lt;g4&gt;zero&lt;/g4&gt; or &lt;g5&gt;succ x&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162124Z" creationid="tlqk3" creationdate="20220529T162124Z">
        <seg>그 뒤 &lt;g3&gt;x&lt;/g3&gt;가 &lt;g4&gt;zero&lt;/g4&gt;인지 &lt;g5&gt;succ x&lt;/g5&gt;의 꼴인지에 따라 경우를 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It then reduces the
goal to cases in which &lt;g3&gt;x&lt;/g3&gt; is replaced by each of the constructions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164131Z" creationid="tlqk3" creationdate="20220527T164131Z">
        <seg>그 뒤 이것은 목표를 &lt;g3&gt;x&lt;/g3&gt;는 생성자의 각각으로 대체되는 경우로 바꿉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It then returns an output appropriate to the input.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174027Z" creationid="tlqk3" creationdate="20220603T174027Z">
        <seg>그럼 이것은 입력에 대한 적절한 출력을 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It turns out that all commands from the first code block are in fact
command &lt;g1&gt;macros&lt;/g1&gt; translating to the more general &lt;g2&gt;notation&lt;/g2&gt; command.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122407Z" creationid="tlqk3" creationdate="20220526T122407Z">
        <seg>첫 번째 코드 블럭으로부터 모든 명령은 사실 &lt;g1&gt;macros&lt;/g1&gt; 명령이 더 일반적인 &lt;g2&gt;notation&lt;/g2&gt;명령으로 번역된 것임이 드러납니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It unifies the conclusion with
the expression in the current goal, and creates new goals for the
remaining arguments, provided that no later arguments depend on
them.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184630Z" creationid="tlqk35" creationdate="20220321T184630Z">
        <seg>결론을 현재 목표의 표현식과 통합하고 이후 인수가 종속되지 않는 한 나머지 인수에 대한 새 목표를 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It useful to use indendation to structure proof: every time a tactic
leaves more than one subgoal, we separate the remaining subgoals by
enclosing them in blocks and indenting.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T110801Z" creationid="tlqk35" creationdate="20220524T145421Z">
        <seg>증명을 구조화하는데 들여쓰기를 사용하는 것은 유용합니다. 전략은 매번 한 개 이상의 하위 목표를 남겨두므로 
우리는 블럭과 인덴트 안에 그들을 둘러싸서 남은 하위목표들을 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It will also use an "if ... then ... else" instead of a &lt;g1&gt;casesOn&lt;/g1&gt; in appropriate situations.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170258Z" creationid="tlqk3" creationdate="20220529T170258Z">
        <seg>이것은 적절한 상황에서 &lt;g1&gt;casesOn&lt;/g1&gt; 대신  "if ... then ... else"을 사용할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It will unify metavariables in the conclusion if necessary:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090423Z" creationid="tlqk35" creationdate="20220522T063004Z">
        <seg>이 전략은 필요하다면 결론의 메타변수들을 통합할 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It would be
much nicer if the list of subtrees were given by the type
&lt;g1&gt;List (Tree α)&lt;/g1&gt;, especially since Lean's library contains a number of functions
and theorems for working with lists.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T170102Z" creationid="tlqk35" creationdate="20220528T170102Z">
        <seg>만약 하위트리의 리스트가 &lt;g1&gt;List (Tree α)&lt;/g1&gt;형으로 제시된다면 훨씬 더 좋을 것입니다. 왜냐하면 특이 린의 라이브러리가 리스트와 작업할 수 있는 다수의 함수와 정리를 담고 있기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Iterating such
rewrites produces nontrivial propositional reasoning.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123749Z" creationid="tlqk35" creationdate="20220524T164027Z">
        <seg>이런 재작성을 반복하는 것은 비자명한 명제 논리적 추론을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Its use is
essential to some classical constructions, and users can import it
when needed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163006Z" creationid="tlqk3" creationdate="20220605T163006Z">
        <seg>그 용도는 몇몇 고전적 생성에 필수적입니다. 그리고 사용자는 그것이 필요할 때 불러오기 할 수있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Its use is also not limited to propositions,
though using it for data is somewhat odd:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074351Z" creationid="tlqk35" creationdate="20220321T183723Z">
        <seg>그것의 용도는 명제에만 국한되지 않고 약간 이상해도 데이터에 대해서도 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Just as dependent function types &lt;g1&gt;(a : α) → β a&lt;/g1&gt; generalize the
notion of a function type &lt;g2&gt;α → β&lt;/g2&gt; by allowing &lt;g3&gt;β&lt;/g3&gt; to depend on
&lt;g4&gt;α&lt;/g4&gt;, dependent Cartesian product types &lt;g5&gt;(a : α) × β a&lt;/g5&gt; generalize
the Cartesian product &lt;g6&gt;α × β&lt;/g6&gt; in the same way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152228Z" creationid="tlqk35" creationdate="20220321T152228Z">
        <seg>의존적 함수 유형 &lt;g1&gt;(a : α) → β a&lt;/g1&gt;는 함수의 유형 &lt;g2&gt;α → β&lt;/g2&gt;의 개념을 &lt;g3&gt;β&lt;/g3&gt;가 &lt;g4&gt;α&lt;/g4&gt;에 종속적이라고 함으로써 일반화한 것처럼 의존적 카테시안 곱 유형은 &lt;g5&gt;(a : α) × β a&lt;/g5&gt;는 카테시안 곱 &lt;g6&gt;α × β&lt;/g6&gt;를 같은 방식으로 일반화합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Just as the &lt;g1&gt;cases&lt;/g1&gt; tactic can be used to carry out proof by cases,
the &lt;g2&gt;induction&lt;/g2&gt; tactic can be used to carry out proofs by
induction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T171959Z" creationid="tlqk3" creationdate="20220527T171959Z">
        <seg>&lt;g1&gt;cases&lt;/g1&gt; 전략은 경우에 따른 증명을 수행하는데 사용될 수 있다. &lt;g2&gt;induction&lt;/g2&gt; 전략은 귀납으로 증명을 수행하는데 사용될 수 있다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Just as the constructive "or" is stronger than the classical "or," so,
too, is the constructive "exists" stronger than the classical
"exists".</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072403Z" creationid="tlqk35" creationdate="20220321T183014Z">
        <seg>구성주의의 "논리합"은 고전적 "논리합"보다 강한 것처럼 구성주의의 "존재한다"도 고전적 "존재한다"보다 더 강한 의미를 가집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Keep in mind that the notation &lt;g1&gt;∃ x : α, p&lt;/g1&gt; is syntactic sugar for &lt;g2&gt;Exists (fun x : α =&gt; p)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T152800Z" creationid="tlqk3" creationdate="20220527T152800Z">
        <seg>&lt;g1&gt;∃ x : α, p&lt;/g1&gt; 기호는 &lt;g2&gt;Exists (fun x : α =&gt; p)&lt;/g2&gt;에 대한 문법적 설탕임을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Keep in mind that you can use the French quotation marks in this way
to refer to &lt;g1&gt;anything&lt;/g1&gt; in the context, not just things that were
introduced anonymously.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074306Z" creationid="tlqk35" creationdate="20220321T183716Z">
        <seg>여러분은 프랑스 인용부호를 맥락 속에서 &lt;g1&gt;어떤 것이든&lt;/g1&gt; 참조는데 사용하는 것 뿐만 아니라 익명으로 도입된 것들을 위해서도 쓸 수 있다는 점을 명심하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Later, we show how you can extend the proof language using the Lean macro system.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074423Z" creationid="tlqk35" creationdate="20220321T183733Z">
        <seg>나중에 우리는 린의 매크로 시스템을 사용해 증명 언어를 확장하는 방법을 소개합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Later, we will see that &lt;g3&gt;Inhabited&lt;/g3&gt; is
an example of a &lt;g4&gt;type class&lt;/g4&gt; in Lean: Lean can be instructed that
suitable base types are inhabited, and can automatically infer that
other constructed types are inhabited on that basis.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151337Z" creationid="tlqk3" creationdate="20220527T150928Z">
        <seg>나중에 우리는 &lt;g3&gt;Inhabited&lt;/g3&gt;가 린에서 &lt;g4&gt;type class&lt;/g4&gt;의 예임을 보게 될 것입니다. 린은 적절한 기반형이 내장됨을 알게 되면 자동적으로 다른 생성된 유형도 그 기저에 내장되었음을 추론할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean
detects when these arguments can be inferred from later arguments to a
constructor or the return type, and makes them implicit in that case.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T155511Z" creationid="tlqk3" creationdate="20220526T155511Z">
        <seg>린은 이 인수가 생성자의 나중 인수나 반환형으로부터 추론될 수 있을 때를 감지하고 그 경우 이들을 암시적이게 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean
simply normalizes these expressions until the constructors &lt;g2&gt;zero&lt;/g2&gt;
and &lt;g3&gt;succ&lt;/g3&gt; are exposed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161455Z" creationid="tlqk3" creationdate="20220529T161455Z">
        <seg>린은 단순히 이 표현식들을 생성자 &lt;g2&gt;zero&lt;/g2&gt;과 &lt;g3&gt;succ&lt;/g3&gt;이 드러날 때까지 정규화합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean
therefore provides &lt;g3&gt;Or.inr&lt;/g3&gt; and &lt;g4&gt;Or.inl&lt;/g4&gt; which can be viewed as
shorthand for &lt;g5&gt;Or.intro_right _&lt;/g5&gt; and &lt;g6&gt;Or.intro_left _&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154004Z" creationid="tlqk35" creationdate="20220321T164016Z">
        <seg>그러므로 린은 &lt;g5&gt;Or.intro_right _&lt;/g5&gt;과 &lt;g6&gt;Or.intro_left _&lt;/g6&gt;의 약식 표현인 &lt;g3&gt;Or.inr&lt;/g3&gt; 과 &lt;g4&gt;Or.inl&lt;/g4&gt;을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean 4 supports a new feature called &lt;g1&gt;auto bound implicit arguments&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134508Z" creationid="tlqk3" creationdate="20220526T134508Z">
        <seg>린 4는 &lt;g1&gt;auto bound implicit arguments&lt;/g1&gt;라 하는 새로운 기능을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean allows us to use &lt;g9&gt;anonymous constructor&lt;/g9&gt; notation
&lt;g10&gt;⟨arg1, arg2, ...⟩&lt;/g10&gt; in situations like these, when the relevant type is an
inductive type and can be inferred from the context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T132439Z" creationid="tlqk35" creationdate="20220321T163229Z">
        <seg>연관된 유형이 귀납형이고 맥락으로부터 추론할 수 있는 상황에서 린은 &lt;g9&gt;익명 생성자&lt;/g9&gt; 표기 &lt;g10&gt;⟨arg1, arg2, ...⟩&lt;/g10&gt;를 쓸 수 있게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean allows users to mark
such subterms as &lt;g1&gt;inaccessible&lt;/g1&gt; for pattern matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T143653Z" creationid="tlqk3" creationdate="20220604T143653Z">
        <seg>린은 사용자가 그런 부분항을 패턴 매칭에 대해 &lt;g1&gt;inaccessible&lt;/g1&gt;으로 표시하도록 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean allows you to specify that unassigned fields in the
specification of a record should be taken from a previously defined
structure object &lt;g2&gt;s&lt;/g2&gt; by adding the annotation &lt;g3&gt;s with&lt;/g3&gt; before the field
assignments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181355Z" creationid="tlqk35" creationdate="20220528T181355Z">
        <seg>린은 여러분이 레코드의 명세에서 이전에 정의된 구조체 개체로부터 &lt;g3&gt;s&lt;/g3&gt;를 받아  필드 할당 전에 &lt;g3&gt;s가 있음&lt;/g3&gt; 주석을 추가하여 할당되지 않은 필드를 나타내도록 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also
allows us to specify the type of the final term &lt;g4&gt;hp&lt;/g4&gt;, explicitly,
with a &lt;g5&gt;show&lt;/g5&gt; statement.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T120436Z" creationid="tlqk35" creationdate="20220321T161051Z">
        <seg>여러분은 마지막 항 &lt;g4&gt;hp&lt;/g4&gt;을 &lt;g5&gt;show&lt;/g5&gt; 문장으로 유형을 명시적으로 나타낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also allows parameters to occur after &lt;g4&gt;:&lt;/g4&gt;, but it cannot pattern match on them.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163915Z" creationid="tlqk3" creationdate="20220529T163915Z">
        <seg>린은 매개변수가 &lt;g4&gt;:&lt;/g4&gt; 뒤에서 나타나는 것도 허용합니다. 그러나 이들에 대해 패턴 매칭은 할 수 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also allows you to introduce "local" definitions using the
&lt;g1&gt;let&lt;/g1&gt; keyword.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144719Z" creationid="tlqk35" creationdate="20220321T144719Z">
        <seg>Lean은 여러분이 &lt;g1&gt;let&lt;/g1&gt; 키워드를 사용해 "지역" 정의를 가져올 수 있게 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also has a &lt;g1&gt;let&lt;/g1&gt; tactic, which is similar to the &lt;g2&gt;have&lt;/g2&gt;
tactic, but is used to introduce local definitions instead of
auxiliary facts.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105658Z" creationid="tlqk35" creationdate="20220524T144248Z">
        <seg>린은 또 &lt;g2&gt;have&lt;/g2&gt;전략과 유사한 &lt;g1&gt;let&lt;/g1&gt; 전략을 갖고 있습니다. 
그러나 이것은 부가적인 사실 보다는 지역 정의를 도입하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also has mechanisms to serve as its own &lt;g1&gt;metaprogramming
language&lt;/g1&gt;, which means that you can implement automation and extend the functionality of Lean using Lean itself.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131622Z" creationid="tlqk35" creationdate="20220321T131622Z">
        <seg>또한 Lean은 그 자체로 &lt;g1&gt;메타프로그래밍 언어&lt;/g1&gt;로 기능하는 작동 원리가 있어 자동화의 수행 및 Lean 자체로 그 기능을 확장할 수 있음을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also provides
the "bullet" notation &lt;g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085611Z" creationid="tlqk35" creationdate="20220522T061751Z">
        <seg>린은 또 구조화한 증명에 대해 "총알(bullet)" 기호 &lt;g1&gt;.&lt;tactics&gt;&lt;/g1&gt; (혹은 &lt;g2&gt;· &lt;tactics&gt;&lt;/g2&gt;)를 제공합니다.&lt;g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also provides a compiler for &lt;g1&gt;match-with&lt;/g1&gt; expressions found in
many functional languages.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182836Z" creationid="tlqk3" creationdate="20220603T182836Z">
        <seg>린도 많은 함수형 언어에서 발견되다시피 컴파일러에게 &lt;g1&gt;match-with&lt;/g1&gt; 표현식을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also provides a complementary &lt;g2&gt;case&lt;/g2&gt; tactic, which allows you to focus on goal
assign variable names.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165442Z" creationid="tlqk3" creationdate="20220527T165442Z">
        <seg>린은 여러분이 목표에 변수 이름을 할당할 수 있게 하는 보완적인 &lt;g2&gt;case&lt;/g2&gt; 전략도 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also provides a pattern-matching &lt;g1&gt;let&lt;/g1&gt; expression:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T092755Z" creationid="tlqk35" creationdate="20220321T182802Z">
        <seg>또 린은 패턴-매칭 &lt;g1&gt;let&lt;/g1&gt; 표현식을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also supports a structured way of reasoning backwards from a
goal, which models the "suffices to show" construction in ordinary
mathematics.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T161710Z" creationid="tlqk35" creationdate="20220321T165224Z">
        <seg>게다가 린은 목표로부터 구조화된 후방향 추론 방식을 지원합니다. 이것은 일상 수학 속 "~을 보이기에 충분하다" 구성을 본딴 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also supports mutual recursive definitions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173339Z" creationid="tlqk3" creationdate="20220603T173339Z">
        <seg>린도 상호적인 재귀적 정의를 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean also supports the use of various editors, which provide
continuous checking and feedback.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173524Z" creationid="tlqk35" creationdate="20220524T173524Z">
        <seg>또한 린은 다양한 끊임없는 확인과 피드백을 제공하는 편집기의 사용을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean can
usually infer the type &lt;g4&gt;α&lt;/g4&gt;, but it is often a good idea to write it
explicitly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144144Z" creationid="tlqk35" creationdate="20220321T144144Z">
        <seg>Lean은 &lt;g4&gt;α&lt;/g4&gt;의 유형을 추론할 수 있습니다. 그러나 이를 명백히 적는 것이 좋습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean can also handle more complex forms of pattern matching, in which
arguments to dependent types pose additional constraints on the
various cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164517Z" creationid="tlqk3" creationdate="20220529T164517Z">
        <seg>린은 인수가 다양한 경우에 대해 추가적인 제약을 의존 유형에 부여하는 것 같은 패턴 매칭의 더 복잡한 형태도 다룰 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean can not only define mathematical objects and express
mathematical assertions in dependent type theory, but it also can be used as a language for writing proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T132153Z" creationid="tlqk35" creationdate="20220321T132120Z">
        <seg>린은 수학적 대상들을 정의하고 수학적 주장을 의존 유형론으로 진술할 수 있고 증명을 작성하는 언어로써 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean comes with &lt;g3&gt;ToString&lt;/g3&gt; instances
for most builtin types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162130Z" creationid="tlqk3" creationdate="20220604T162130Z">
        <seg>린은 대다수의 내장된 유형에 대한 &lt;g3&gt;ToString&lt;/g3&gt;와 함께 나옵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean converts them into a &lt;g2&gt;let rec&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182525Z" creationid="tlqk3" creationdate="20220603T182525Z">
        <seg>린은 그들을 &lt;g2&gt;let rec&lt;/g2&gt;으로 바꿉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean creates an auxiliary declaration for each &lt;g1&gt;let rec&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182022Z" creationid="tlqk3" creationdate="20220603T182022Z">
        <seg>린은 각 &lt;g1&gt;let rec&lt;/g1&gt;에 대해 부가 선언을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean defines all the standard logical connectives and notation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161834Z" creationid="tlqk35" creationdate="20220321T161834Z">
        <seg>린은 모든 표준 논리 연결사와 표기를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean detects that the proof uses &lt;g1&gt;hp&lt;/g1&gt; and automatically adds
&lt;g2&gt;hp : p&lt;/g2&gt; as a premise.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161613Z" creationid="tlqk35" creationdate="20220321T161613Z">
        <seg>린은 &lt;g1&gt;hp&lt;/g1&gt;를 사용하는 증명을 감지하고 자동적으로 &lt;g2&gt;hp : p&lt;/g2&gt;를 전제로 추가합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean elaborates the terms &lt;g1&gt;(2 : Nat)&lt;/g1&gt; and &lt;g2&gt;(2 : Rational)&lt;/g2&gt; as
&lt;g3&gt;OfNat.ofNat Nat 2 (instOfNatNat 2)&lt;/g3&gt; and
&lt;g4&gt;OfNat.ofNat Rational 2 (instOfNatRational 2)&lt;/g4&gt; respectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162615Z" creationid="tlqk3" creationdate="20220604T162615Z">
        <seg>린은 항 &lt;g1&gt;(2 : Nat)&lt;/g1&gt;과 &lt;g2&gt;(2 : Rational)&lt;/g2&gt;을 각각 &lt;g3&gt;OfNat.ofNat Nat 2 (instOfNatNat 2)&lt;/g3&gt;과
&lt;g4&gt;OfNat.ofNat Rational 2 (instOfNatRational 2)&lt;/g4&gt;으로 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean has mechanisms to
detect and insert &lt;g4&gt;coercions&lt;/g4&gt; of this sort.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T124651Z" creationid="tlqk3" creationdate="20220526T124651Z">
        <seg>린은 이런 종류의 &lt;g4&gt;coercions&lt;/g4&gt;의 감지와 삽입하는 메커니즘이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean has very complex mechanisms for instantiating implicit arguments,
and we will see that they can be used to infer function types,
predicates, and even proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153412Z" creationid="tlqk35" creationdate="20220321T153412Z">
        <seg>Lean은 암시적인 인수를 인스턴스화(instantiating)하는데 아주 복잡한 매커니즘을 가지고 있습니다. 그리고 우리는 함수의 유형과 술어 그리고 심지어 증명을 추론하는데 사용될 수 있음을 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean interprets the final three examples as the same expression; in
the last expression, Lean infers the type of &lt;g1&gt;x&lt;/g1&gt; and &lt;g2&gt;y&lt;/g2&gt; from the
expression &lt;g3&gt;if not y then x + 1 else x + 2&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142601Z" creationid="tlqk35" creationdate="20220321T142601Z">
        <seg>린은 마지막 세 예제를 같은 표현식으로 해석합니다. 마지막 표현식에서 린은 &lt;g1&gt;x&lt;/g1&gt;와 &lt;g2&gt;y&lt;/g2&gt;의 유형을 표현식 &lt;g3&gt;if not y then x + 1 else x + 2&lt;/g3&gt;으로부터 추론합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean is a complete programming language.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143745Z" creationid="tlqk35" creationdate="20220321T143745Z">
        <seg>린은 완전한 프로그래밍 언어입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean is based on a version of dependent type
theory known as the &lt;g1&gt;Calculus of Constructions&lt;/g1&gt;, with a countable
hierarchy of non-cumulative universes and inductive types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151640Z" creationid="tlqk35" creationdate="20220321T135135Z">
        <seg>린은  &lt;g1&gt;직관주의 계산법&lt;/g1&gt;이라고 하는 가산적인 비축적적 세계(Universe)와 귀납형이 있는 의존 유형론 버전을 기반합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean is designed to support both computational and classical
reasoning.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T160955Z" creationid="tlqk3" creationdate="20220605T160955Z">
        <seg>린은 계산적 추론과 고전 추론 모두를 지원하도록 설계되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean is designed to support both of these
approaches.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171031Z" creationid="tlqk3" creationdate="20220605T171031Z">
        <seg>린은 이 두 접근 모두 지원하도록 설계되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean is released under the
&lt;g2&gt;Apache 2.0 license&lt;/g2&gt;, a permissive open source license that permits others to use and extend the code and
mathematical libraries freely.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131805Z" creationid="tlqk35" creationdate="20220321T131805Z">
        <seg>Lean은  &lt;g2&gt;Apache 2.0 라이센스&lt;/g2&gt;하에서 배포되었습니다. 이는 타인에게 자유롭게 사용하는 것과 수학 라이브러리 및 코드의 확장을 허락합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean is smart enough to figure out which variables are used
explicitly or implicitly in a definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145931Z" creationid="tlqk35" creationdate="20220321T145931Z">
        <seg>Lean은 정의에서 명시적으로나 암시적으로 사용된 변수를 구분하기에 충분히 똑똑합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean knows that the usual order &lt;g1&gt;&lt;&lt;/g1&gt; on the natural numbers is well
founded.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T170249Z" creationid="tlqk3" creationdate="20220603T170249Z">
        <seg>린은 자연수에 대한 평상시 순서 &lt;g1&gt;&lt;&lt;/g1&gt;가 잘 세워졌다는 것을 압니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean maintains a number of internal variables that can be set by users
to control its behavior.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125644Z" creationid="tlqk3" creationdate="20220526T125644Z">
        <seg>린은 사용자가 설정하여 그 행동을 제어하는 하는 다수의 내부 변수를 관리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean offers a weaker annotation,
&lt;g4&gt;{{y : ℕ}}&lt;/g4&gt;, which specifies that a placeholder should only be added
&lt;g5&gt;before&lt;/g5&gt; a subsequent explicit argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T185509Z" creationid="tlqk3" creationdate="20220525T185229Z">
        <seg>린은 종종 자리차지자가 이후의 명시적인 인수 &lt;g5&gt;앞에&lt;/g5&gt; 추가되어야 함을 나타내는 약한 주석 &lt;g4&gt;{{y : ℕ}}&lt;/g4&gt;을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean provides a &lt;g1&gt;fun&lt;/g1&gt; (or &lt;g2&gt;λ&lt;/g2&gt;) keyword to create a function
from an expression as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142148Z" creationid="tlqk35" creationdate="20220321T142148Z">
        <seg>린은 &lt;g1&gt;fun&lt;/g1&gt; (또는 &lt;g2&gt;λ&lt;/g2&gt;) 키워드를 제공하여 다음과 같은 표현식으로부터 함수를 만들 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean provides a more convenient way to eliminate from an existential
quantifier with the &lt;g1&gt;match&lt;/g1&gt; expression:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071309Z" creationid="tlqk35" creationdate="20220321T181807Z">
        <seg>린은 &lt;g1&gt;match&lt;/g1&gt; 표현식으로 존재 한정기호를 없애는 더 편리한 방법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean provides another useful syntactic gadget.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T132646Z" creationid="tlqk35" creationdate="20220321T163333Z">
        <seg>린은 또 다른 유용한 문법 도구를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean provides natural ways of defining recursive functions, performing
pattern matching, and writing inductive proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160113Z" creationid="tlqk3" creationdate="20220529T160113Z">
        <seg>린은 재귀적인 함수를 정의하는 자연스러운 방법을 제공하고, 패턴 매치를 수행하고, 귀납적 정의를 작성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean provides various sectioning mechanisms to help structure a
theory.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174732Z" creationid="tlqk35" creationdate="20220524T174732Z">
        <seg>린은 이론을 구조화하는 것을 돕기 위해 구획을 나누는 다양한 메커니즘을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean provides you with the &lt;g1&gt;variable&lt;/g1&gt; command to make such
declarations look more compact:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145147Z" creationid="tlqk35" creationdate="20220321T145143Z">
        <seg>린은 여러분에게 이런 선언을 더 간결하게 보이게 만들도록 &lt;g1&gt;variable&lt;/g1&gt; 명령을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean provides you with the ability to group definitions into nested,
hierarchical &lt;g1&gt;namespaces&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150219Z" creationid="tlqk35" creationdate="20220321T150219Z">
        <seg>Lean은 여러분에게 정의를 중첩되고 계층적인 &lt;g1&gt;namespaces&lt;/g1&gt;에 묶을 수 있는 능력을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean raises an error if any of the field names remain
unspecified after all the objects are visited.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181620Z" creationid="tlqk35" creationdate="20220528T181620Z">
        <seg>린은 모든 개체들이 방문된 이후에도 어떤 필드 이름이라도 명시되지 않고 남아있다면 오류를 발생시킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean then automatically builds the
isomorphism between &lt;g5&gt;TreeList α&lt;/g5&gt; and &lt;g6&gt;List (Tree α)&lt;/g6&gt; in its kernel,
and defines the constructors for &lt;g7&gt;Tree&lt;/g7&gt; in terms of the isomorphism.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T170807Z" creationid="tlqk35" creationdate="20220528T170807Z">
        <seg>그 후 린은 자동적으로 그것의 커널에서 &lt;g5&gt;TreeList α&lt;/g5&gt;과&lt;g6&gt;List (Tree α)&lt;/g6&gt; 사이의 동형을 만듭니다. 그리고 동형에 대해서 &lt;g7&gt;Tree&lt;/g7&gt;에 대한 생성자를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean therefore provides the following alternative
notations for defining elements of a structure type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T182051Z" creationid="tlqk35" creationdate="20220528T182051Z">
        <seg>그래서 린은 구조체의 원소를 정의하는데 다음의 대안 기호를 제공합니다</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean tries to use type information to
disambiguate the meaning in context, but you can always disambiguate
by giving the full name.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180522Z" creationid="tlqk35" creationdate="20220524T180522Z">
        <seg>린은 맥락에서 의미의 모호함을 해소하려고 유형 정보를 사용하려고 합니다. 
그러나 여러분은 이들의 완전한 이름을 주는 것으로 모호성을 항상 풀 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean uses the
context to infer which one is appropriate.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T070410Z" creationid="tlqk35" creationdate="20220321T181106Z">
        <seg>린은 어느 것이 적절한 지 추론하는데 맥락을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean uses the &lt;g1&gt;match&lt;/g1&gt; construct internally to implement pattern-matching in all parts of the system.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182640Z" creationid="tlqk3" creationdate="20220603T182640Z">
        <seg>린은 시스템의 모든 부분에서 내부적으로 패턴 매칭을 구현하고자 &lt;g1&gt;match&lt;/g1&gt; 생성을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean will even allow us to use an implicit &lt;g2&gt;match&lt;/g2&gt;
in the &lt;g3&gt;fun&lt;/g3&gt; expression:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071846Z" creationid="tlqk35" creationdate="20220321T182848Z">
        <seg>린은 &lt;g3&gt;fun&lt;/g3&gt; 표현식에서도 암시적인 &lt;g2&gt;match&lt;/g2&gt;를 사용할 수 있게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean will start type class synthesizer even when these parameters have missing parts.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163641Z" creationid="tlqk3" creationdate="20220604T163641Z">
        <seg>이들의 매개변수에 모르는 부분이 있을 지라도 린은 유형 클래스 합성기를 시작할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's equation compiler, described in the next
chapter, is needed to make use of these types
effectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T164830Z" creationid="tlqk35" creationdate="20220528T164830Z">
        <seg>다음 장에서 설명할 린의 방정식 컴파일러는 이 유형의 사용을 효과적으로 만들기 위해 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's library contains a large number of common identities, such as these:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082710Z" creationid="tlqk35" creationdate="20220321T175923Z">
        <seg>린의 라이브러리는 이 같이 흔한 항등식들을 많이 가지고 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's library developers follow general naming guidelines to make it
easier to guess the name of a theorem you need, or to find it using
tab completion in editors with a Lean mode that supports this, which
is discussed in the next section.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131843Z" creationid="tlqk3" creationdate="20220526T131843Z">
        <seg>린의 라이브러리 개발자는 여러분이 필요한 정리의 이름을 추측하기 더 쉽게 일반적인 이름짓기 규칙을 따릅니다. 혹은 린 모드인 편집기의 탭 완성 지원 기능으로 그것을 찾도록 돕습니다. 탭 완성은 다음 섹션에서 얘기합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's mechanisms for guessing a well-founded relation and then
proving that recursive calls decrease are still in a rudimentary
state.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173121Z" creationid="tlqk3" creationdate="20220603T173121Z">
        <seg>린의 잘 세워진 관계식을 추론하는 메커니즘과 재귀적인 호출이 줄어든다는 증명은 여전히 기초적인 상태입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's parser is extensible, which is to say, we can define new notation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T191247Z" creationid="tlqk3" creationdate="20220525T191247Z">
        <seg>린의 구문분석기는 확장가능성이 있습니다. 그 말은 우리가 새로운 기호를 정의할 수 있다는 뜻입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's standard
library can be found online, on GitHub:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131254Z" creationid="tlqk3" creationdate="20220526T131254Z">
        <seg>린의 표준 라이브러리는 깃허브에서 찾을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's standard library contains proofs of many valid statements of
propositional logic, all of which you are free to use in proofs of
your own.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164414Z" creationid="tlqk35" creationdate="20220321T170114Z">
        <seg>린의 표준 라이브러리는 명제 논리의 유효한 많은 진술들의 증명을 포함합니다. 그 모든 것들은 여러분들의 주장을 증명하는데 자유롭게 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's standard library defines an additional axiom, propositional
extensionality, and a quotient construction which in turn implies the
principle of function extensionality.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T161600Z" creationid="tlqk3" creationdate="20220605T161600Z">
        <seg>린의 표준 라이브러리는 부가적인 공리, 명제적 확장성과 함수 확장성의 원리를 차례로 함의하는 몫 구성을 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's standard library defines two predicates, &lt;g1&gt;Acc r a&lt;/g1&gt; and
&lt;g2&gt;WellFounded r&lt;/g2&gt;, where &lt;g3&gt;r&lt;/g3&gt; is a binary relation on a type &lt;g4&gt;α&lt;/g4&gt;,
and &lt;g5&gt;a&lt;/g5&gt; is an element of type &lt;g6&gt;α&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173905Z" creationid="tlqk3" creationdate="20220529T173905Z">
        <seg>린의 표준 라이브러리는 두 술어 &lt;g1&gt;Acc r a&lt;/g1&gt;과 &lt;g2&gt;WellFounded r&lt;/g2&gt;을 정의합니다. 여기서 &lt;g3&gt;r&lt;/g3&gt;은 &lt;g4&gt;α&lt;/g4&gt;형에 대한 이항 관계이고 &lt;g5&gt;a&lt;/g5&gt;는 &lt;g6&gt;α&lt;/g6&gt;형 원소입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's standard library extends the Calculus of
Constructions with additional constants that perform exactly these
constructions, and installs this last equation as a definitional
reduction rule.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T181427Z" creationid="tlqk3" creationdate="20220605T181427Z">
        <seg>Lean의 표준 라이브러리는 이 생성을 정확히 수행하는 추가 상수로 직관주의적 계산을 확장하고 이 마지막 방정식을 정의로 인한 축소 규칙으로 설치합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's syntax can be extended and customized by users at every level,
ranging from basic "mixfix" notations to custom elaborators.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T115919Z" creationid="tlqk3" creationdate="20220526T115919Z">
        <seg>린의 문법은 모든 수준에서 사용자에 의해 기본적인 "혼합 수정" 기호에서 관습적인 협력기에 이르기까지 확장되거나 사용자가 정의해 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's task, as a
proof assistant, is to help us to construct such a term, &lt;g4&gt;t&lt;/g4&gt;, and to
verify that it is well-formed and has the correct type.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114519Z" creationid="tlqk35" creationdate="20220321T160545Z">
        <seg>증명 보조기로써 린의 일은 그런 항 &lt;g4&gt;t&lt;/g4&gt;를 생성하는 것을 돕는 것과 그것이 올바른 유형을 갖고 잘 형성된 것을 검증하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's underlying foundation has an infinite
hierarchy of types:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141603Z" creationid="tlqk35" creationdate="20220321T141603Z">
        <seg>린의 기저에는 무한한 유형의 계층이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Lean's underlying logic has a computational interpretation, and Lean can be viewed equally well as a programming
language.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131550Z" creationid="tlqk35" creationdate="20220321T131550Z">
        <seg>Lean의 기본 논리는 컴퓨팅 해석기(interpretor)을 가지는데 있다. 그래서 Lean은 프로그래밍 언어와 마찬가지로 동등하게 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let &lt;g1&gt;α&lt;/g1&gt; be any type, and let &lt;g2&gt;r&lt;/g2&gt; be an equivalence relation on
&lt;g3&gt;α&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T180450Z" creationid="tlqk3" creationdate="20220605T180450Z">
        <seg>&lt;g1&gt;α&lt;/g1&gt;를 임의의 유형이라고 하고 &lt;g2&gt;r&lt;/g2&gt;이 &lt;g3&gt;α&lt;/g3&gt;과 동등한 관계라고 합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let us consider another example of a type class defined in the
standard library, namely the type class of &lt;g1&gt;Decidable&lt;/g1&gt;
propositions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T171306Z" creationid="tlqk3" creationdate="20220604T171306Z">
        <seg>표준 라이브러리에 정의된 유형 클래스의 다른 예 즉, &lt;g1&gt;결정 가능한&lt;/g1&gt; 명제 유형 클래스를 고려해 봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let us consider some more examples of inductively defined types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162833Z" creationid="tlqk3" creationdate="20220527T162833Z">
        <seg>재귀적으로 정의된 유형에 대해 몇 가지 예제를 더 고려해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let us first consider the case where the inductive type is &lt;g1&gt;not&lt;/g1&gt;
specified to land in &lt;g2&gt;Prop&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152243Z" creationid="tlqk35" creationdate="20220528T161836Z">
        <seg>우선 귀납형이 &lt;g2&gt;Prop&lt;/g2&gt;에 머무른다고 명시되지&lt;g1&gt;않은&lt;/g1&gt;경우를 생각해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let us now turn to one of the most fundamental relations defined in
Lean's library, namely, the equality relation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T071420Z" creationid="tlqk35" creationdate="20220321T175313Z">
        <seg>이제 주로 동등 관계라고 하는 린의 라이브러리에 정의된 가장 기초적인 관계 중 하나로 방향을 바꿔봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let us start with the first step of the program above, declaring an appropriate class:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160105Z" creationid="tlqk3" creationdate="20220604T160105Z">
        <seg>위 프로그램의 첫 단계인 적절한 클래스를 선언하는 것부터 시작합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let us start with the logical background that
is needed to understand how it works.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173742Z" creationid="tlqk3" creationdate="20220529T173742Z">
        <seg>우선 이것이 어떻게 동작하는지 이해하는데 필요한 논리적 배경으로 시작합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's create one
that adds two natural numbers:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144254Z" creationid="tlqk35" creationdate="20220321T144254Z">
        <seg>두 자연수를 더하는 함수를 만들어 봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let's take a look at some basic syntax.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140329Z" creationid="tlqk35" creationdate="20220321T140329Z">
        <seg>몇 가지 기본 문법에 대해 살펴봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like sections, namespaces can be nested:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150535Z" creationid="tlqk35" creationdate="20220321T150535Z">
        <seg>section처럼 이름공간도 중첩될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Like sections, nested namespaces have to be closed in the order they
are opened.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150603Z" creationid="tlqk35" creationdate="20220321T150603Z">
        <seg>섹션과 마찬가지로 중첩된 이름공간은 그들이 열린 순서대로 닫혀야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Local Definitions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144706Z" creationid="tlqk35" creationdate="20220321T144706Z">
        <seg>지역 정의(Local Definitions)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Local Instances</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170215Z" creationid="tlqk3" creationdate="20220604T170215Z">
        <seg>지역 개체</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Local recursive declarations</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181922Z" creationid="tlqk3" creationdate="20220603T181922Z">
        <seg>지역적인 재귀 선언</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logical Equivalence</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T160123Z" creationid="tlqk35" creationdate="20220321T164609Z">
        <seg>논리적 동등</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logically speaking, having an element &lt;g1&gt;t : Decidable p&lt;/g1&gt; is stronger
than having an element &lt;g2&gt;t : p ∨ ¬p&lt;/g2&gt;; it enables us to define values
of an arbitrary type depending on the truth value of &lt;g3&gt;p&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172304Z" creationid="tlqk3" creationdate="20220604T172304Z">
        <seg>논리적으로 말하자면 원소 &lt;g1&gt;t : Decidable p&lt;/g1&gt;를 갖는 것은 원소 &lt;g2&gt;t : p ∨ ¬p&lt;/g2&gt;을 갖는 것보다 강합니다. 이는 우리가 &lt;g3&gt;p&lt;/g3&gt;의 진리값에 의존하는 임의의 유형의 값을 정의할 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Look up the definition of a Fermat prime or any of the
other statements, if necessary.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T075134Z" creationid="tlqk35" creationdate="20220321T183958Z">
        <seg>필요하다면 페르마 소수나 이외의 진술의 정의를 찾아보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Make sure Lean accepts the term with
all the &lt;g4&gt;sorry&lt;/g4&gt;'s; if not, there are errors that you need to
correct.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165258Z" creationid="tlqk35" creationdate="20220321T170349Z">
        <seg>린이 모든 &lt;g4&gt;sorry&lt;/g4&gt;로 채워진 항을 받아들이게 하세요. 그렇지 않으면 여러분이 고쳐야 하는 에러가 생깁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Managing Type Class Inference</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T175611Z" creationid="tlqk3" creationdate="20220604T175611Z">
        <seg>유형 클래스 추론 관리하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Many people have contributed to the effort, providing
corrections, suggestions, examples, and text.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134821Z" creationid="tlqk35" creationdate="20220321T134821Z">
        <seg>많은 사람들이 오타 정정, 제안, 예제, 본분을 제공하는 등의 노력으로 기여했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Marking the position as an inaccessible pattern tells the
equation compiler first, that the form of the argument should be
inferred from the constraints posed by the other arguments, and,
second, that the first argument should &lt;g1&gt;not&lt;/g1&gt; participate in pattern
matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T150734Z" creationid="tlqk3" creationdate="20220604T150734Z">
        <seg>접근 불가한 패턴으로 위치를 표시하는 것은 우선 방정식 컴파일러에게 인수의 모양이 다른 인수에 부과된 제약으로부터 추론될 수 있어야 한다고 말합니다. 그리고 두 번째로 첫 인수가 패턴 매칭에 참여하지 &lt;g1&gt;않아야&lt;/g1&gt; 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Match Expressions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182731Z" creationid="tlqk3" creationdate="20220603T182731Z">
        <seg>매치 표현식</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More Tactics</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T070126Z" creationid="tlqk35" creationdate="20220522T070126Z">
        <seg>이 외의 전략들</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More generally, given an expression &lt;g1&gt;p.foo x y z&lt;/g1&gt; where &lt;g2&gt;p : Point&lt;/g2&gt;,
Lean will insert &lt;g3&gt;p&lt;/g3&gt; at the first argument to &lt;g4&gt;Point.foo&lt;/g4&gt; of type
&lt;g5&gt;Point&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T180508Z" creationid="tlqk35" creationdate="20220528T180508Z">
        <seg>더 일반적으로 &lt;g2&gt;p : Point&lt;/g2&gt;일 때 제시된 표현식 &lt;g1&gt;p.foo x y z&lt;/g1&gt;에 대해, 린은 &lt;g5&gt;Point&lt;/g5&gt;형의 첫 번째 인수로 &lt;g4&gt;Point.foo&lt;/g4&gt;에  &lt;g3&gt;p&lt;/g3&gt;를 삽입할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More importantly, the cases tactic will detect any items
in the local context that depend on the target variable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164631Z" creationid="tlqk3" creationdate="20220527T164631Z">
        <seg>더 중요하게 cases 전략은 대상 변수에 의존하는 지역 상황 속 임의의 항목을 감지할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More information can be found on the
Lean &lt;g1&gt;documentation pages&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173553Z" creationid="tlqk35" creationdate="20220524T173553Z">
        <seg>린에 대한 더 많은 정보는 &lt;g1&gt;documentation pages&lt;/g1&gt;에서 찾을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More interestingly, patterns can involve nested
constructors, as in the following examples.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161918Z" creationid="tlqk3" creationdate="20220529T161905Z">
        <seg>더 흥미롭게도 패턴은 다음 예제에 있는 중첩된 생성자에도 관여할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More on Implicit Arguments</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T184142Z" creationid="tlqk3" creationdate="20220525T184142Z">
        <seg>암시적인 인수에 대해 더 알아보기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More on Namespaces</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175445Z" creationid="tlqk35" creationdate="20220524T175445Z">
        <seg>이름공간에 대해 더 알아보기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More on Sections</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175439Z" creationid="tlqk35" creationdate="20220524T175439Z">
        <seg>섹션에 대해 더 알아보기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More on the Proof Language</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183223Z" creationid="tlqk35" creationdate="20220321T183223Z">
        <seg>증명 언어에 대한 자세한 내용</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More precisely,
Lean's parser follows a local &lt;g1&gt;longest parse&lt;/g1&gt; rule in the presence of
ambiguous grammars: when parsing the right-hand side of &lt;g2&gt;a ~&lt;/g2&gt; in
&lt;g3&gt;a ~ b ~ c&lt;/g3&gt;, it will continue parsing as long as possible (as the current
precedence allows), not stopping after &lt;g4&gt;b&lt;/g4&gt; but parsing &lt;g5&gt;~ c&lt;/g5&gt; as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123635Z" creationid="tlqk3" creationdate="20220526T123635Z">
        <seg>더 정확히는 린의 구문분석기는 모호한 문법의 존재에 대해 지역의 &lt;g1&gt;가장 긴 구문분석&lt;/g1&gt; 규칙을 따릅니다. &lt;g3&gt;a ~ b ~ c&lt;/g3&gt;에서 &lt;g2&gt;a ~&lt;/g2&gt;의 우변을 분석할 때 구문분석기는 (현재 우선순위가 허용하는 만큼) 가능한 최대한 분석을 지속할 것입니다. &lt;g4&gt;b&lt;/g4&gt; 뒤에서 멈추지 않고  &lt;g5&gt;~ c&lt;/g5&gt;에서도 분석을 멈추지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More precisely, it shows that the law of the excluded middle
follows from &lt;g2&gt;Classical.choice&lt;/g2&gt;, &lt;g3&gt;propext&lt;/g3&gt;, and &lt;g4&gt;funext&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185003Z" creationid="tlqk3" creationdate="20220610T185003Z">
        <seg>보다 정확히 &lt;g2&gt;Classical.choice&lt;/g2&gt;, &lt;g3&gt;propext&lt;/g3&gt;, &lt;g4&gt;funext&lt;/g4&gt;로부터 배중률을 따른다는 것을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More specifically, Lean is based on a version of a system
known as the Calculus of Constructions with inductive types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151634Z" creationid="tlqk35" creationdate="20220321T132056Z">
        <seg>더 구체적으로 Lean은 귀납형(inductive types)의 직관주의적 계산법(calculus of Construction)으로 알려진 시스템에 기반한 버전입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More to the point, it can be viewed as a system for writing programs with a precise semantics, as well as
reasoning about the functions that the programs compute.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131607Z" creationid="tlqk35" creationdate="20220321T131607Z">
        <seg>더욱이 이것은 정밀한 의미를 갖는 편집프로그램이나 프로그램이 계산하는 함수에 대한 추론 프로그램으로도 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, &lt;g2&gt;a+b&lt;/g2&gt;, &lt;g3&gt;a*b&lt;/g3&gt;, &lt;g4&gt;a-b&lt;/g4&gt;, &lt;g5&gt;a/b&lt;/g5&gt;, and &lt;g6&gt;a%b&lt;/g6&gt; are notations for the heterogeneous versions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165345Z" creationid="tlqk3" creationdate="20220604T165345Z">
        <seg>게다가 &lt;g2&gt;a+b&lt;/g2&gt;, &lt;g3&gt;a*b&lt;/g3&gt;, &lt;g4&gt;a-b&lt;/g4&gt;, &lt;g5&gt;a/b&lt;/g5&gt;과 &lt;g6&gt;a%b&lt;/g6&gt;은 이형 버전에 대한 표기입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, &lt;g5&gt;Type u&lt;/g5&gt; is also just
syntactic sugar for &lt;g6&gt;Sort (u+1)&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T105430Z" creationid="tlqk35" creationdate="20220321T155755Z">
        <seg>게다가 &lt;g5&gt;Type u&lt;/g5&gt;도 &lt;g6&gt;Sort (u+1)&lt;/g6&gt;에 대한 문법 설탕입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, Lean flags an error
if the selected goal is not fully solved at the end of the &lt;g2&gt;case&lt;/g2&gt;
block.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T061544Z" creationid="tlqk35" creationdate="20220522T061544Z">
        <seg>게다가 린은 선택된 목표가 &lt;g2&gt;case&lt;/g2&gt; 블록의 끝에서 완전히 풀리지 않았다면 오류를 표시합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, Lean provides convenient notation
for defining instances of a given structure.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173328Z" creationid="tlqk35" creationdate="20220528T173328Z">
        <seg>게다가 린은 주어진 구조체의 개체를 정의하는데 편리한 기호를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, decidability is preserved under propositional
connectives:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173052Z" creationid="tlqk3" creationdate="20220604T173052Z">
        <seg>게다가 결정 가능성은 명제 연결사 하에 보존됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, if instances are
declared in other modules, the order in which they are tried depends
on the order in which namespaces are opened.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181419Z" creationid="tlqk3" creationdate="20220604T181419Z">
        <seg>또한 개체가 다른 모듈에서 선언된 경우 시도되는 순서는 이름공간이 열린 순서에 의존합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, once we make this identification, the rules for implication
show that we can pass back and forth between &lt;g1&gt;Implies p q&lt;/g1&gt; and
&lt;g2&gt;p → q&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T104537Z" creationid="tlqk35" creationdate="20220321T155550Z">
        <seg>더욱이 한 번 우리가 이런 식별을 하면 함의 규칙은 &lt;g1&gt;Implies p q&lt;/g1&gt;과 &lt;g2&gt;p → q&lt;/g2&gt;의 앞뒤를 오갈 수 있음을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, tactics offer a gateway to using Lean's automation,
since automated procedures are themselves tactics.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082755Z" creationid="tlqk35" creationdate="20220321T184343Z">
        <seg>게다가 자동화된 절차 자체가 전략이므로 전략은 린의 자동화를 사용하기 위한 관문을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, the
constructors and the recursors provide the only means of defining
functions on these types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160006Z" creationid="tlqk3" creationdate="20220529T160006Z">
        <seg>게다가 생성자와 재귀자는 이 유형에 대한 함수 정의의 유일한 수단을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, the
output indicates that the first argument is implicit.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153759Z" creationid="tlqk35" creationdate="20220321T153759Z">
        <seg>게다가 출력은 첫 번째 인수가 암시적임을 가리킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, the &lt;g5&gt;zero = n + 1&lt;/g5&gt; case is unreachable, and the canonical way to discard such
a case is to use &lt;g6&gt;noConfusion&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183800Z" creationid="tlqk3" creationdate="20220603T183800Z">
        <seg>게다가 &lt;g5&gt;zero = n + 1&lt;/g5&gt; 경우는 도달할 수 없고 정식 방법으로 이 경우를 버리려면 &lt;g6&gt;noConfusion&lt;/g6&gt;을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moreover, you can use a "wildcard" asterisk to simplify all the hypotheses and the goal:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T121416Z" creationid="tlqk35" creationdate="20220524T161754Z">
        <seg>게다가 여러분은 "와일드카드" *(asterisk)로 모든 가정과 목표를 간단히 하는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most of
these commands have global effects, which is to say, that they remain
in effect not only in the current file, but also in any file that
imports it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T182353Z" creationid="tlqk3" creationdate="20220525T182353Z">
        <seg>대개 이런 명령들은 전역 효과를 갖습니다. 그 말은 즉, 그들이 현재 파일 뿐 아니라 그것을 불러오는 모든 파일에 대해 영향이 남는다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most parts are optional.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173656Z" creationid="tlqk35" creationdate="20220528T173656Z">
        <seg>대부분은 선택적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Moving a hypothesis into the goal yields an implication:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091108Z" creationid="tlqk35" creationdate="20220522T064037Z">
        <seg>가정을 목표 속으로 옮겨 함의를 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Much of the background information you will
need in order to do this is not specific to Lean at all.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T132021Z" creationid="tlqk35" creationdate="20220321T132021Z">
        <seg>이를 배우기 위해 필요한 대부분의 배경지식은 Lean으로만 국한되어 있지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiple rewrites can be combined using the notation &lt;g1&gt;rw [t_1, ..., t_n]&lt;/g1&gt;,
which is just shorthand for &lt;g2&gt;rw t_1; ...; rw t_n&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114041Z" creationid="tlqk35" creationdate="20220524T154555Z">
        <seg>다수의 재작성은 &lt;g1&gt;rw [t_1, ..., t_n]&lt;/g1&gt; 표기로 합쳐질 수 있습니다. 
이것은 &lt;g2&gt;rw t_1; ...; rw t_n&lt;/g2&gt;을 간략히 한 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiple tactic applications can be written in a single line by concatenating with a semicolon.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084803Z" creationid="tlqk35" creationdate="20220522T060802Z">
        <seg>다수의 전략들은 세미콜론으로 연결해 한 줄로 작성될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mutual Recursion</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173321Z" creationid="tlqk3" creationdate="20220603T173321Z">
        <seg>상호적인 재귀</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mutual and Nested Inductive Types</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152315Z" creationid="tlqk35" creationdate="20220528T164349Z">
        <seg>상호적으로 중첩된 귀납형</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mutual recursive definitions also provide natural ways of working with mutual and nested inductive types, as described in :numref:&lt;g1&gt;mutual_and_nested_inductive_types&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174350Z" creationid="tlqk3" creationdate="20220603T174350Z">
        <seg>상호적으로 재귀적인 정의도 :numref:&lt;g1&gt;상호적이고 중첩된 재귀형&lt;/g1&gt;에서 설명한 것처럼 상호적이고  중첩된 귀납형을 다루는 자연스러운 방식을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Named Arguments</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140434Z" creationid="tlqk3" creationdate="20220526T140418Z">
        <seg>이름 인자</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Named arguments also improve the readability of your code by
identifying what each argument represents.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140936Z" creationid="tlqk3" creationdate="20220526T140936Z">
        <seg>이름 지어진 인자들은 각 인자가 나타내는 것을 명시함으로써 여러분의 코드의 가독성을 개선합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Named arguments enable you to specify an argument for a parameter by
matching the argument with its name rather than with its position in
the parameter list.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140704Z" creationid="tlqk3" creationdate="20220526T140425Z">
        <seg>이름 인자는 여러분이 매개변수 리스트에 대한 그것의 위치보다는 그것의 이름으로 매개변수에 대한 인자를 명시하게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Names like
&lt;g4&gt;Prod.rec&lt;/g4&gt; are &lt;g5&gt;protected&lt;/g5&gt;, which means that one has to use the full
name even when the &lt;g6&gt;Prod&lt;/g6&gt; namespace is open.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T133931Z" creationid="tlqk3" creationdate="20220526T133931Z">
        <seg>&lt;g4&gt;Prod.rec&lt;/g4&gt;같은 이름은 &lt;g5&gt;protected&lt;/g5&gt;입니다. 그말은 누군가가 &lt;g6&gt;Prod&lt;/g6&gt; 이름공간을 개방했더라도 완전한 이름을 사용해야만 함을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Namespaces</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150201Z" creationid="tlqk35" creationdate="20220321T150201Z">
        <seg>이름공간(Namespaces)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Namespaces and sections serve different purposes:
namespaces organize data and sections declare variables for insertion
in definitions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150609Z" creationid="tlqk35" creationdate="20220321T150609Z">
        <seg>이름공간과 섹션은 다른 목적을 갖고 일합니다. 이름공간은 데이터를 정리하고 섹션은 정의의 삽입에 대해 변수를 선언합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Namespaces that have been closed can later be reopened, even in another file:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150550Z" creationid="tlqk35" creationdate="20220321T150550Z">
        <seg>닫힌 이름공간은 심지어 다른 파일일지라도 나중에 다시 열릴 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Navigation using the above commands can be tedious.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183548Z" creationid="tlqk3" creationdate="20220604T183548Z">
        <seg>위 명령을 사용한 탐색은 지루할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Negation and Falsity</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164157Z" creationid="tlqk35" creationdate="20220321T164157Z">
        <seg>부정과 거짓</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Negation, &lt;g1&gt;¬p&lt;/g1&gt;, is actually defined to be &lt;g2&gt;p → False&lt;/g2&gt;, so we
obtain &lt;g3&gt;¬p&lt;/g3&gt; by deriving a contradiction from &lt;g4&gt;p&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154507Z" creationid="tlqk35" creationdate="20220321T164220Z">
        <seg>부정 &lt;g1&gt;¬p&lt;/g1&gt;은 사실 &lt;g2&gt;p → False&lt;/g2&gt;로 정의 되었습니다. 그래서 &lt;g4&gt;p&lt;/g4&gt;로부터 모순을 유도하여 &lt;g3&gt;¬p&lt;/g3&gt;를 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, we use &lt;g1&gt;some&lt;/g1&gt; to choose an element from each of &lt;g2&gt;U&lt;/g2&gt; and &lt;g3&gt;V&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185614Z" creationid="tlqk3" creationdate="20220610T185614Z">
        <seg>다음으로 &lt;g1&gt;some&lt;/g1&gt;을 사용하여 &lt;g2&gt;U&lt;/g2&gt; 및 &lt;g3&gt;V&lt;/g3&gt; 각각으로부터 원소를 선택합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Nonetheless, it makes sense to describe the declarations
here, because they are straightforward variations on ordinary
inductive definitions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T164955Z" creationid="tlqk35" creationdate="20220528T164955Z">
        <seg>그래도 여전히 여기에 선언을 설명하는 것이 이치에 맞는 것 같습니다.왜냐하면 그들은 평범한 재귀적 정의에 직관적인 변형이기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Nor do you have
to name a section, which is to say, you can use an anonymous
&lt;g1&gt;section&lt;/g1&gt; / &lt;g2&gt;end&lt;/g2&gt; pair.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150138Z" creationid="tlqk35" creationdate="20220321T150138Z">
        <seg>섹션에 이름을 줄 필요도 없습니다. 그말은 즉슨, 여러분은 익명의 &lt;g1&gt;section&lt;/g1&gt; / &lt;g2&gt;end&lt;/g2&gt; 쌍을 사용할 수 있다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Not all of the information found here will be useful to you right
away.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173159Z" creationid="tlqk35" creationdate="20220524T173146Z">
        <seg>여기서 찾은 모든 정보가 여러분에게 바로 유용하지 않을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notably, however, there is only one constructor, &lt;g5&gt;refl&lt;/g5&gt;, which
is an element of &lt;g6&gt;Eq a a&lt;/g6&gt;, and the curly braces after the
constructor tell Lean to make the argument to &lt;g7&gt;refl&lt;/g7&gt;
explicit.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153747Z" creationid="tlqk35" creationdate="20220528T153747Z">
        <seg>하지만 주목할 점은 오직 &lt;g6&gt;Eq a a&lt;/g6&gt;의 원소인 한 생성자 &lt;g5&gt;refl&lt;/g5&gt;있습니다. 그리고 생성자 뒤의 중괄호는 린에게 &lt;g7&gt;refl&lt;/g7&gt;을 명시적인 인수로 만들게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notation</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T190612Z" creationid="tlqk3" creationdate="20220525T190612Z">
        <seg>기호</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notationally,
this hides the specification of the type, making it look as though
&lt;g2&gt;ident&lt;/g2&gt; simply takes an argument of any type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153317Z" creationid="tlqk35" creationdate="20220321T153317Z">
        <seg>표기상으로 &lt;g2&gt;ident&lt;/g2&gt;가 단순히 임의의 유형의 인수를 받을 수 있는 것처럼 만들어 유형의 명세를 감춥니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notations and Precedence</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T121326Z" creationid="tlqk3" creationdate="20220526T121326Z">
        <seg>기호와 결합순서</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note
that &lt;g10&gt;×&lt;/g10&gt; is a Unicode symbol.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140054Z" creationid="tlqk35" creationdate="20220321T140054Z">
        <seg>&lt;g10&gt;×&lt;/g10&gt;은 유니코드 기호임을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note &lt;g1&gt;Inhabited.default&lt;/g1&gt; doesn't have any explicit argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160148Z" creationid="tlqk3" creationdate="20220604T160148Z">
        <seg>&lt;g1&gt;Inhabited.default&lt;/g1&gt;가 어떤 명시적인 인수도 갖지 않음을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that
if we used &lt;g14&gt;notation&lt;/g14&gt; directly to introduce an infix notation like</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123211Z" creationid="tlqk3" creationdate="20220526T123211Z">
        <seg>만약 우리가 이처럼 &lt;g14&gt;notation&lt;/g14&gt;를 전위 표기를 바로 도입하도록 사용한다면</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;g11&gt;Eq a a&lt;/g11&gt; is the only inhabited type in the family of types
&lt;g12&gt;Eq a x&lt;/g12&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153941Z" creationid="tlqk35" creationdate="20220528T153941Z">
        <seg>&lt;g11&gt;Eq a a&lt;/g11&gt;는 &lt;g12&gt;Eq a x&lt;/g12&gt;형의 군에서 유일한 내장 유형임을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;g1&gt;Exists.intro&lt;/g1&gt; has implicit arguments: Lean has to infer
the predicate &lt;g2&gt;p : α → Prop&lt;/g2&gt; in the conclusion &lt;g3&gt;∃ x, p x&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T090254Z" creationid="tlqk35" creationdate="20220321T181019Z">
        <seg>&lt;g1&gt;Exists.intro&lt;/g1&gt;는 암시적 인수를 갖고 있습니다. 린은 결론 속 &lt;g3&gt;∃ x, p x&lt;/g3&gt;에서 술어 &lt;g2&gt;p : α → Prop&lt;/g2&gt;를 추론해야만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;g1&gt;Nat.mul_add&lt;/g1&gt; and &lt;g2&gt;Nat.add_mul&lt;/g2&gt; are alternative names
for &lt;g3&gt;Nat.left_distrib&lt;/g3&gt; and &lt;g4&gt;Nat.right_distrib&lt;/g4&gt;, respectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082629Z" creationid="tlqk35" creationdate="20220321T180000Z">
        <seg>&lt;g1&gt;Nat.mul_add&lt;/g1&gt;과 &lt;g2&gt;Nat.add_mul&lt;/g2&gt;은 각각 &lt;g3&gt;Nat.left_distrib&lt;/g3&gt;과 &lt;g4&gt;Nat.right_distrib&lt;/g4&gt;의 별명입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;g1&gt;WellFounded.fix&lt;/g1&gt; works equally well as an induction
principle.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165846Z" creationid="tlqk3" creationdate="20220603T165846Z">
        <seg>&lt;g1&gt;WellFounded.fix&lt;/g1&gt;는 귀납 원리와 같이 동등하게 동작함을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that &lt;g1&gt;x + y&lt;/g1&gt; is notation for &lt;g2&gt;Add.add x y&lt;/g2&gt; in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155014Z" creationid="tlqk3" creationdate="20220604T155014Z">
        <seg> &lt;g1&gt;x + y&lt;/g1&gt;는 린에서 &lt;g2&gt;Add.add x y&lt;/g2&gt;에 대한 기호임을 주의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that Lean hides the other goals inside the &lt;g1&gt;case&lt;/g1&gt; block.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085142Z" creationid="tlqk35" creationdate="20220522T061427Z">
        <seg>린은 &lt;g1&gt;case&lt;/g1&gt; 블록 속의 다른 목표를 숨깁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that Lean inferred a more general type using &lt;g1&gt;Sort&lt;/g1&gt; instead of &lt;g2&gt;Type&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134836Z" creationid="tlqk3" creationdate="20220526T134836Z">
        <seg>린은 &lt;g2&gt;Type&lt;/g2&gt;대신 &lt;g1&gt;Sort&lt;/g1&gt;를 사용하여 더 일반적인 유형을 추론함을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that double does &lt;g6&gt;not&lt;/g6&gt; have &lt;g7&gt;y&lt;/g7&gt; as argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175335Z" creationid="tlqk35" creationdate="20220524T175335Z">
        <seg>double은 &lt;g7&gt;y&lt;/g7&gt;를 인수로서 갖지 &lt;g6&gt;않음&lt;/g6&gt;을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that it is often useful to use numeric unicode subscripts,
entered as &lt;g1&gt;\0&lt;/g1&gt;, &lt;g2&gt;\1&lt;/g2&gt;, &lt;g3&gt;\2&lt;/g3&gt;, ..., for hypotheses, as we did in
this example.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T122935Z" creationid="tlqk35" creationdate="20220321T161817Z">
        <seg>수치 유니코드 밑첨자를 사용하는 것은 종종 유용합니다. 이 예제에서 그런 것처럼 가정에 대해 &lt;g1&gt;\0&lt;/g1&gt;, &lt;g2&gt;\1&lt;/g2&gt;, &lt;g3&gt;\2&lt;/g3&gt;, ..., 을 쳐서 입력할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that names automatically generated by Lean are inaccessible by default.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T063146Z" creationid="tlqk35" creationdate="20220522T063146Z">
        <seg>린에 의해 자동으로 생성된 이름들은 기본적으로 접근할 수 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the &lt;g1&gt;match&lt;/g1&gt; expression is compiled using the &lt;g2&gt;recursor&lt;/g2&gt; &lt;g3&gt;Weekday.rec&lt;/g3&gt; generated when
you declare the inductive type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151947Z" creationid="tlqk3" creationdate="20220526T150557Z">
        <seg>&lt;g1&gt;match&lt;/g1&gt; 표현식은 여러분이 귀납형을 선언할 때 생성한 &lt;g2&gt;recursor&lt;/g2&gt; &lt;g3&gt;Weekday.rec&lt;/g3&gt;을 사용하여 컴파일 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the &lt;g1&gt;theorem&lt;/g1&gt; command is really a version of the
&lt;g2&gt;def&lt;/g2&gt; command: under the propositions and types
correspondence, proving the theorem &lt;g3&gt;p → q → p&lt;/g3&gt; is really the same
as defining an element of the associated type.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072047Z" creationid="tlqk35" creationdate="20220321T160842Z">
        <seg>&lt;g1&gt;theorem&lt;/g1&gt; 명령은 &lt;g2&gt;def&lt;/g2&gt; 명령의 한 버전임을 보세요. 명제와 유형 대응 하에서 정리 &lt;g3&gt;p → q → p&lt;/g3&gt;를 증명하는 것은 연관된 유형의 원소를 정의하는 것과 동일합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the anonymous constructor
notation &lt;g5&gt;⟨w, hw.right, hw.left⟩&lt;/g5&gt; abbreviates a nested constructor
application; we could equally well have written &lt;g6&gt;⟨w, ⟨hw.right, hw.left⟩⟩&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071108Z" creationid="tlqk35" creationdate="20220321T181633Z">
        <seg>익명 생성자 기호 &lt;g5&gt;⟨w, hw.right, hw.left⟩&lt;/g5&gt;가 중첩된 생성자 활용을 간략히 함을 보세요. 우리는 이와 동등하게 &lt;g6&gt;⟨w, ⟨hw.right, hw.left⟩⟩&lt;/g6&gt;로도 작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the patterns are separated by commas.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162942Z" creationid="tlqk3" creationdate="20220529T162942Z">
        <seg>패턴이 콤마로 나뉜 것에 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the syntax is similar to the one used in &lt;g1&gt;match&lt;/g1&gt; expressions.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092509Z" creationid="tlqk35" creationdate="20220522T070416Z">
        <seg>이 문법은 &lt;g1&gt;match&lt;/g1&gt; 표현식에서 사용된 것과 비슷합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the universe
polymorphic &lt;g2&gt;compose&lt;/g2&gt; is even more verbose than the one previously defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134335Z" creationid="tlqk3" creationdate="20220526T134335Z">
        <seg>심지어 세계 다형적 &lt;g2&gt;compose&lt;/g2&gt;는 이전에 정의한 것보다 더 장황합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that the various &lt;g1&gt;simp&lt;/g1&gt; options we have discussed --- giving an
explicit list of rules, and using &lt;g2&gt;at&lt;/g2&gt; to specify the location --- can be combined,
but the order they are listed is rigid.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T125829Z" creationid="tlqk35" creationdate="20220524T165658Z">
        <seg>이제까지 논의한 다양한 &lt;g1&gt;simp&lt;/g1&gt; 옵션은 --규칙들의 명시적인 리스트를 주는 것과 &lt;g2&gt;at&lt;/g2&gt;으로
위치를 나타냄-- 합쳐질 수 있습니다. 그러나 나열된 순서는 변하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that this example is somewhat artificial, one could also do:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183357Z" creationid="tlqk3" creationdate="20220604T183357Z">
        <seg>이 예제는 다소 인위적이며 누군가는 다음과 같이 할 수 있음을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that up to the names we have chosen for the variables, the
definitions are identical to the proofs of the analogous propositions
for conjunction and disjunction.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T103839Z" creationid="tlqk35" creationdate="20220523T073708Z">
        <seg>우리가 변수로 선택한 이름에 한해 한 정의들은 
논리곱와 논리합에 대한 유사한 명제의 증명과 
동일함을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that we can omit recursive equations for "unreachable" cases such
as &lt;g1&gt;head nil&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T184000Z" creationid="tlqk3" creationdate="20220603T184000Z">
        <seg>우리는 재귀 방정식을 &lt;g1&gt;head nil&lt;/g1&gt; 같이 "도달할 수 없는" 경우에 대해 생략할 수 있음을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that you can define a
binary operation like &lt;g5&gt;and&lt;/g5&gt; using &lt;g6&gt;match&lt;/g6&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152449Z" creationid="tlqk3" creationdate="20220526T152449Z">
        <seg>여러분이  &lt;g5&gt;and&lt;/g5&gt;같은 이항 연산을 &lt;g6&gt;match&lt;/g6&gt;를 사용해 정의할 수 있다는 것을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that you can double a natural number &lt;g1&gt;n&lt;/g1&gt; by &lt;g2&gt;double { add := Nat.add } n&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153447Z" creationid="tlqk3" creationdate="20220604T153447Z">
        <seg>여러분은 자연수 &lt;g1&gt;n&lt;/g1&gt;을 &lt;g2&gt;double { add := Nat.add } n&lt;/g2&gt;으로 두 배로 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that you chain instances and generalize the second instance.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164254Z" creationid="tlqk3" creationdate="20220604T164254Z">
        <seg>여러분은 개체를 연결하고 두 번째 개체를 일반화함을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that, Lean "closes" the declaration by adding any local variable occurring in the
&lt;g5&gt;let rec&lt;/g5&gt; declaration as additional parameters.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182210Z" creationid="tlqk3" creationdate="20220603T182210Z">
        <seg>린이 추가적인 매개변수로 &lt;g5&gt;let rec&lt;/g5&gt; 선언에서 생긴 임의의 지역변수를 추가함으로써 선언이 닫힌다는 점을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice also that, when the value of an argument is not needed in the
definition, you can use an underscore instead.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163136Z" creationid="tlqk3" creationdate="20220529T163136Z">
        <seg>인수의 값은 정의에서 필요하지 않음도 주목하세요. 여러분은 대신 밑줄 문자를 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice here we called the &lt;g1&gt;double&lt;/g1&gt; function to create the first
parameter to &lt;g2&gt;add&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144328Z" creationid="tlqk35" creationdate="20220321T144328Z">
        <seg>여기서 우리가 &lt;g2&gt;add&lt;/g2&gt;의 첫 번째 매개변수를 만들기 위해 &lt;g1&gt;double&lt;/g1&gt; 함수를 호출한 것을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that &lt;g12&gt;propDecidable&lt;/g12&gt; is a scoped instance and is activated
by the &lt;g13&gt;open Classical&lt;/g13&gt; command.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191423Z" creationid="tlqk3" creationdate="20220610T191423Z">
        <seg>&lt;g12&gt;propDecidable&lt;/g12&gt;은 범위가 지정된 개체이며 &lt;g13&gt;open Classical&lt;/g13&gt; 명령에 의해 활성화됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that &lt;g1&gt;(a : α) → β&lt;/g1&gt; makes sense for any expression &lt;g2&gt;β :
Type&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151858Z" creationid="tlqk35" creationdate="20220321T151858Z">
        <seg>&lt;g1&gt;(a : α) → β&lt;/g1&gt;는  모든 식  &lt;g2&gt;β : Type&lt;/g2&gt;에 대해 성립하는 것을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that &lt;g1&gt;cases&lt;/g1&gt; can be used to produce data as well as prove propositions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164947Z" creationid="tlqk3" creationdate="20220527T164947Z">
        <seg>&lt;g1&gt;cases&lt;/g1&gt;는 데이터를 만드는 것만 아니라 명제를 증명하는 데에도 사용될 수 있음을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that a type with multiple constructors is disjunctive: an
element of &lt;g1&gt;Sum α β&lt;/g1&gt; is either of the form &lt;g2&gt;inl a&lt;/g2&gt; &lt;g3&gt;or&lt;/g3&gt; of the
form &lt;g4&gt;inl b&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T155959Z" creationid="tlqk3" creationdate="20220526T155959Z">
        <seg>다수의 생성자가 있는 유형은 분리적임을 주목하세요. &lt;g1&gt;Sum α β&lt;/g1&gt;의 원소는 &lt;g2&gt;inl a&lt;/g2&gt;의 형태 &lt;g3&gt;또는&lt;/g3&gt; &lt;g4&gt;inl b&lt;/g4&gt;의 형태입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that an existential proposition is very similar to a sigma
type, as described in dependent types section.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T091840Z" creationid="tlqk35" creationdate="20220321T181643Z">
        <seg>존재 명제는 의존 유형론 섹션에서 설명한 시그마 유형과 아주 닮았음을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that and-introduction and and-elimination are similar to the
pairing and projection operations for the cartesian product.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124938Z" creationid="tlqk35" creationdate="20220321T162854Z">
        <seg>and-도입과 and-제거는 카테시안 곱 연산에 대해 순서쌍을 구성하는 것과 순서쌍에서 원소를 추출하는 연산과 유사합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that applying a term &lt;g1&gt;t : α → β&lt;/g1&gt; to a term &lt;g2&gt;s : α&lt;/g2&gt; yields
an expression &lt;g3&gt;t s : β&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143513Z" creationid="tlqk35" creationdate="20220321T143513Z">
        <seg>항 &lt;g1&gt;t : α → β&lt;/g1&gt;을 항 &lt;g2&gt;s : α&lt;/g2&gt;에 적용하여 표현식 &lt;g3&gt;t s : β&lt;/g3&gt;을 얻는 것을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that if &lt;g1&gt;α&lt;/g1&gt; is any
type, we can form the type &lt;g2&gt;α → Prop&lt;/g2&gt; of all predicates on &lt;g3&gt;α&lt;/g3&gt;
(the "power type of &lt;g4&gt;α&lt;/g4&gt;").</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070852Z" creationid="tlqk35" creationdate="20220321T175148Z">
        <seg>만약 &lt;g1&gt;α&lt;/g1&gt;가 임의의 유형이라면, 우리는 모든 &lt;g3&gt;α&lt;/g3&gt;에 대한 모든 술어로 &lt;g2&gt;α → Prop&lt;/g2&gt;형을 만들 수 있습니다. (" &lt;g4&gt;α&lt;/g4&gt;형의 멱(power)")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that if &lt;g1&gt;α&lt;/g1&gt; is any type, we can represent a unary predicate
&lt;g2&gt;p&lt;/g2&gt; on &lt;g3&gt;α&lt;/g3&gt; as an object of type &lt;g4&gt;α → Prop&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T060812Z" creationid="tlqk35" creationdate="20220321T172626Z">
        <seg>&lt;g1&gt;α&lt;/g1&gt; 가 임의의 유형이라면 &lt;g3&gt;α&lt;/g3&gt;에 대해 단항 술어 &lt;g2&gt;p&lt;/g2&gt;를  &lt;g4&gt;α → Prop&lt;/g4&gt;형의 대상으로 나타낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that implicit arguments are inserted eagerly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T184901Z" creationid="tlqk3" creationdate="20220525T184901Z">
        <seg>암시적인 인수는 간절히 삽입됨을 주의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that now the first &lt;g1&gt;#check&lt;/g1&gt; command gives the type of the
identifier, &lt;g2&gt;id&lt;/g2&gt;, without inserting any placeholders.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153754Z" creationid="tlqk35" creationdate="20220321T153754Z">
        <seg>현재 첫 번째 &lt;g1&gt;#check&lt;/g1&gt; 명령은 식별자 &lt;g2&gt;id&lt;/g2&gt;의 유형을 어떤 플레이스 홀더도 삽입하지 않고 주는 것을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the &lt;g1&gt;cons&lt;/g1&gt; constructor takes an element of
&lt;g2&gt;Vector α n&lt;/g2&gt; and returns an element of &lt;g3&gt;Vector α (n+1)&lt;/g3&gt;, thereby using an
element of one member of the family to build an element of another.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153334Z" creationid="tlqk35" creationdate="20220528T153334Z">
        <seg>&lt;g1&gt;cons&lt;/g1&gt; 생성자는 &lt;g2&gt;Vector α n&lt;/g2&gt;의 원소를 받고 &lt;g3&gt;Vector α (n+1)&lt;/g3&gt;의 원소를 반환합니다. 그러므로 군의 한 구성원의 원소를 다른 원소를 만드는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the expression &lt;g1&gt;m + 3 * k&lt;/g1&gt; is erased by &lt;g2&gt;generalize&lt;/g2&gt;; all
that matters is whether it is of the form &lt;g3&gt;0&lt;/g3&gt; or &lt;g4&gt;succ a&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T170356Z" creationid="tlqk3" creationdate="20220527T170356Z">
        <seg>표현식 &lt;g1&gt;m + 3 * k&lt;/g1&gt;은 &lt;g2&gt;generalize&lt;/g2&gt;에 의해 지워짐을 보세요. 중요한 것은 &lt;g3&gt;0&lt;/g3&gt; 혹은 &lt;g4&gt;succ a&lt;/g4&gt;의 형태인지 아닌지 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the lambda abstractions &lt;g1&gt;hp : p&lt;/g1&gt; and &lt;g2&gt;hq : q&lt;/g2&gt; can be
viewed as temporary assumptions in the proof of &lt;g3&gt;t1&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T120244Z" creationid="tlqk35" creationdate="20220321T161038Z">
        <seg>람다 추상화 &lt;g1&gt;hp : p&lt;/g1&gt;과 &lt;g2&gt;hq : q&lt;/g2&gt;는 &lt;g3&gt;t1&lt;/g3&gt;의 증명에서 일시적인 가정이라고 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the last example specifies that the rewrite
should take place on the right-hand side by specifying the second
argument to &lt;g10&gt;Nat.add_comm&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120014Z" creationid="tlqk35" creationdate="20220524T160039Z">
        <seg>마지막 예제는 &lt;g10&gt;Nat.add_comm&lt;/g10&gt;의 
두 번째 인수를 제시하여 우변에서 재작성이 일어나야 함을 보입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the meaning of the expression &lt;g1&gt;let a := t1; t2&lt;/g1&gt; is very
similar to the meaning of &lt;g2&gt;(fun a =&gt; t2) t1&lt;/g2&gt;, but the two are not
the same.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144909Z" creationid="tlqk35" creationdate="20220321T144909Z">
        <seg>표현식 &lt;g1&gt;let a := t1; t2&lt;/g1&gt;의 의미는 &lt;g2&gt;(fun a =&gt; t2) t1&lt;/g2&gt;의 의미와 아주 비슷함을 주목하세요. 그러나 이 둘은 같지는 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the product type depends on parameters &lt;g1&gt;α β : Type&lt;/g1&gt;
which are arguments to the constructors as well as &lt;g2&gt;Prod&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T155421Z" creationid="tlqk3" creationdate="20220526T155421Z">
        <seg>곱 유형은 생성자와 &lt;g2&gt;Prod&lt;/g2&gt;의 인수인 매개변수 &lt;g1&gt;α β : Type&lt;/g1&gt;에 의존하였음을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the second example and the last two examples require the
assumption that there is at least one element &lt;g1&gt;a&lt;/g1&gt; of type &lt;g2&gt;α&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072926Z" creationid="tlqk35" creationdate="20220321T183157Z">
        <seg>두 번째 예제와 마지막 두 예제는 &lt;g2&gt;α&lt;/g2&gt;형의 한 원소 &lt;g1&gt;a&lt;/g1&gt;가 적어도 하나 있다는 가정을 요구한다는 것을 유의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the second implicit parameter to &lt;g1&gt;Eq.subst&lt;/g1&gt;, which
provides the context in which the substitution is to occur, has type
&lt;g2&gt;α → Prop&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T083141Z" creationid="tlqk35" creationdate="20220321T180044Z">
        <seg>어디에서 대체가 일어나는지에 대한 맥락을 제공하는 &lt;g1&gt;Eq.subst&lt;/g1&gt;의 두번째 암시적 인수는 &lt;g2&gt;α → Prop&lt;/g2&gt;형을 가지는 것을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that there is enough information in the full expression for
Lean to infer the types of &lt;g1&gt;hp&lt;/g1&gt; and &lt;g2&gt;hq&lt;/g2&gt; as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154135Z" creationid="tlqk35" creationdate="20220321T164048Z">
        <seg>린이 &lt;g1&gt;hp&lt;/g1&gt;와 &lt;g2&gt;hq&lt;/g2&gt;의 유형을 추론하는데 전체 표현식 속에 충분한 정보가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that we do not include the types &lt;g1&gt;α&lt;/g1&gt; and &lt;g2&gt;β&lt;/g2&gt; in the target
of the constructors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152934Z" creationid="tlqk3" creationdate="20220526T152934Z">
        <seg>우리가 생성자의 대상에 &lt;g1&gt;α&lt;/g1&gt;형과 &lt;g2&gt;β&lt;/g2&gt;형을 포함하지 않은 것을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that we locally define the notation &lt;g1&gt;{a₁, a₂}&lt;/g1&gt; for ordered
pairs as &lt;g2&gt;Quotient.mk (a₁, a₂)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T180451Z" creationid="tlqk3" creationdate="20220610T180451Z">
        <seg>순서쌍에 대한 표기 &lt;g1&gt;{a₁, a₂}&lt;/g1&gt;을 지역적으로 &lt;g2&gt;Quotient.mk (a₁, a₂)&lt;/g2&gt;로 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that, once again, when &lt;g1&gt;Nat.recOn&lt;/g1&gt; is used in the context of
a proof, it is really the induction principle in disguise.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T161151Z" creationid="tlqk3" creationdate="20220527T161151Z">
        <seg>다시 한 번 &lt;g1&gt;Nat.recOn&lt;/g1&gt;은 증명의 맥락에서 사용됨을 주목하세요. 이는 정말로 귀납 원리가 위장한 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that, under the propositions-as-types correspondence, we can
use &lt;g1&gt;match&lt;/g1&gt; to prove theorems as well as define functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151724Z" creationid="tlqk3" creationdate="20220526T151724Z">
        <seg>유형으로써 명제 대응 하에서 우리는 합수를 정의하는 것 뿐만 아니라 정리를 증명하는데 &lt;g1&gt;match&lt;/g1&gt;를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now that we have proved that &lt;g1&gt;eqv&lt;/g1&gt; is an equivalence relation, we
can construct a &lt;g2&gt;Setoid (α × α)&lt;/g2&gt;, and use it to define the type
&lt;g3&gt;UProd α&lt;/g3&gt; of unordered pairs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T180310Z" creationid="tlqk3" creationdate="20220610T180310Z">
        <seg>&lt;g1&gt;eqv&lt;/g1&gt;가 등가 관계임을 증명했으므로 &lt;g2&gt;Setoid(α × α)&lt;/g2&gt;를 구성하고 이를 사용하여 순서가 없는 쌍 &lt;g3&gt;UProd α&lt;/g3&gt;형을 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now to get a bit more abstract, you can also specify arguments that
are like type parameters:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144422Z" creationid="tlqk35" creationdate="20220321T144422Z">
        <seg>이제 약간 더 추상적으로 갑시다. 여러분은 유형 매개변수같은 인수를 지정할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now we can apply the theorem &lt;g1&gt;t1&lt;/g1&gt; just as a function application.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121050Z" creationid="tlqk35" creationdate="20220321T161146Z">
        <seg>이제 우리는 정리 &lt;g1&gt;t1&lt;/g1&gt;을 함수 활용을 하는 것처럼 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now we populate the class with some instances:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160433Z" creationid="tlqk3" creationdate="20220604T160433Z">
        <seg>이제 몇몇 개체로 클래스를 채우겠습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now, given that
&lt;g5&gt;h&lt;/g5&gt; has type &lt;g6&gt;∀ x : α, p x ∧ q x&lt;/g6&gt;, the expression &lt;g7&gt;h y&lt;/g7&gt; has type
&lt;g8&gt;p y ∧ q y&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064644Z" creationid="tlqk35" creationdate="20220321T173844Z">
        <seg>이제 &lt;g5&gt;h&lt;/g5&gt;가 &lt;g6&gt;∀ x : α, p x ∧ q x&lt;/g6&gt;형을 갖는다고 해봅시다. 그러면 표현식 &lt;g7&gt;h y&lt;/g7&gt;는 &lt;g8&gt;p y ∧ q y&lt;/g8&gt;형을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now, we explore another application.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155131Z" creationid="tlqk3" creationdate="20220604T155131Z">
        <seg>여기서 우리는 다른 적용을 탐색합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now, we reveal how the notation &lt;g7&gt;a*b&lt;/g7&gt; is defined in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170133Z" creationid="tlqk3" creationdate="20220604T170133Z">
        <seg>이제 우리는 린에서 기호 &lt;g7&gt;a*b&lt;/g7&gt;이 어떻게 정의되는지 드러냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numerals</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162145Z" creationid="tlqk3" creationdate="20220604T162145Z">
        <seg>수치값(Numerals)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numerals are overloaded in Lean, but when the type of a numeral cannot
be inferred, Lean assumes, by default, that it is a natural number.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153644Z" creationid="tlqk35" creationdate="20220321T153644Z">
        <seg>수치들은 Lean에 매우 많이 있습니다. 그러나 수치 유형이 추론되지 못할 때, 린은 기본적으로 그걸 자연수라고 가정합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Numerals are polymorphic in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162157Z" creationid="tlqk3" creationdate="20220604T162157Z">
        <seg>수치값들은 린에서 다형적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Objects</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181844Z" creationid="tlqk35" creationdate="20220528T181844Z">
        <seg>대상(개체, 객체)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, a fundamental property of equality is that it is an equivalence relation:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T175431Z" creationid="tlqk35" creationdate="20220321T175431Z">
        <seg>물론 동등의 기초적인 성질은 등가 관계라는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, it is unsound
as a proof method -- for example, you can use it to prove &lt;g2&gt;False&lt;/g2&gt; --
and Lean produces severe warnings when files use or import theorems
which depend on it.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165144Z" creationid="tlqk35" creationdate="20220321T170302Z">
        <seg>물론 증명 방법으로 불건전합니다. -- 예를 들어, 여러분은 &lt;g2&gt;False&lt;/g2&gt;을 증명하는데 그것을 사용할 수 있습니다. --그러면 린은 그것에 의존하는 정리를 불러오거나 그런 파일을 사용할 때 심각한 경고를 보냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, it would be highly cumbersome for users to manually pass the
implementations around in this way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153552Z" creationid="tlqk3" creationdate="20220604T153552Z">
        <seg>당연히 이처럼 구현을 수동적으로 넘겨야 한다면 사용자에게 아주 성가실 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, the cast is
vacuous, because &lt;g7&gt;Nat&lt;/g7&gt; does not depend on &lt;g8&gt;f&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175045Z" creationid="tlqk3" creationdate="20220605T175045Z">
        <seg>물론 &lt;g7&gt;Nat&lt;/g7&gt;는 &lt;g8&gt;f&lt;/g8&gt;에 의존하지 않기 때문에 캐스트는 무의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, the quotient construction is most commonly used in
situations when &lt;g1&gt;r&lt;/g1&gt; is an equivalence relation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183734Z" creationid="tlqk3" creationdate="20220605T183734Z">
        <seg>물론 몫 생성은 &lt;g1&gt;r&lt;/g1&gt;이 등가 관계인 상황에서 가장 흔히 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, this blocks any
meaningful computation: by the interpretation of &lt;g5&gt;Prop&lt;/g5&gt;, &lt;g6&gt;h&lt;/g6&gt;
contains no information at all as to how to find such an element.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T183430Z" creationid="tlqk3" creationdate="20220610T183430Z">
        <seg>물론 이것은 의미 있는 계산을 막습니다. &lt;g5&gt;Prop&lt;/g5&gt;의 해석에 따르면 &lt;g6&gt;h&lt;/g6&gt;에는 그러한 원소를 찾는 방법에 대한 정보가 전혀 포함되어 있지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, this, too, can block
computation according to the rules of CIC, but it does not block
bytecode evaluation, as described above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172615Z" creationid="tlqk3" creationdate="20220605T172615Z">
        <seg>당연히 이것도 CIC의 규칙에 따라 계산이 막힙니다. 그러나 위에서 설명했듯이 이것은 바이트 코드 평가를 막지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Of course, wildcards are allowed:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183731Z" creationid="tlqk3" creationdate="20220604T183731Z">
        <seg>당연히 와일드카드도 허용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often proofs move from one fact to the next, so this can be effective
in eliminating the clutter of lots of labels.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T073456Z" creationid="tlqk35" creationdate="20220321T183348Z">
        <seg>증명은 종종 한 사실에서 다음 사실로 움직이므로 많은 레이블들로 인해 생기는 혼동을 없애는 데 효과적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often the name of theorem simply describes the conclusion:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T132212Z" creationid="tlqk3" creationdate="20220526T132212Z">
        <seg>정리의 이름은 종종 결론을 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often, when you import a module, you will want to open one or
more of the namespaces it contains, to have access to the short
identifiers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150448Z" creationid="tlqk35" creationdate="20220321T150448Z">
        <seg>짧은 식별자로 접근하기 위해서 종종 여러분이 모듈을 가져오기(import) 할 때, 모듈이 담은 다수의 이름공간을 열기 원할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On the assumption that &lt;g8&gt;decide p = true&lt;/g8&gt; holds, &lt;g9&gt;of_decide_eq_true&lt;/g9&gt;
produces a proof of &lt;g10&gt;p&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174937Z" creationid="tlqk3" creationdate="20220604T174937Z">
        <seg>&lt;g8&gt;decide p = true&lt;/g8&gt;가 성립한다고 가정하면 &lt;g9&gt;of_decide_eq_true&lt;/g9&gt;는 &lt;g10&gt;p&lt;/g10&gt;의 증명을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On the other hand, &lt;g3&gt;#reduce fib &lt;n&gt;&lt;/g3&gt; is efficient because it uses the definition sent to the kernel that
is based on the &lt;g4&gt;brecOn&lt;/g4&gt; construction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165140Z" creationid="tlqk3" creationdate="20220603T165140Z">
        <seg>다른 한편 &lt;g3&gt;#reduce fib &lt;n&gt;&lt;/g3&gt;는 &lt;g4&gt;brecOn&lt;/g4&gt; 생성자에 기반한 커널에 보내져 정의를 사용하기 때문에 효율적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On the other hand, if &lt;g1&gt;p&lt;/g1&gt; is true, then, by function extensionality
and propositional extensionality, &lt;g2&gt;U&lt;/g2&gt; and &lt;g3&gt;V&lt;/g3&gt; are equal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185934Z" creationid="tlqk3" creationdate="20220610T185934Z">
        <seg>한편, &lt;g1&gt;p&lt;/g1&gt;가 참이면, 함수 확장성과 명제 확장성에 의해 &lt;g2&gt;U&lt;/g2&gt;와 &lt;g3&gt;V&lt;/g3&gt;는 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>On this basis, the
standard library provides a default element, &lt;g6&gt;defaulty&lt;/g6&gt;, of
any inhabited type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165808Z" creationid="tlqk3" creationdate="20220529T165808Z">
        <seg>이 기초로부터 표준 라이브러리는 임의의 거주 유형에 대해 기본 원소 &lt;g6&gt;defaulty&lt;/g6&gt;를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once
again, we can use arithmetic notation, as in the version below.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162448Z" creationid="tlqk3" creationdate="20220529T162448Z">
        <seg>다시 한 번 우리는 산술적 기호를 아래 버전에서 처럼 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once again, cases will revert, split, and then reintroduce depedencies in the context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165113Z" creationid="tlqk3" creationdate="20220527T165113Z">
        <seg>다시 한번, cases는 맥락의 종속물들을 되돌리고, 나누고, 재도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once again, it is the Curry-Howard isomorphism that allows
us to co-opt this mechanism for writing proofs as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071508Z" creationid="tlqk35" creationdate="20220321T182618Z">
        <seg>여기서도,  커리-하워드 동형은 증명을 작성하는 데에도 이 메커니즘을 끌어들이게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once again, using the propositions-as-types correspondence, the
variable &lt;g1&gt;h&lt;/g1&gt; of type &lt;g2&gt;r → s&lt;/g2&gt; can be viewed as the hypothesis, or
premise, that &lt;g3&gt;r → s&lt;/g3&gt; holds.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T122731Z" creationid="tlqk35" creationdate="20220321T161724Z">
        <seg>다시 한 번, 유형으로써 명제 대응을 사용해 &lt;g2&gt;r → s&lt;/g2&gt;형의 변수 &lt;g1&gt;h&lt;/g1&gt;는 &lt;g3&gt;r → s&lt;/g3&gt;을 성립시키는 가정 또는 전제라고 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once again, you should exercise judgment as to whether such
abbreviations enhance or diminish readability.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154347Z" creationid="tlqk35" creationdate="20220321T164151Z">
        <seg>한 번 더, 여러분은 그러한 간략화가 가독성을 높이는지 낮추는지 판단을 시험해봐야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once again, you should try some examples on your own.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140307Z" creationid="tlqk35" creationdate="20220321T140307Z">
        <seg>다시 한번 여러분 스스로 몇 가지 예제를 시도해보기 바랍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once arrived at the relevant target, we can use &lt;g1&gt;rw&lt;/g1&gt; as in normal
tactic mode.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182903Z" creationid="tlqk3" creationdate="20220604T182903Z">
        <seg>일단 연관된 대상에 도달하면 일반 전략 모드처럼 &lt;g1&gt;rw&lt;/g1&gt;를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once the attribute is applied, however, there is no way to permanently
remove it; it persists in any file that imports the one where the
attribute is assigned.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171543Z" creationid="tlqk35" creationdate="20220524T165238Z">
        <seg>그러나 한 번 이 특성이 적용되면 그 특성이 부여된 정리를 불러온 어떤 파일이든 
지속되므로 영구적으로 이를 제거할 방법이 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once the proof of a
theorem is complete, typically we only need to know that the proof
exists; it doesn't matter what the proof is.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T115332Z" creationid="tlqk35" creationdate="20220321T160910Z">
        <seg>한 번 정리의 증명이 끝나면 보통 우리는 증명이 존재한다는 것만 알면 됩니다. 증명이 무엇인지 아는 것은 중요하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One again, you can reduce the proof to:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162702Z" creationid="tlqk3" creationdate="20220527T162240Z">
        <seg>다시한번 여러분은 증명을 다음과 같이 줄일 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One can also assign the attribute any time after the definition takes place:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183057Z" creationid="tlqk3" creationdate="20220525T183031Z">
        <seg>어떤 이는 이 정의를 만든 뒤 어느 때든지 특성을 부여할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One can also specify imports relative to the current directory; for example,
Importing is transitive.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174453Z" creationid="tlqk35" creationdate="20220524T174453Z">
        <seg>어떤 이는 현재 경로에 상대적으로 불러오기를 명시할 수 있습니다. 예를 들어 불러오는 것은 전이적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One can always specify the type &lt;g1&gt;T&lt;/g1&gt; of an expression &lt;g2&gt;e&lt;/g2&gt; by
writing &lt;g3&gt;(e : T)&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153518Z" creationid="tlqk35" creationdate="20220321T153518Z">
        <seg>누군가는 표현식 &lt;g2&gt;e&lt;/g2&gt;의 유형 &lt;g1&gt;T&lt;/g1&gt;를 &lt;g3&gt;(e : T)&lt;/g3&gt;와 같이 씀으로써 항상 명시할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One can shortcut it using pattern matching as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183652Z" creationid="tlqk3" creationdate="20220604T183652Z">
        <seg>누군가는 다음과 같이 패턴 매칭을 사용하여 그것을 손쉽게 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One can show that the type
&lt;g2&gt;TreeList α&lt;/g2&gt; is &lt;g3&gt;isomorphic&lt;/g3&gt; to &lt;g4&gt;List (Tree α)&lt;/g4&gt;, but translating
results back and forth along this isomorphism is tedious.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T170238Z" creationid="tlqk35" creationdate="20220528T170238Z">
        <seg>어떤 이는 &lt;g2&gt;TreeList α&lt;/g2&gt;형이 &lt;g4&gt;List (Tree α)&lt;/g4&gt;과 &lt;g3&gt;i동형(somorphic)&lt;/g3&gt;임을 보일 수 있습니다. 그러나 이 동형을 따라 결과를 앞뒤로 번역하는 것은 번거롭습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One can similarly infer the argument in &lt;g6&gt;Lst.nil Nat&lt;/g6&gt;, not
from anything else in that expression, but from the fact that it is
sent as an argument to the function &lt;g7&gt;Lst.cons&lt;/g7&gt;, which expects an element
of type &lt;g8&gt;Lst α&lt;/g8&gt; in that position.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153125Z" creationid="tlqk35" creationdate="20220321T152730Z">
        <seg>어떤 식으로부터도 아니고 &lt;g8&gt;Lst α&lt;/g8&gt;형의 원소를 기대하는 &lt;g7&gt; Lst.cons&lt;/g7&gt; 함수에 인수로 전달되었다는 사실로부터 누군가는 비슷하게 &lt;g6&gt;Lst.nil Nat&lt;/g6&gt;에서 인수를 추론할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One can still define
computational objects that incorporate elements of type &lt;g4&gt;Prop&lt;/g4&gt;; the
point is that these elements can help us reason about the effects of
the computation, but can be ignored when we extract "code" from the
term.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171932Z" creationid="tlqk3" creationdate="20220605T171932Z">
        <seg>어떤 이는 여전히 &lt;g4&gt;Prop&lt;/g4&gt;형 원소를 포함하는 계산적 대상을 정의할 수 있습니다. 요점은 이 원소는 계산의 효과에 대해 추론하는 것을 돕지만 항으로부터 "코드"를 추출할 때 무시될 수 있다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One consequence of the law of the excluded middle is the principle of
double-negation elimination:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T165753Z" creationid="tlqk35" creationdate="20220321T165753Z">
        <seg>배중률의 한 결과는 이중 부정 제거의 원리입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One example is the
definition of &lt;g5&gt;Vector α n&lt;/g5&gt;, the type of vectors of elements of &lt;g6&gt;α&lt;/g6&gt;
of length &lt;g7&gt;n&lt;/g7&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153211Z" creationid="tlqk35" creationdate="20220528T153211Z">
        <seg>한 예제는 길이 &lt;g7&gt;n&lt;/g7&gt;의  &lt;g6&gt;α&lt;/g6&gt;를 원소로 하는 벡터 유형 &lt;g5&gt;Vector α n&lt;/g5&gt;의 정의입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One solution is to define an auxiliary function:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180121Z" creationid="tlqk3" creationdate="20220603T180121Z">
        <seg>우리의 방법은 부가적인 함수를 정의하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One strategy for proving assertions about objects defined in the
language of dependent type theory is to layer an assertion language
and a proof language on top of the definition language.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T102216Z" creationid="tlqk35" creationdate="20220321T154820Z">
        <seg>의존 유형론의 언어로 정의된 대상에 대해서 주장을 증명하는 한 방법은 주장 언어와 증명 언어를 언어 정의의 꼭대기에 두는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One thing that is nice about Lean's proof-writing syntax is that it is
possible to mix term-style and tactic-style proofs, and pass between
the two freely.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104753Z" creationid="tlqk35" creationdate="20220524T142848Z">
        <seg>린의 증명 작성 문법에 대해 좋은 점은 항 스타일과 전략 스타일의 증명을 혼합할 수 있고, 
이들 사이를 자유로이 왕래할 수 있다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One thing that makes the simplifier especially useful is that its
capabilities can grow as a library develops.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171639Z" creationid="tlqk35" creationdate="20220524T164211Z">
        <seg>단순화기를 특히 유용하게 만드는 한 가지는 그것의 능력이 
라이브러리가 개발되어 감에 따라 증가한다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One very useful family of options controls the way Lean's &lt;g1&gt;pretty- printer&lt;/g1&gt; displays terms.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125933Z" creationid="tlqk3" creationdate="20220526T125915Z">
        <seg>매우 유용한 옵션 모음 중 하나는 린의 &lt;g1&gt;pretty- printer&lt;/g1&gt;가 항을 표시하는 방식을 제어합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One way in which Lean's dependent type theory extends simple type
theory is that types themselves --- entities like &lt;g1&gt;Nat&lt;/g1&gt; and &lt;g2&gt;Bool&lt;/g2&gt;
--- are first-class citizens, which is to say that they themselves are
objects.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141313Z" creationid="tlqk35" creationdate="20220321T141313Z">
        <seg>린의 종속 유형론이 단순 유형론을 확장시키는 한 방법은 ---&lt;g1&gt;Nat&lt;/g1&gt;과 &lt;g2&gt;Bool&lt;/g2&gt;같은 개체는 그들 그 자체로 대상인 일등 시민 ---으로 두는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Open a namespace &lt;g1&gt;Hidden&lt;/g1&gt; to avoid naming conflicts, and use the
equation compiler to define addition, multiplication, and
exponentiation on the natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180856Z" creationid="tlqk3" creationdate="20220603T180856Z">
        <seg>이름공간&lt;g1&gt;Hidden&lt;/g1&gt;을 열어 이름 충돌을 피하세요. 그리고 방정식 컴파일러로 덧셈, 곱셈 그리고 거듭제곱을 자연수에 대해 정의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option &lt;g1&gt;synthInstance.maxHeartbeats&lt;/g1&gt; specifies the maximum amount of
heartbeats per typeclass resolution problem.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180749Z" creationid="tlqk3" creationdate="20220604T180749Z">
        <seg>&lt;g1&gt;synthInstance.maxHeartbeats&lt;/g1&gt; 옵션은 유형 클래스 해결 문제 당 최대 심박수 양을 지정합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Option &lt;g2&gt;synthInstance.maxSize&lt;/g2&gt; is the maximum number of instances used
to construct a solution in the type class instance synthesis procedure.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180921Z" creationid="tlqk3" creationdate="20220604T180921Z">
        <seg>&lt;g2&gt;synthInstance.maxSize&lt;/g2&gt; 옵션은 유형 클래스 개체 합성 절차에서 해을 만드는 데 사용되는 최대 개체수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162105Z" creationid="tlqk35" creationdate="20220321T162105Z">
        <seg>논리합</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or even this:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180458Z" creationid="tlqk35" creationdate="20220321T180458Z">
        <seg>심지어 이렇게도 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or you can carry out a proof by contradiction:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T163510Z" creationid="tlqk35" creationdate="20220321T165949Z">
        <seg>한편 여러분은 귀류법으로 증명을 수행할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ordinarily, you meet such a goal by writing an explicit term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T083201Z" creationid="tlqk35" creationdate="20220321T184454Z">
        <seg>일반적으로 명시적인 항을 작성하여 이 목표를 달성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ordinary classical logic adds to
this the law of the excluded middle, &lt;g1&gt;p ∨ ¬p&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T185340Z" creationid="tlqk35" creationdate="20220321T165657Z">
        <seg>평범한 고전 논리는 여기에 배중률 &lt;g1&gt;p ∨ ¬p&lt;/g1&gt;을 추가합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other Recursive Data Types</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162745Z" creationid="tlqk3" creationdate="20220527T162745Z">
        <seg>다른 재귀적인 데이터 유형</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other properties:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165835Z" creationid="tlqk35" creationdate="20220321T170151Z">
        <seg>기타 성질들:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other systems provide search procedures and decision procedures for specific languages and domains,
such as linear or nonlinear expressions over the integers or the real numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131328Z" creationid="tlqk35" creationdate="20220321T131328Z">
        <seg>다른 시스템들은 특정 언어와 영역에 대한 선형 혹은 비선형 식(가령 정수나 실수에 대해 정의된)들에 탐색 절차과 결정 절차를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other tactics inside conversion mode</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183901Z" creationid="tlqk3" creationdate="20220604T183901Z">
        <seg>전환 모드 속 다른 전략</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Otherwise, &lt;g6&gt;v&lt;/g6&gt; is of the form &lt;g7&gt;a :: w&lt;/g7&gt;, and we can simply
return &lt;g8&gt;w&lt;/g8&gt;, after casting it from a vector of length &lt;g9&gt;m&lt;/g9&gt; to a
vector of length &lt;g10&gt;n&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183522Z" creationid="tlqk3" creationdate="20220603T183522Z">
        <seg>그렇지 않으면 &lt;g6&gt;v&lt;/g6&gt;는 &lt;g7&gt;a :: w&lt;/g7&gt;꼴이고 길이 &lt;g9&gt;m&lt;/g9&gt;의 벡터에서 길이 &lt;g10&gt;n&lt;/g10&gt;의 벡터로 이를 바꾼 후에 우리는 단순히 &lt;g8&gt;w&lt;/g8&gt;를 반환할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Our axiom of choice is now expressed simply as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T183124Z" creationid="tlqk3" creationdate="20220610T183124Z">
        <seg>우리의 선택 공리는 이제 다음과 같이 간단히 표현됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Output parameters</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163056Z" creationid="tlqk3" creationdate="20220604T163056Z">
        <seg>출력 매개변수</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Outside the section, the simplifier will no longer use
&lt;g1&gt;reverse_mk_symm&lt;/g1&gt; by default.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T125527Z" creationid="tlqk35" creationdate="20220524T165457Z">
        <seg>섹션 바깥 쪽에서 단순화기는 기본적으로 &lt;g1&gt;reverse_mk_symm&lt;/g1&gt;를 더 이상 사용할 수 없게 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Parallel
sequencing is one way to arrange it so that a single tactic is applied
to multiple goals, but there are other ways to do this.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112735Z" creationid="tlqk35" creationdate="20220524T152200Z">
        <seg>병렬 순차는 하나의 전략이 다수의 목표에 적용되게 배열하는 한 방법입니다. 
그러나 이를 다른 방법으로도 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern Matching</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160553Z" creationid="tlqk3" creationdate="20220529T160553Z">
        <seg>패턴 매칭</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern matching</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183519Z" creationid="tlqk3" creationdate="20220604T183519Z">
        <seg>패턴 매칭</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern matching
provides an approach that is more convenient, and familiar to users of
functional programming languages.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161048Z" creationid="tlqk3" creationdate="20220529T161048Z">
        <seg>패턴 매칭은 더 편리한 접근법과 함수형 프로그래밍 언어의 사용자에게 친숙한 접근법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern matching can also be used to destruct inductively defined propositions:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161658Z" creationid="tlqk3" creationdate="20220529T161658Z">
        <seg>패턴 매칭은 재귀적으로 정의된 명제를 파괴하는 데에도 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pattern matching works with any inductive type, such as products and option types:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161546Z" creationid="tlqk3" creationdate="20220529T161546Z">
        <seg>패턴 매칭은 곱과 옵션 유형 같은 임의의 재귀형과 동작합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Placeholders without precedence default to &lt;g1&gt;0&lt;/g1&gt;, i.e. they accept notations of any precedence in their place.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123851Z" creationid="tlqk3" creationdate="20220526T123851Z">
        <seg>우선순위가 없는 자리차지자는 &lt;g1&gt;0&lt;/g1&gt;으로 설정됩니다. 예를 들어 이들은 그들의 자리에 임의의 우선순위의 기호든 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Please see &lt;g1&gt;lean prover&lt;/g1&gt; and &lt;g2&gt;lean community&lt;/g2&gt; for an up to date list
of our amazing contributors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134918Z" creationid="tlqk35" creationdate="20220321T134918Z">
        <seg>합&lt;g1&gt;린 증명보조기&lt;/g1&gt;와 &lt;g2&gt;린 커뮤니티&lt;/g2&gt;에서 놀라운 최신 기여자 명단을 확인할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Pretty printing additional information is often very useful
when you are debugging a proof, or trying to understand a cryptic
error message.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130303Z" creationid="tlqk3" creationdate="20220526T130303Z">
        <seg>깔끔한 출력하기의 추가 정보는 증명의 버그를 없앨때나 암호같은 오류 메시지를 이해하려고 할 때 아주 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Printing them out shows that all three groups of definitions have
exactly the same effect.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145220Z" creationid="tlqk35" creationdate="20220321T145220Z">
        <seg>이것을 출력하는 것은 세 정의 그룹이 정확히 동일한 효과를 가짐을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Priorities are also useful to control the interaction between different default instances.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165813Z" creationid="tlqk3" creationdate="20220604T165813Z">
        <seg>우선 순위는 다른 기본 개체들 간의 상호작용을 제어하는 데에도 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Propositional Extensionality</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172920Z" creationid="tlqk3" creationdate="20220605T172920Z">
        <seg>명제 확장성</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Propositional Logic</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161827Z" creationid="tlqk35" creationdate="20220321T161827Z">
        <seg>명제 논리</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Propositional extensionality is the following axiom:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172934Z" creationid="tlqk3" creationdate="20220605T172934Z">
        <seg>명제 확장성은 다음 공리입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Propositions and Proofs</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T154753Z" creationid="tlqk35" creationdate="20220321T154753Z">
        <seg>명제와 증명</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Propositions as Types</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T154815Z" creationid="tlqk35" creationdate="20220321T154815Z">
        <seg>유형으로써 명제</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prove &lt;g1&gt;¬(p ↔ ¬p)&lt;/g1&gt; without using classical logic.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T185359Z" creationid="tlqk35" creationdate="20220321T170721Z">
        <seg>고전 논리를 사용하지 않고 &lt;g1&gt;¬(p ↔ ¬p)&lt;/g1&gt;을 증명하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prove as many of the identities listed in the Existential
Quantifier section as you can.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T075152Z" creationid="tlqk35" creationdate="20220321T184006Z">
        <seg>존재 정량자에서 수록된 항등식들을 여러분이 할 수 있는 만큼 가능한 많이 증명해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prove some properties, such as the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T171355Z" creationid="tlqk35" creationdate="20220528T171355Z">
        <seg>다음과 같은 몇 가지 성질을 증명하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prove that this is a contradiction:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183839Z" creationid="tlqk35" creationdate="20220321T183839Z">
        <seg>이것이 모순임을 증명하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prove the following identities, replacing the "sorry" placeholders
with actual proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170704Z" creationid="tlqk35" creationdate="20220321T170704Z">
        <seg>다음 항등식을 증명하세요. "sorry"를 실제 증명으로 대체하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prove the following identities, replacing the "sorry" placeholders with actual proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165804Z" creationid="tlqk35" creationdate="20220321T170611Z">
        <seg> "sorry"를 실제 증명으로 바꿔 다음 항등식을 증명하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Prove these equivalences:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183748Z" creationid="tlqk35" creationdate="20220321T183748Z">
        <seg>이 등가식들을 증명하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Proving a fact like &lt;g1&gt;zero + m = m&lt;/g1&gt;, however, requires a proof by induction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160815Z" creationid="tlqk3" creationdate="20220527T160815Z">
        <seg>하지만 &lt;g1&gt;zero + m = m&lt;/g1&gt;같은 사실을 증명하는 것은 귀납에 의한 증명이 요구됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Putting these last two facts together yields the desired conclusion:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190058Z" creationid="tlqk3" creationdate="20220610T190058Z">
        <seg>이 마지막 두 가지 사실을 종합하면 원하는 결론을 얻을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Quantifiers and Equality</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T060621Z" creationid="tlqk35" creationdate="20220321T172532Z">
        <seg>한정기호와 동등</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Quotients</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T180322Z" creationid="tlqk3" creationdate="20220605T180322Z">
        <seg>몫</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rather, it is a mechanism to reason about the expression's
type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175937Z" creationid="tlqk3" creationdate="20220605T175937Z">
        <seg>오히려 표현식의 유형에 대해 추론하는 메커니즘입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rather, it is the fact that we can write them
down and check that they are well-typed that ensures that the
proposition in question is true.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T113744Z" creationid="tlqk35" creationdate="20220321T160408Z">
        <seg>그보다 우리가 표현식을 쓸 수 있고 의문의 명제가 참이라고 보장하는 잘 입력됨을 검증할 수 있다는 것은 사실입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Raw natural numbers are &lt;g1&gt;not&lt;/g1&gt; polymorphic.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162858Z" creationid="tlqk3" creationdate="20220604T162858Z">
        <seg>생 자연수는 다형적이지 &lt;g1&gt;않습니다.&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall also from &lt;g6&gt;Dependent Type Theory&lt;/g6&gt;
that to give these definitions the greatest generality possible, we allow
the types &lt;g7&gt;α&lt;/g7&gt; and &lt;g8&gt;β&lt;/g8&gt; to belong to any universe.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153712Z" creationid="tlqk3" creationdate="20220526T153712Z">
        <seg>&lt;g6&gt;종속 유형론&lt;/g6&gt;으로부터 이들 정의에 가능한 가장 큰 일반성을 준 것을 기억하세요. 우리는 &lt;g7&gt;α&lt;/g7&gt;형과 &lt;g8&gt;β&lt;/g8&gt;형이 임의의 세계에 속함을 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall from the &lt;g1&gt;Conjunction section&lt;/g1&gt; if &lt;g2&gt;p&lt;/g2&gt;
has type &lt;g3&gt;Point&lt;/g3&gt;, the expression &lt;g4&gt;p.foo&lt;/g4&gt; is interpreted as
&lt;g5&gt;Point.foo p&lt;/g5&gt;, assuming that the first non-implicit argument to
&lt;g6&gt;foo&lt;/g6&gt; has type &lt;g7&gt;Point&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174736Z" creationid="tlqk35" creationdate="20220528T174736Z">
        <seg>&lt;g1&gt;결합 섹션(Conjunction section)&lt;/g1&gt;에서 &lt;g6&gt;foo&lt;/g6&gt;에 대한 첫 번째 비암시적인 인수가 &lt;g7&gt;Point&lt;/g7&gt;형을 갖는다고 가정했을 때 만약 &lt;g2&gt;p&lt;/g2&gt;가 &lt;g3&gt;Point&lt;/g3&gt;형이면 표현식 &lt;g4&gt;p.foo&lt;/g4&gt;는 &lt;g5&gt;Point.foo p&lt;/g5&gt;으로 해석됨을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that &lt;g1&gt;#eval fib &lt;n&gt;&lt;/g1&gt; is exponential on &lt;g2&gt;&lt;n&gt;&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165004Z" creationid="tlqk3" creationdate="20220603T165004Z">
        <seg>&lt;g1&gt;#eval fib &lt;n&gt;&lt;/g1&gt;가 &lt;g2&gt;&lt;n&gt;&lt;/g2&gt;에 대해 지수적이었음을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that &lt;g6&gt;if h : c then t else e&lt;/g6&gt; is
notation for &lt;g7&gt;dite c (fun  h : c =&gt; t) (fun h : ¬ c =&gt; e)&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191159Z" creationid="tlqk3" creationdate="20220610T191159Z">
        <seg>&lt;g6&gt;if h : c then t else e&lt;/g6&gt;는 &lt;g7&gt;dite c (fun h : c =&gt; t) (fun h : ¬ c =&gt; e)&lt;/g7&gt;에 대한 표기법임을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that a non-recursive inductive type that contains only one
constructor is called a &lt;g1&gt;structure&lt;/g1&gt; or &lt;g2&gt;record&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152455Z" creationid="tlqk35" creationdate="20220528T172548Z">
        <seg>한 생성자만을 포함한 비 재귀적인 귀납형은 &lt;g1&gt;구조체(structure)&lt;/g1&gt; 혹은 &lt;g2&gt;레코드(record)&lt;/g2&gt;라고 불린다는 것을 떠올려보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that in the standard library, &lt;g1&gt;α × β&lt;/g1&gt; represents the
Cartesian product of the types &lt;g2&gt;α&lt;/g2&gt; and &lt;g3&gt;β&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T175533Z" creationid="tlqk3" creationdate="20220610T175533Z">
        <seg>표준 라이브러리에서 &lt;g1&gt;α × β&lt;/g1&gt;는 &lt;g2&gt;α&lt;/g2&gt; 및 &lt;g3&gt;β&lt;/g3&gt; 형의 데카르트 곱을 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that terms in the
Calculus of Constructions have a computational interpretation, and
that the logical framework treats terms with a common reduct as the
same.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T081932Z" creationid="tlqk35" creationdate="20220321T175635Z">
        <seg>구성주의적 계산법의 항은 계산적인 해석을 갖고 그 논리 프레임워크는 공통으로 축소된 항을 같은 것으로 다룬다는 것을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that the &lt;g1&gt;def&lt;/g1&gt; keyword provides one important way of declaring new named
objects.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143839Z" creationid="tlqk35" creationdate="20220321T143839Z">
        <seg>&lt;g1&gt;def&lt;/g1&gt;가 새 이름을 가진 대상을 선언하는 중요한 방식임을 기억하세요.

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that the &lt;g1&gt;import&lt;/g1&gt;
command at the beginning of a file imports previously compiled results
from other files, and that importing is transitive; if you import
&lt;g2&gt;Foo&lt;/g2&gt; and &lt;g3&gt;Foo&lt;/g3&gt; imports &lt;g4&gt;Bar&lt;/g4&gt;, then the definitions and theorems
from &lt;g5&gt;Bar&lt;/g5&gt; are available to you as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130820Z" creationid="tlqk3" creationdate="20220526T130820Z">
        <seg>파일의 시작에서  &lt;g1&gt;import&lt;/g1&gt; 명령은 다른 파일로부터 이전에 컴파일된 결과를 불러오고 그 불러오기는 추이적임을 기억하세요. 만약 여러분이 &lt;g2&gt;Foo&lt;/g2&gt;를 가져오고 &lt;g3&gt;Foo&lt;/g3&gt;가 &lt;g4&gt;Bar&lt;/g4&gt;를 가져오면 &lt;g5&gt;Bar&lt;/g5&gt;에서 이용가능한 정의와 정리도 여러분이 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that the class of &lt;g1&gt;Decidable&lt;/g1&gt;
propositions is defined as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190548Z" creationid="tlqk3" creationdate="20220610T190548Z">
        <seg>&lt;g1&gt;Decidable(결정 가능)&lt;/g1&gt; 명제 클래스는 다음과 같이 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that types may not have any elements in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155209Z" creationid="tlqk3" creationdate="20220604T155209Z">
        <seg>유형은 린에서 임의의 원소가 아닐 수 있음을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that we can also write theorem &lt;g1&gt;t1&lt;/g1&gt; as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161408Z" creationid="tlqk35" creationdate="20220321T161408Z">
        <seg>우리는 정리 &lt;g1&gt;t1&lt;/g1&gt;을 다음과 같이 쓸 수 있음을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall that, in the case of ordinary
function spaces, we could interpret &lt;g7&gt;α → β&lt;/g7&gt; as the special case of
&lt;g8&gt;(x : α) → β&lt;/g8&gt; in which &lt;g9&gt;β&lt;/g9&gt; does not depend on &lt;g10&gt;x&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064154Z" creationid="tlqk35" creationdate="20220321T173603Z">
        <seg>평범한 함수공간의 경우에 대해 우리는 &lt;g7&gt;α → β&lt;/g7&gt;을 &lt;g9&gt;β&lt;/g9&gt;가 &lt;g10&gt;x&lt;/g10&gt;에 의존하지 않는 &lt;g8&gt;(x : α) → β&lt;/g8&gt;의 특별한 경우로 해석할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall the definition of &lt;g2&gt;even&lt;/g2&gt; and &lt;g3&gt;odd&lt;/g3&gt; as mutual inductive predicates, as presented as an example there:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174449Z" creationid="tlqk3" creationdate="20220603T174449Z">
        <seg> &lt;g2&gt;even&lt;/g2&gt;과 &lt;g3&gt;odd&lt;/g3&gt;을 상호적으로 귀납적인 술어의 정의로 호출한다면 다음 예제와 같이 나타날 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recall this tells Lean that
the argument is implicit, and should be filled in automatically.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165437Z" creationid="tlqk35" creationdate="20220321T170438Z">
        <seg>이것이 린에게 인수가 암시적임을 알리고 이를 자동적으로 채우게 함을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Recursively define a function that evaluates any such term with respect to an assignment of values to the variables.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T171517Z" creationid="tlqk35" creationdate="20220528T171517Z">
        <seg>변수에 값을 할당한 것에 대한 항으로 계산하는 재귀적으로 함수를 정의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reflexivity is more powerful than it looks.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T081826Z" creationid="tlqk35" creationdate="20220321T175629Z">
        <seg>대칭성은 보기보다 더 강력합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember also that in both the VS Code and Emacs editor modes, tab
completion works in &lt;g1&gt;set_option&lt;/g1&gt;, to help you find suitable options.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181023Z" creationid="tlqk3" creationdate="20220604T181023Z">
        <seg>또한 VS Code 및 Emacs 편집기 모드에서 탭 완성 기능은 &lt;g1&gt;set_option&lt;/g1&gt;에서 동작하므로 적절한 옵션을 찾는 데 도움이 됨을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that &lt;g3&gt;#check&lt;/g3&gt;
is often used in conjunction with the &lt;g4&gt;@&lt;/g4&gt; operator, which makes all
of the arguments to a theorem or definition explicit.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125324Z" creationid="tlqk3" creationdate="20220526T125324Z">
        <seg>&lt;g3&gt;#check&lt;/g3&gt;는  &lt;g4&gt;@&lt;/g4&gt; 연산자와 결합하여 종종 사용됨을 기억하세요. 이는 정리나 정의의 모든 인수를 명시적이게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that &lt;g8&gt;→&lt;/g8&gt; associates to the right (nothing changes
now that the arguments are elements of &lt;g9&gt;Prop&lt;/g9&gt;, instead of some other
&lt;g10&gt;Type&lt;/g10&gt;), as do the other binary connectives.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162316Z" creationid="tlqk35" creationdate="20220321T162316Z">
        <seg>다른 이항 결합자들처럼 &lt;g8&gt;→&lt;/g8&gt;은 오른쪽으로 결합한다는 것을 기억하세요.(인수가 &lt;g10&gt;Type&lt;/g10&gt; 대신 &lt;g9&gt;Prop&lt;/g9&gt;인 것을 제외하고 변한 건 없습니다.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that expressions which differ up to renaming of bound
variables are considered to be equivalent.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064814Z" creationid="tlqk35" creationdate="20220321T173915Z">
        <seg>표현식들은 구속변수의 이름만 달라지는 한 같은 것으로 간주된다는 것을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that identifiers in Lean can be organized into hierarchical
namespaces.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T132301Z" creationid="tlqk3" creationdate="20220526T132301Z">
        <seg>린의 식별자들은 계층적인 이름공간 안에 정리될 수 있음을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that if you &lt;g1&gt;open Classical&lt;/g1&gt;, you can use the law of the
excluded middle for any proposition at all.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T171445Z" creationid="tlqk3" creationdate="20220527T171445Z">
        <seg>여러분이 &lt;g1&gt;open Classical&lt;/g1&gt;을 하면 여러분은 임의의 명제에 대해서 배중률을 사용할 수 있음을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that the point of the &lt;g3&gt;variable&lt;/g3&gt; command is to
declare variables for use in theorems, as in the following example:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175057Z" creationid="tlqk35" creationdate="20220524T175057Z">
        <seg>&lt;g3&gt;variable&lt;/g3&gt; 명령의 요점은 다음 예제에서 처럼 정리에서 사용하기 위한 변수를 선언하는 것임을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that the standard
library defines notation &lt;g9&gt;α × β&lt;/g9&gt; for &lt;g10&gt;Prod α β&lt;/g10&gt; and &lt;g11&gt;(a, b)&lt;/g11&gt; for
&lt;g12&gt;Prod.mk a b&lt;/g12&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153401Z" creationid="tlqk3" creationdate="20220526T153401Z">
        <seg>표준 라이브러리는 &lt;g10&gt;Prod α β&lt;/g10&gt;에 대해 &lt;g9&gt;α × β&lt;/g9&gt; 표기를 정의하고 &lt;g12&gt;Prod.mk a b&lt;/g12&gt;에 대해 &lt;g11&gt;(a, b)&lt;/g11&gt;를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that this type can just as well
be written &lt;g5&gt;∀ (p q : Prop) (hp : p) (hq :q), p&lt;/g5&gt;, since the arrow
denotes nothing more than an arrow type in which the target does not
depend on the bound variable.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T122250Z" creationid="tlqk35" creationdate="20220321T161645Z">
        <seg>왜냐하면 화살표는 대상이 구속 변수에 의존하지 않는 화살표 유형만을 나타내기에 이 유형은 &lt;g5&gt;∀ (p q : Prop) (hp : p) (hq :q), p&lt;/g5&gt;로 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember that, without any parameters, an expression of type
&lt;g1&gt;Prop&lt;/g1&gt; is just an assertion.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074855Z" creationid="tlqk35" creationdate="20220321T183859Z">
        <seg>어느 매개변수 없는&lt;g1&gt;Prop&lt;/g1&gt;형의 표현식은 그저 주장일 뿐이라는 걸 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember the introduction and
elimination rules for dependent arrow types:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T173012Z" creationid="tlqk35" creationdate="20220321T173012Z">
        <seg>의존 화살표 유형에 대한 도입과 소거 규칙을 기억하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Replace calling &lt;g1&gt;rustdoc --test&lt;/g1&gt; from &lt;g2&gt;mdbook test&lt;/g2&gt; with &lt;g3&gt;./test&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171930Z" creationid="tlqk35" creationdate="20220321T171930Z">
        <seg> &lt;g2&gt;mdbook test&lt;/g2&gt;에서 &lt;g1&gt;rustdoc --test&lt;/g1&gt;을 호출하는 것을 &lt;g3&gt;./test&lt;/g3&gt;으로 대체함.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Resolution theorem provers, tableau theorem provers, fast
satisfiability solvers, and so on provide means of establishing the validity of formulas in propositional and
first-order logic.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131315Z" creationid="tlqk35" creationdate="20220321T131315Z">
        <seg>Resolution 증명 보조기, tableau 증명 보조기, fast satisfiability 솔버 등등은 명제 논리식와 1계 논리식의 유효성을 식별하는 세우는 수단을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returning to the example of lists, you can use the command &lt;g1&gt;#check&lt;/g1&gt; to
inspect the type of the following &lt;g2&gt;List&lt;/g2&gt; functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152114Z" creationid="tlqk35" creationdate="20220321T152114Z">
        <seg>리스트의 예로 돌아가서 여러분은 다음 &lt;g2&gt;List&lt;/g2&gt; 함수의 유형을 검사하기 위해 &lt;g1&gt;#check&lt;/g1&gt; 명령을 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Returning to the previous example and
renaming bound variables for clarity, notice the types of the
following expressions:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143523Z" creationid="tlqk35" creationdate="20220321T143523Z">
        <seg>이전 예제로 돌아가 명확성을 위해 구속변수의 이름을 바꿉시다. 다음 표현식의 유형을 주목하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rewrites can be applied sequentially, so that the proof above can be
shortened to this:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064646Z" creationid="tlqk35" creationdate="20220321T180445Z">
        <seg>재작성기는 순차적으로 사용할 수 있습니다. 따라서 위의 증명은 아래와 같이 더 짧아질 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rewriting</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T160714Z" creationid="tlqk35" creationdate="20220524T160714Z">
        <seg>다시쓰기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Roughly
speaking, what characterizes inductive types in &lt;g2&gt;Prop&lt;/g2&gt; is that one
can only eliminate to other types in &lt;g3&gt;Prop&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152059Z" creationid="tlqk3" creationdate="20220527T152242Z">
        <seg>대략적으로 말하면, &lt;g2&gt;Prop&lt;/g2&gt;에서 귀납형을 특징짓는 것은 &lt;g3&gt;Prop&lt;/g3&gt;의 다른 유형으로만 제거할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Roughly speaking, an element of &lt;g2&gt;Prop&lt;/g2&gt; is said to be
decidable if we can decide whether it is true or false.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T171347Z" creationid="tlqk3" creationdate="20220604T171347Z">
        <seg>대략적으로 말하면 &lt;g2&gt;Prop&lt;/g2&gt;의 원소는 그것이 참인지 거짓인지 결정할 수 있다면 결정 가능하다고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Roughly speaking, each &lt;g3&gt;...&lt;/g3&gt; can be any arrow type constructed from
&lt;g4&gt;Foo&lt;/g4&gt; and previously defined types, in which &lt;g5&gt;Foo&lt;/g5&gt; appears, if at
all, only as the "target" of the dependent arrow type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T143906Z" creationid="tlqk3" creationdate="20220526T143559Z">
        <seg>대략적으로 말하자면 각 &lt;g3&gt;...&lt;/g3&gt;는 의존 화살표 형의 "대상"으로만 &lt;g4&gt;Foo&lt;/g4&gt;및 이전에 정의된 유형으로 구성된 모든 화살표 유형이 될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Roughly speaking, since we know there is an &lt;g8&gt;x&lt;/g8&gt; satisfying
&lt;g9&gt;p x&lt;/g9&gt;, we can give it a name, say, &lt;g10&gt;w&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T091008Z" creationid="tlqk35" creationdate="20220321T181317Z">
        <seg>간단히 말하자면 &lt;g9&gt;p x&lt;/g9&gt;를 만족하는 &lt;g8&gt;x&lt;/g8&gt;가 있다는 것을 알기 때문에 이것에 &lt;g10&gt;w&lt;/g10&gt;라는 이름을 줄 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Roughly, an element of &lt;g3&gt;Inhabited α&lt;/g3&gt; is a witness to the fact
that there is an element of &lt;g4&gt;α&lt;/g4&gt;; in the &lt;g5&gt;Chapter Type Classes&lt;/g5&gt;
we will see that Lean can be instructed that suitable
base types are inhabited, and can automatically infer that other
constructed types are inhabited.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165706Z" creationid="tlqk3" creationdate="20220529T165706Z">
        <seg>대략적으로 &lt;g3&gt;Inhabited α&lt;/g3&gt;의 원소는 &lt;g4&gt;α&lt;/g4&gt;의 원소가 있다는 사실의 목격자입니다. &lt;g5&gt;유형 클래스 장&lt;/g5&gt;에서 우리는 린이 적절한 기반 유형이 머물러 있고, 자동적으로 다른 생성 유형이 머물러 있는지 추론하는 것을 배울 수 있음을 볼 예정입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Run &lt;g1&gt;mdbook test&lt;/g1&gt; to test all &lt;g2&gt;lean&lt;/g2&gt; code blocks.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T172249Z" creationid="tlqk35" creationdate="20220321T172249Z">
        <seg>모든  &lt;g2&gt;lean&lt;/g2&gt;의 코드 블록을 테스트하려면 &lt;g1&gt;mdbook test&lt;/g1&gt;을 실행하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scoped Instances</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170657Z" creationid="tlqk3" creationdate="20220604T170657Z">
        <seg>범위가 지정된 개체</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Second, when writing type expressions, arrows associate to the &lt;g5&gt;right&lt;/g5&gt;; for
example, the type of &lt;g6&gt;Nat.add&lt;/g6&gt; is &lt;g7&gt;Nat → Nat → Nat&lt;/g7&gt; which is equivalent
to &lt;g8&gt;Nat → (Nat → Nat)&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140808Z" creationid="tlqk35" creationdate="20220321T140808Z">
        <seg>둘째로 유형 표현식을 쓸 때 화살표는&lt;g5&gt;오른쪽&lt;/g5&gt; 먼저 결합합니다. 가령&lt;g6&gt;Nat.add&lt;/g6&gt;의 유형은 &lt;g7&gt;Nat → Nat → Nat&lt;/g7&gt;이고 이는 &lt;g8&gt;Nat → (Nat → Nat)&lt;/g8&gt;과 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sections are also useful for delimiting the scope of
commands such as &lt;g1&gt;set_option&lt;/g1&gt; and &lt;g2&gt;open&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150626Z" creationid="tlqk35" creationdate="20220321T150626Z">
        <seg>section은 &lt;g1&gt;set_option&lt;/g1&gt;과 &lt;g2&gt;open&lt;/g2&gt;같이 명령의 범위를 제한하는데 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sections can also be nested,
which allows you to declare new variables incrementally.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150155Z" creationid="tlqk35" creationdate="20220321T150155Z">
        <seg>section은 중첩될 수도 있습니다. 이는 여러분에게 새로운 변수를 점진적으로 선언할 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See the &lt;g1&gt;Setting
Up Lean section&lt;/g1&gt; of
the &lt;g2&gt;Lean 4 Manual&lt;/g2&gt; to install Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171440Z" creationid="tlqk35" creationdate="20220321T171440Z">
        <seg>Lean을 설치하려면 &lt;g2&gt;Lean 4 Manual&lt;/g2&gt;의  &lt;g1&gt;Setting Up Lean section&lt;/g1&gt;을 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Set
theoretically, one can view &lt;g7&gt;α / r&lt;/g7&gt; as the set of equivalence
classes of &lt;g8&gt;α&lt;/g8&gt; modulo &lt;g9&gt;r&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T180700Z" creationid="tlqk3" creationdate="20220605T180700Z">
        <seg>집합론적으로 &lt;g7&gt;α / r&lt;/g7&gt;을  &lt;g8&gt;α&lt;/g8&gt; 모듈로 &lt;g9&gt;r&lt;/g9&gt;의 클래스와 동등한 집합으로 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Setting Options</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125530Z" creationid="tlqk3" creationdate="20220526T125530Z">
        <seg>옵션 설정하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similar to propositional extensionality, function extensionality
asserts that any two functions of type &lt;g1&gt;(x : α) → β x&lt;/g1&gt; that agree on
all their inputs are equal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173537Z" creationid="tlqk3" creationdate="20220605T173537Z">
        <seg>명제 확장성과 비슷하게 함수 확장성은 그들의 모든 입력에 대해 동의하는 &lt;g1&gt;(x : α) → β x&lt;/g1&gt;형인 임의의 두 함수가 동일하다는 주장입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly,
&lt;g8&gt;Iff.mpr h&lt;/g8&gt; produces a proof of &lt;g9&gt;q → p&lt;/g9&gt; from &lt;g10&gt;h : p ↔ q&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164748Z" creationid="tlqk35" creationdate="20220321T164748Z">
        <seg>마찬가지로 &lt;g8&gt;Iff.mpr h&lt;/g8&gt;는 &lt;g10&gt;h : p ↔ q&lt;/g10&gt;으로부터 &lt;g9&gt;q → p&lt;/g9&gt;의 증명을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, &lt;g4&gt;And.right h&lt;/g4&gt; is a proof of &lt;g5&gt;q&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162807Z" creationid="tlqk35" creationdate="20220321T162807Z">
        <seg>마찬가지로 &lt;g4&gt;And.right h&lt;/g4&gt;는 &lt;g5&gt;q&lt;/g5&gt;의 증명입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, &lt;g4&gt;Or.intro_right p hq&lt;/g4&gt; creates a
proof for &lt;g5&gt;p ∨ q&lt;/g5&gt; using a proof &lt;g6&gt;hq : q&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T134731Z" creationid="tlqk35" creationdate="20220321T163629Z">
        <seg>비슷하게 &lt;g4&gt;Or.intro_right p hq&lt;/g4&gt;는 &lt;g6&gt;hq : q&lt;/g6&gt;의 증명을 사용해 &lt;g5&gt;p ∨ q&lt;/g5&gt; 의 증명을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, Lean detects the occurrence of &lt;g3&gt;x&lt;/g3&gt; in
&lt;g4&gt;t1&lt;/g4&gt; and &lt;g5&gt;t2&lt;/g5&gt;, and inserts it automatically there, too.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175253Z" creationid="tlqk35" creationdate="20220524T175253Z">
        <seg>마찬가지로 린은 &lt;g4&gt;t1&lt;/g4&gt;와 &lt;g5&gt;t2&lt;/g5&gt;에서 &lt;g3&gt;x&lt;/g3&gt;의 나타남을 감지하고 
거기에도 자동적으로 그것을 삽입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, an object &lt;g9&gt;r : α → α → Prop&lt;/g9&gt; denotes a binary
relation on &lt;g10&gt;α&lt;/g10&gt;: given &lt;g11&gt;x y : α&lt;/g11&gt;, &lt;g12&gt;r x y&lt;/g12&gt; denotes the assertion
that &lt;g13&gt;x&lt;/g13&gt; is related to &lt;g14&gt;y&lt;/g14&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T060955Z" creationid="tlqk35" creationdate="20220321T172813Z">
        <seg>마찬가지로 대상 &lt;g9&gt;r : α → α → Prop&lt;/g9&gt;은 &lt;g10&gt;α&lt;/g10&gt;에 대한 이항 관계를 가리킵니다. 즉, &lt;g11&gt;x y : α&lt;/g11&gt;에 대해, &lt;g12&gt;r x y&lt;/g12&gt;은 &lt;g13&gt;x&lt;/g13&gt;가 &lt;g14&gt;y&lt;/g14&gt;와 연관된다는 주장을 뜻 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, define the type of propositional formulas, as well as
functions on the type of such formulas: an evaluation function,
functions that measure the complexity of a formula, and a function
that substitutes another formula for a given variable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T172021Z" creationid="tlqk35" creationdate="20220528T172021Z">
        <seg>비슷하게 계산 함수와 공식의 복잡도를 측정하는 함수 및 제시한 변수로 다른 식에 대입하는 함수와 마찬가지인 명제 논리식의 유형을 정의하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, if you use an &lt;g4&gt;open&lt;/g4&gt; command within a
namespace, its effects disappear when the namespace is closed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150742Z" creationid="tlqk35" creationdate="20220321T150742Z">
        <seg>마찬가지로 여러분이 이름공간 내에서 &lt;g4&gt;open&lt;/g4&gt; 명령을 사용한다면 그것의 효과는 이름공간이 닫힐 때 사라질 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, many theorems hold under the additional assumption that a type is not empty.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155540Z" creationid="tlqk3" creationdate="20220604T155540Z">
        <seg>마찬가지로 많은 정리는 유형이 비어 있지 않을 때 덧셈 가정에  대해서 성립합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, methods of &lt;g2&gt;elaboration&lt;/g2&gt; and &lt;g3&gt;type inference&lt;/g3&gt;, which can be used to support
flexible forms of algebraic reasoning.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134656Z" creationid="tlqk35" creationdate="20220321T134656Z">
        <seg>비슷하게 대수 추론의 유연한 형태를 지원하는데 사용될 수 있는 &lt;g2&gt;협력법&lt;/g2&gt;과  &lt;g3&gt;유형 추론&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, most identities can be proved by introducing suitable &lt;g1&gt;match&lt;/g1&gt;, and then using &lt;g2&gt;rfl&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152626Z" creationid="tlqk3" creationdate="20220526T152554Z">
        <seg>마찬가지로 대부분의 항등식들은 적절한 &lt;g1&gt;match&lt;/g1&gt;와 그 뒤 &lt;g2&gt;rfl&lt;/g2&gt;를 쓰는 것으로 증명될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, see if you can figure out how to
define &lt;g1&gt;WellFounded.fix&lt;/g1&gt; on your own.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181426Z" creationid="tlqk3" creationdate="20220603T181426Z">
        <seg>마찬가지로 여러분은 여러분 스스로 &lt;g1&gt;WellFounded.fix&lt;/g1&gt;을 정의하는 법을 알아낼 수 있는지 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, the
expression &lt;g5&gt;hnp hp&lt;/g5&gt; produces a proof of &lt;g6&gt;False&lt;/g6&gt; from &lt;g7&gt;hp : p&lt;/g7&gt;
and &lt;g8&gt;hnp : ¬p&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164250Z" creationid="tlqk35" creationdate="20220321T164250Z">
        <seg>마찬가지로 표현식 &lt;g5&gt;hnp hp&lt;/g5&gt;은 &lt;g7&gt;hp : p&lt;/g7&gt;과 &lt;g8&gt;hnp : ¬p&lt;/g8&gt;으로부터 &lt;g6&gt;False&lt;/g6&gt;의 증명을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, two dashes &lt;g3&gt;--&lt;/g3&gt; indicate that the rest of
the line contains a comment that is also ignored.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135543Z" creationid="tlqk35" creationdate="20220321T135543Z">
        <seg>마찬가지로 두 개의 대시 &lt;g3&gt;--&lt;/g3&gt;는 이 줄의 나머지는 주석을 포함함을 나타내고 이 또한 무시됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, use the equation compiler to define some basic
operations on lists (like the &lt;g1&gt;reverse&lt;/g1&gt; function) and prove
theorems about lists by induction (such as the fact that
&lt;g2&gt;reverse (reverse xs) = xs&lt;/g2&gt; for any list &lt;g3&gt;xs&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181206Z" creationid="tlqk3" creationdate="20220603T181206Z">
        <seg>마찬가지로 방정식 컴파일러를 리스트에 대한 몇 가지 기본 연산(&lt;g1&gt;reverse&lt;/g1&gt; 함수 같은)을 정의하는데 사용하세요. 그리고 귀납법으로 리스트에 대한 정리(임의의 리스트 &lt;g3&gt;xs&lt;/g3&gt;에 대해 &lt;g2&gt;reverse (reverse xs) = xs&lt;/g2&gt;이라는 사실 같은 것)를 증명하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, we
can think of an implication &lt;g11&gt;p → q&lt;/g11&gt; between propositions as the
special case of &lt;g12&gt;∀ x : p, q&lt;/g12&gt; in which the expression &lt;g13&gt;q&lt;/g13&gt; does not
depend on &lt;g14&gt;x&lt;/g14&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064257Z" creationid="tlqk35" creationdate="20220321T173633Z">
        <seg>마찬가지로 우리는 명제들 사이의 함의 &lt;g11&gt;p → q&lt;/g11&gt;를 &lt;g13&gt;q&lt;/g13&gt;가 &lt;g14&gt;x&lt;/g14&gt;에 의존하지 않는 &lt;g12&gt;∀ x : p, q&lt;/g12&gt;의 특별한 경우로써 해석할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, we can inhabit type function with suitable constant functions:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161529Z" creationid="tlqk3" creationdate="20220604T161529Z">
        <seg>마찬가지로 우리는 유형 함수를 적절한 상수 함수로 내재시킬 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, we can register an instance by</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T154431Z" creationid="tlqk3" creationdate="20220604T154431Z">
        <seg>마찬가지로 우리는 개체를 다음과 같이 등록할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Simple Type Theory</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135147Z" creationid="tlqk35" creationdate="20220321T135147Z">
        <seg>단순 유형론(Simple Type Theory)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since addition is defined by recursion on the second argument,
&lt;g5&gt;k&lt;/g5&gt; is a good guess, and once we make that choice the proof almost writes itself:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162213Z" creationid="tlqk3" creationdate="20220527T162213Z">
        <seg>덧셈은 두 번째 인수에 대해 재귀적으로 정의되어 있기 때문에 &lt;g5&gt;k&lt;/g5&gt;는 좋은 추측입니다. 그리고 한번 우리가 그 선택을 하면 증명은 거의 술술 써집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since an inductive type lives in &lt;g1&gt;Sort u&lt;/g1&gt; for some &lt;g2&gt;u&lt;/g2&gt;, it is
reasonable to ask &lt;g3&gt;which&lt;/g3&gt; universe levels &lt;g4&gt;u&lt;/g4&gt; can be instantiated
to.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152221Z" creationid="tlqk35" creationdate="20220528T160840Z">
        <seg>귀납형이 어떤 &lt;g2&gt;u&lt;/g2&gt;에 대해 &lt;g1&gt;Sort u&lt;/g1&gt;에 속해 있기 때문에, &lt;g3&gt;어느&lt;/g3&gt;세계의 수준에 &lt;g4&gt;u&lt;/g4&gt;가 개체화 될 수 있는지 묻는 것은 합리적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since many of these are already defined in Lean's core library, you
should work within a namespace named &lt;g1&gt;Hidden&lt;/g1&gt;, or something like
that, in order to avoid name clashes.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T171252Z" creationid="tlqk35" creationdate="20220528T171252Z">
        <seg>이미 이들 중 다수가 이미 린의 중앙 라이브러리에 정의되어 있기에 여러분은 &lt;g1&gt;Hidden&lt;/g1&gt; 혹은 이름 충돌을 피할 수 있는 것으로 이름지은 이름공간에서 작업해야만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since the values of &lt;g1&gt;m&lt;/g1&gt; and &lt;g2&gt;n&lt;/g2&gt; are not needed, we can just as well use wildcard patterns instead.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165005Z" creationid="tlqk3" creationdate="20220529T165005Z">
        <seg>&lt;g1&gt;m&lt;/g1&gt;과 &lt;g2&gt;n&lt;/g2&gt;의 값은 필요하지 않으므로 우리는 와일드카드 패턴을 대신 사용하여도 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Singleton elimination is also used with
heterogeneous equality and well-founded recursion, which will be
discussed in a later chapter.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T164330Z" creationid="tlqk35" creationdate="20220528T164330Z">
        <seg>한 번에 하나씩 제거는 동일하지 않은 동등석과 잘 세워진 제귀에도 사용됩니다. 이것은 이후에 논의할 예정입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So
the expressions in the first two &lt;g1&gt;#check&lt;/g1&gt; commands below are
elaborated in the same way, whereas the third &lt;g2&gt;#check&lt;/g2&gt; command
interprets &lt;g3&gt;2&lt;/g3&gt; as an integer.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153707Z" creationid="tlqk35" creationdate="20220321T153707Z">
        <seg>그래서 아래 첫 두 &lt;g1&gt;#check&lt;/g1&gt;명령에서 표현식은 같은 방식으로 해석됩니다. 반면 세 번째 &lt;g2&gt;#check&lt;/g2&gt; 명령은 &lt;g3&gt;2&lt;/g3&gt;를 정수로 해석합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So &lt;g2&gt;def&lt;/g2&gt; can also be used to simply name a value like this:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144224Z" creationid="tlqk35" creationdate="20220321T144224Z">
        <seg>그래서 &lt;g2&gt;def&lt;/g2&gt;는 이 같은 값을 단순히 이름으로 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So constructing an
element &lt;g8&gt;t : p&lt;/g8&gt; tells us that &lt;g9&gt;p&lt;/g9&gt; is indeed true.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T111145Z" creationid="tlqk35" creationdate="20220321T160102Z">
        <seg>그러므로 원소 &lt;g8&gt;t : p&lt;/g8&gt;을 생성하는 것은 &lt;g9&gt;p&lt;/g9&gt;가 당연히 사실임을 알립니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So far, you have seen that Lean allows you to
introduce inductive types with any number of recursive
constructors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T152303Z" creationid="tlqk35" creationdate="20220528T152303Z">
        <seg>지금까지 여러분은 린이 여러분에게 재귀적인 생성자에 대한 임의의 수로 유도형을 도입하게 해줌을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So if we have
&lt;g11&gt;p q r : Prop&lt;/g11&gt;, the expression &lt;g12&gt;p → q → r&lt;/g12&gt; reads "if &lt;g13&gt;p&lt;/g13&gt;, then if &lt;g14&gt;q&lt;/g14&gt;,
then &lt;g15&gt;r&lt;/g15&gt;." This is just the "curried" form of &lt;g16&gt;p ∧ q → r&lt;/g16&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162407Z" creationid="tlqk35" creationdate="20220321T162407Z">
        <seg>그래서 만약 &lt;g11&gt;p q r : Prop&lt;/g11&gt;이 있다면 표현식 &lt;g12&gt;p → q → r&lt;/g12&gt;은 "&lt;g13&gt;p&lt;/g13&gt;이면 그러면&lt;g14&gt;q&lt;/g14&gt;이면&lt;g15&gt;r&lt;/g15&gt;이다."로 읽습니다. 이는 &lt;g16&gt;p ∧ q → r&lt;/g16&gt;의 "커리된(curried)" 형태일 뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So it makes sense to take the type to be the first argument to
&lt;g8&gt;cons&lt;/g8&gt;, so that for any type, &lt;g9&gt;α&lt;/g9&gt;, &lt;g10&gt;cons α&lt;/g10&gt; is the insertion
function for lists of type &lt;g11&gt;α&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151156Z" creationid="tlqk35" creationdate="20220321T151156Z">
        <seg>그래서 &lt;g8&gt;cons&lt;/g8&gt;의 첫번째 인수의 유형으로 임의의 유형 &lt;g9&gt;α&lt;/g9&gt;를 받아들이게 하는게 타당합니다. &lt;g10&gt;cons α&lt;/g10&gt;는 &lt;g11&gt;α&lt;/g11&gt;유형을 원소로 하는 리스트에 대한 삽입 함수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So, for example, we could
have used the same variable, &lt;g1&gt;x&lt;/g1&gt;, in both the hypothesis and
conclusion, and instantiated it by a different variable, &lt;g2&gt;z&lt;/g2&gt;, in the
proof:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064951Z" creationid="tlqk35" creationdate="20220321T173933Z">
        <seg>그럼 예를 들어 우리가 같은 변수 &lt;g1&gt;x&lt;/g1&gt;를 가정과 결론 양쪽에 사용할 수 있어야 합니다. 그리고 증명에서 다른 변수 &lt;g2&gt;z&lt;/g2&gt;로도 이것이 인스턴스화 될 수 있어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So, for example, you
can write &lt;g8&gt;fun x =&gt; g (f x)&lt;/g8&gt; instead of &lt;g9&gt;fun x : Nat =&gt; g (f x)&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143113Z" creationid="tlqk35" creationdate="20220321T143113Z">
        <seg>그래서 여러분은 &lt;g8&gt;fun x : Nat =&gt; g (f x)&lt;/g8&gt;대신에 &lt;g9&gt;fun x =&gt; g (f x)&lt;/g9&gt;와 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So, if &lt;g3&gt;t&lt;/g3&gt;
ordinarily only effects the current goal, &lt;g4&gt;focus (all_goals t)&lt;/g4&gt; has
the same effect as &lt;g5&gt;t&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113218Z" creationid="tlqk35" creationdate="20220524T153117Z">
        <seg>그래서 만약 &lt;g3&gt;t&lt;/g3&gt;가 평소처럼 현재 목표에만 영향을 미친다면 
&lt;g4&gt;focus (all_goals t)&lt;/g4&gt;은 &lt;g5&gt;t&lt;/g5&gt;와 같은 효과를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So, when &lt;g12&gt;f₁&lt;/g12&gt; and &lt;g13&gt;f₂&lt;/g13&gt; are
extensionally equal, we have the following chain of equalities:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T182710Z" creationid="tlqk3" creationdate="20220610T182710Z">
        <seg>그래서 &lt;g12&gt;f₁&lt;/g12&gt;와 &lt;g13&gt;f₂&lt;/g13&gt;가 외연적으로 동일할 때 다음과 같은 등식 연결을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So, you can define instances for particular numerals.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162934Z" creationid="tlqk3" creationdate="20220604T162934Z">
        <seg>그래서 여러분은 특정 수치에 대해 개체를 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some additional tactics are useful for constructing and destructing
propositions and data.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092352Z" creationid="tlqk35" creationdate="20220522T070154Z">
        <seg>몇몇 추가적인 전략들은 명제와 데이터를 생성하고 파괴하는데 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some functional programming languages support &lt;g1&gt;incomplete
patterns&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165238Z" creationid="tlqk3" creationdate="20220529T165238Z">
        <seg>어떤 함수형 프로그래밍 언어는 &lt;g1&gt;불완전한 패턴&lt;/g1&gt; 기능을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some mathematically common examples of operations of functions can be
described in terms of lambda abstraction:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142622Z" creationid="tlqk35" creationdate="20220321T142622Z">
        <seg>수학적으로 흔한 함수 연산 예제는 람다 추상화에 대한 것으로 설명될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some operations, however, need to be &lt;g1&gt;polymorphic&lt;/g1&gt; over type
universes.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141814Z" creationid="tlqk35" creationdate="20220321T141814Z">
        <seg>그러나 몇몇 연산은 유형 세계에 대해 &lt;g1&gt;다형적(polymorphic)&lt;/g1&gt;일 필요가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some simplifications are possible, however.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T104025Z" creationid="tlqk35" creationdate="20220321T155224Z">
        <seg>하지만 몇 가지 단순화를 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Something funny
is going on: if &lt;g2&gt;v&lt;/g2&gt; has type &lt;g3&gt;Vector α (succ n)&lt;/g3&gt;, it &lt;g4&gt;can't&lt;/g4&gt; be
nil, but it is not clear how to tell that to &lt;g5&gt;casesOn&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180106Z" creationid="tlqk3" creationdate="20220603T180106Z">
        <seg>무언가 재밌는 일이 일어나고 있습니다. 만약  &lt;g2&gt;v&lt;/g2&gt;가 &lt;g3&gt;Vector α (succ n)&lt;/g3&gt;형이고 그것은 nil일 &lt;g4&gt;일 수 없습니다.&lt;/g4&gt; 그러나 &lt;g5&gt;casesOn&lt;/g5&gt;에 대해 구별하는 법이 명확하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes Lean can't find an instance because the class is buried
under a definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180121Z" creationid="tlqk3" creationdate="20220604T180121Z">
        <seg>때때로 린은 클래스가 정의에 묻혀 있어 개채를 찾지 못할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes an argument in a dependent matching pattern is not essential
to the definition, but nonetheless has to be included to specialize
the type of the expression appropriately.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T143611Z" creationid="tlqk3" creationdate="20220604T143611Z">
        <seg>떄때로 종속 매칭 패턴에서 인수는 정의에 반드시 필요하지 않습니다. 그럼에도 표현식의 유형을 적절하게 특수화하는데 포함될 필요가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes the left-hand side of an identity can match more than one
subterm in the pattern, in which case the &lt;g1&gt;rw&lt;/g1&gt; tactic chooses the
first match it finds when traversing the term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114744Z" creationid="tlqk35" creationdate="20220524T155343Z">
        <seg>때때로 항등식의 좌변은 패턴 속 한 개 이상의 부분항과 일치할 수 있습니다. 
이 때 &lt;g1&gt;rw&lt;/g1&gt; 전략은 항들을 훑으면서 제일 처음 일치하는 것을 찾고 선택합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes, however, it is useful to limit
the scope of a variable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150032Z" creationid="tlqk35" creationdate="20220321T150032Z">
        <seg>그러나 때때로 변수의 범위를 제한하는 것이 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sometimes, however, we may find ourselves in a situation where we have
declared an argument to a function to be implicit, but now want to
provide the argument explicitly.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153716Z" creationid="tlqk35" creationdate="20220321T153716Z">
        <seg>하지만 때때로 우리는 우리 스스로 함수에 대한 인수가 암시적이도록 선언하는 걸 발견합니다. 그러나 지금 인수를 명시적으로 제공하길 원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Special modes in Visual Studio Code (VS Code for short) and
Emacs offer powerful support for writing and debugging proofs, and is much better suited for serious use.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131922Z" creationid="tlqk35" creationdate="20220321T131922Z">
        <seg>비주얼 스튜디오 코드(짧게는 VS code)에서 특정 모드와 Emacs는 강력한 편집 기능과 증명 디버깅 기능을 지원합니다. 그리고 진지한 사용을 생각한다면 이게 훨씬 적합합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically with quotients we can use the
generic notation &lt;g15&gt;⟦a⟧&lt;/g15&gt; for &lt;g16&gt;Quot.mk Setoid.r&lt;/g16&gt; where the instance
of &lt;g17&gt;Setoid&lt;/g17&gt; is implicit in the notation &lt;g18&gt;Setoid.r&lt;/g18&gt;, as well as the
theorem &lt;g19&gt;Quotient.exact&lt;/g19&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T175147Z" creationid="tlqk3" creationdate="20220610T175147Z">
        <seg>특히 몫과 함께 &lt;g16&gt;Quot.mk Setoid.r&lt;/g16&gt;에 대한 일반 표기법 &lt;g15&gt;⟦a⟧&lt;/g15&gt;를 사용할 수 있습니다. 여기서 &lt;g17&gt;Setoid&lt;/g17&gt;의 개체는 표기법 &lt;g18&gt;Setoid.r&lt;/g18&gt; 및 정리 &lt;g19&gt;Quotient.exact&lt;/g19&gt;에 암시되어 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Specifically,
&lt;g3&gt;congrArg&lt;/g3&gt; can be used to replace the argument, &lt;g4&gt;congrFun&lt;/g4&gt; can be
used to replace the term that is being applied, and &lt;g5&gt;congr&lt;/g5&gt; can be
used to replace both at once.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082542Z" creationid="tlqk35" creationdate="20220321T175909Z">
        <seg>구체적으로 &lt;g3&gt;congrArg&lt;/g3&gt;은 인수를 바꾸는데 사용될 수 있습니다. &lt;g4&gt;congrFun&lt;/g4&gt;은 적용한 항을 바꾸는데 사용할 수 있습니다. 그리고 &lt;g5&gt;congr&lt;/g5&gt;는 한 번에 둘을 바꾸는데 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Start writing the proof from the top down, using
&lt;g3&gt;sorry&lt;/g3&gt; to fill in subproofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165219Z" creationid="tlqk35" creationdate="20220321T170320Z">
        <seg>하향식 증명 작성을 시작하려면 보조 증명에 &lt;g3&gt;sorry&lt;/g3&gt;를 채워 사용하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structural Recursion and Induction</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170313Z" creationid="tlqk3" creationdate="20220529T170313Z">
        <seg>구조적 재귀와 귀납</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structures and Records</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T172114Z" creationid="tlqk35" creationdate="20220528T172114Z">
        <seg>구조체와 레코드</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structuring Tactic Proofs</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T142401Z" creationid="tlqk35" creationdate="20220524T142401Z">
        <seg>전략 증명 구조화하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structuring conversion tactics</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183749Z" creationid="tlqk3" creationdate="20220604T183749Z">
        <seg>전환 전술 구조화하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such a
function is &lt;g3&gt;polymorphic&lt;/g3&gt;: you expect the &lt;g4&gt;cons&lt;/g4&gt; function for
&lt;g5&gt;Nat&lt;/g5&gt;, &lt;g6&gt;Bool&lt;/g6&gt;, or an arbitrary type &lt;g7&gt;α&lt;/g7&gt; to behave the same way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151118Z" creationid="tlqk35" creationdate="20220321T151118Z">
        <seg>이러한 함수는 &lt;g3&gt;polymorphic&lt;/g3&gt;입니다. 여러분은 &lt;g4&gt;cons&lt;/g4&gt;는  &lt;g5&gt;Nat&lt;/g5&gt;, &lt;g6&gt;Bool&lt;/g6&gt; 혹은 임의의 유형  &lt;g7&gt;α&lt;/g7&gt;에 대해 동일한 방식으로 동작해야 한다고 기대합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such examples of &lt;g1&gt;dependent pattern matching&lt;/g1&gt; are
considered in the &lt;g2&gt;Section Dependent Pattern Matching&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164606Z" creationid="tlqk3" creationdate="20220529T164606Z">
        <seg>그런 &lt;g1&gt;종속적인 패턴 매칭&lt;/g1&gt;의 예제는 &lt;g2&gt;종속적인 패턴 매칭 섹션&lt;/g2&gt;에서 다뤄집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such parameters
are simply added to the local context before the definition is
processed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173510Z" creationid="tlqk3" creationdate="20220529T173510Z">
        <seg>그런 매개변수들은 단순히 정의가 처리되기 전에 지역 상황에 추가됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Such systems
can have bugs, and it can be difficult to ensure that the results they deliver are correct.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131418Z" creationid="tlqk35" creationdate="20220321T131418Z">
        <seg>이런 시스템들은 버그가 생길 수 있고, 그들이 올바르다고 도출한 결과를 확실히 보장하기가 어려울 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sugar for Simple Functions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135917Z" creationid="tlqk3" creationdate="20220526T135917Z">
        <seg>간단한 함수를 위한 설탕</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose that for &lt;g1&gt;α : Type&lt;/g1&gt; we define the &lt;g2&gt;Set α := α → Prop&lt;/g2&gt; to
denote the type of subsets of &lt;g3&gt;α&lt;/g3&gt;, essentially identifying subsets
with predicates.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174417Z" creationid="tlqk3" creationdate="20220605T174417Z">
        <seg>&lt;g1&gt;α : Type&lt;/g1&gt;에 대해 본질적으로 술어를 갖는 부분집합을 식별하는 &lt;g3&gt;α&lt;/g3&gt;의 부분집합 유형을 나타내기 위해 &lt;g2&gt;Set α:= α → Prop&lt;/g2&gt;을 정의한다고 합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose that, assuming &lt;g1&gt;p&lt;/g1&gt; as a hypothesis, we have a proof of &lt;g2&gt;q&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T103601Z" creationid="tlqk35" creationdate="20220321T155118Z">
        <seg>가설로 &lt;g1&gt;p&lt;/g1&gt;를 가정하면 &lt;g2&gt;q&lt;/g2&gt;의 증명을 가질 수 있다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose we define
a function &lt;g1&gt;f (x : Nat) {y : Nat} (z : Nat)&lt;/g1&gt; with the arguments
shown.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T184942Z" creationid="tlqk3" creationdate="20220525T184942Z">
        <seg>우리가 인수를 제시하여 함수 &lt;g1&gt;f (x : Nat) {y : Nat} (z : Nat)&lt;/g1&gt;을 정의했다고 합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose we have &lt;g2&gt;α : Sort i&lt;/g2&gt; and &lt;g3&gt;β : Sort j&lt;/g3&gt;, where the
expression &lt;g4&gt;β&lt;/g4&gt; may depend on a variable &lt;g5&gt;x : α&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070023Z" creationid="tlqk35" creationdate="20220321T174455Z">
        <seg>우리가 &lt;g2&gt;α : Sort i&lt;/g2&gt;과 &lt;g3&gt;β : Sort j&lt;/g3&gt;을 갖고 있다고 합시다. 여기서 표현식 &lt;g4&gt;β&lt;/g4&gt;는 변수 &lt;g5&gt;x : α&lt;/g5&gt;에 의존할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose we have an implementation of lists as:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152423Z" creationid="tlqk35" creationdate="20220321T152423Z">
        <seg>우리가 리스트의 구현을 다음과 같이 했다고 가정합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose we try to prove the commutativity of addition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162301Z" creationid="tlqk3" creationdate="20220527T162301Z">
        <seg>우리가 덧셈에 교환성을 증명하려고 한다 가정합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose we want to prove example
&lt;g1&gt;(fun x : Nat =&gt; 0 + x) = (fun x =&gt; x)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183009Z" creationid="tlqk3" creationdate="20220604T183009Z">
        <seg>예제 &lt;g1&gt;(fun x : Nat =&gt; 0 + x) = (fun x =&gt; x)&lt;/g1&gt;을 증명하고 싶다고 해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose you have the variable &lt;g2&gt;x : α&lt;/g2&gt; and you can
construct an expression &lt;g3&gt;t : β&lt;/g3&gt;, then the expression &lt;g4&gt;fun (x : α)
=&gt; t&lt;/g4&gt;, or, equivalently, &lt;g5&gt;λ (x : α) =&gt; t&lt;/g5&gt;, is an object of type &lt;g6&gt;α
→ β&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142401Z" creationid="tlqk35" creationdate="20220321T142401Z">
        <seg>여러분이 변수 &lt;g2&gt;x : α&lt;/g2&gt;를 갖고 있고 표현식 &lt;g3&gt;t : β&lt;/g3&gt;을 만들 수 있다 가정합시다. 그러면 표현식&lt;g4&gt;fun (x : α) =&gt; t&lt;/g4&gt; 또는 등가적으로 &lt;g5&gt;λ (x : α) =&gt; t&lt;/g5&gt;은 &lt;g6&gt;α → β&lt;/g6&gt; 유형인 대상입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose you wish to write a function &lt;g1&gt;cons&lt;/g1&gt; which inserts a new
element at the head of a list.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151011Z" creationid="tlqk35" creationdate="20220321T151011Z">
        <seg>여러분이 리스트의 머리에 새 원소를 삽입하는 함수 &lt;g1&gt;cons&lt;/g1&gt;를 만들기 원한다 해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Suppose, however, that &lt;g9&gt;β&lt;/g9&gt;
is of &lt;g10&gt;Sort 0&lt;/g10&gt;, that is, an element of &lt;g11&gt;Prop&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070340Z" creationid="tlqk35" creationdate="20220321T174852Z">
        <seg>그러나 &lt;g9&gt;β&lt;/g9&gt;가 &lt;g10&gt;Sort 0&lt;/g10&gt;형의 원소라면 즉, &lt;g11&gt;Prop&lt;/g11&gt;의 원소라면</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Systems of natural deduction for propositional logic also typically rely on the following rule:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T103444Z" creationid="tlqk35" creationdate="20220321T155031Z">
        <seg>명제논리에 대한 자연 영역의 체계은 주로 다음 규칙에 의존합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>TO DO: eventually, describe using_well_founded.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173305Z" creationid="tlqk3" creationdate="20220603T173305Z">
        <seg>할 것: 결국, 잘 세워진을 사용하는 것을 기술하기.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tactic commands can take compound expressions, not just single
identifiers.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084720Z" creationid="tlqk35" creationdate="20220522T060558Z">
        <seg>전략 명령은 하나의 식별자 뿐만 아니라 복합적인 식을 받을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tactics</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184229Z" creationid="tlqk35" creationdate="20220321T184229Z">
        <seg>전략</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tactics for Inductive Types</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163534Z" creationid="tlqk3" creationdate="20220527T163534Z">
        <seg>귀납형에 대한 전략</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tactics often provide an efficient way of building a proof, but long
sequences of instructions can obscure the structure of the
argument.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104444Z" creationid="tlqk35" creationdate="20220524T142528Z">
        <seg>전략들은 종종 증명을 세우는 효율적인 방식을 제공합니다. 그러나 
지시사항들의 긴 나열은 인수(argument)의 구조를 모호하게 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tactics that may produce multiple subgoals often tag them.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084822Z" creationid="tlqk35" creationdate="20220522T060948Z">
        <seg>다수의 하위 목표를 생성할 수 있는 전략은 이들에 태그를 붙입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Taking the left conjunct
gives the desired conclusion, &lt;g9&gt;p y&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064723Z" creationid="tlqk35" creationdate="20220321T173906Z">
        <seg>논리곱의 왼쪽을 취하여 원하는 결론 &lt;g9&gt;p y&lt;/g9&gt;을 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That assignment can also be made local:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183629Z" creationid="tlqk3" creationdate="20220525T183629Z">
        <seg>그 배정는 지역적으로 만들어 질 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That command, which will
be explained in &lt;g4&gt;Chapter Type Classes&lt;/g4&gt;, works by
assigning an &lt;g5&gt;[instance]&lt;/g5&gt; attribute to the associated definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183540Z" creationid="tlqk3" creationdate="20220525T183540Z">
        <seg> &lt;g4&gt;Chapter Type Classes&lt;/g4&gt;에서 설명할 그 명령은 연관된 정의에 &lt;g5&gt;[instance]&lt;/g5&gt; 특성을 배정하는 것으로 동작합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That expression is syntactic
sugar for &lt;g6&gt;ite p a b&lt;/g6&gt;, where &lt;g7&gt;ite&lt;/g7&gt; is defined as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172449Z" creationid="tlqk3" creationdate="20220604T172449Z">
        <seg>그 표현식은 &lt;g6&gt;ite p a b&lt;/g6&gt;에 대한 문법적 설탕입니다. 여기서 &lt;g7&gt;ite&lt;/g7&gt; 다음과 같이 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is,
an instance declaration can in turn depend on an implicit instance of a type class.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161013Z" creationid="tlqk3" creationdate="20220604T161013Z">
        <seg>즉, 개체 선언은 유형 클래스의 암시적인 개체에 차례로 의존하게 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, given &lt;g1&gt;h1 : a = b&lt;/g1&gt; and &lt;g2&gt;h2 : p a&lt;/g2&gt;, we
can construct a proof for &lt;g3&gt;p b&lt;/g3&gt; using substitution:
&lt;g4&gt;Eq.subst h1 h2&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T063556Z" creationid="tlqk35" creationdate="20220321T175735Z">
        <seg>즉, &lt;g1&gt;h1 : a = b&lt;/g1&gt;과 &lt;g2&gt;h2 : p a&lt;/g2&gt;에 대해 &lt;g3&gt;p b&lt;/g3&gt;의 증명을 치환 &lt;g4&gt;Eq.subst h1 h2&lt;/g4&gt;을 사용하여 구성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, in &lt;g1&gt;dite c t e&lt;/g1&gt;, we can assume &lt;g2&gt;hc : c&lt;/g2&gt; in the "then"
branch, and &lt;g3&gt;hnc : ¬ c&lt;/g3&gt; in the "else" branch.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172752Z" creationid="tlqk3" creationdate="20220604T172752Z">
        <seg>즉, &lt;g1&gt;dite c t e&lt;/g1&gt;에서 우리는 &lt;g2&gt;hc : c&lt;/g2&gt;를 "then" 분기 그리고 "else" 분기에서 &lt;g3&gt;hnc : ¬ c&lt;/g3&gt;라고 가정할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
&lt;g2&gt;rewrite&lt;/g2&gt; and &lt;g3&gt;simp&lt;/g3&gt; tactics tend to be very effective in proofs
like these.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T161229Z" creationid="tlqk3" creationdate="20220527T161229Z">
        <seg>&lt;g2&gt;rewrite&lt;/g2&gt;와 &lt;g3&gt;simp&lt;/g3&gt; 전략은 이 같은 증명에서 아주 효과적인 경향이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
&lt;g2&gt;structure&lt;/g2&gt; command also allows us to define new structures based on
previously defined ones.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173304Z" creationid="tlqk35" creationdate="20220528T173304Z">
        <seg>또 &lt;g2&gt;structure&lt;/g2&gt;  명령은 이전에 정의한 구조체에 기반한 새 구조체를 정의하도록 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
canonical way to prove &lt;g2&gt;∀ y : α, p y&lt;/g2&gt; is to take an arbitrary &lt;g3&gt;y&lt;/g3&gt;,
and prove &lt;g4&gt;p y&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T064604Z" creationid="tlqk35" creationdate="20220321T173803Z">
        <seg>&lt;g2&gt;∀ y : α, p y&lt;/g2&gt;을 증명하는 표준 방법은 임의의 &lt;g3&gt;y&lt;/g3&gt;를 받아서 &lt;g4&gt;p y&lt;/g4&gt;임을 증명하는 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
command</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174052Z" creationid="tlqk35" creationdate="20220524T174052Z">
        <seg>명령</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
constructors all live in the &lt;g3&gt;Weekday&lt;/g3&gt; namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T145312Z" creationid="tlqk3" creationdate="20220526T145312Z">
        <seg>생성자는 모두 &lt;g3&gt;Weekday&lt;/g3&gt; 이름공간에 살고 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
definition of equality is atypical, however; see the discussion in the
next section.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154200Z" creationid="tlqk35" creationdate="20220528T154200Z">
        <seg>하지만 동등성의 정의는 전형적이지 않습니다. 다음 섹션의 논의를 보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
difference is that given &lt;g1&gt;hp : p&lt;/g1&gt; and &lt;g2&gt;hq : q&lt;/g2&gt;, &lt;g3&gt;And.intro hp
hq&lt;/g3&gt; has type &lt;g4&gt;p ∧ q : Prop&lt;/g4&gt;, while &lt;g5&gt;Prod hp hq&lt;/g5&gt; has type
&lt;g6&gt;p × q : Type&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162937Z" creationid="tlqk35" creationdate="20220321T162937Z">
        <seg>차이는 &lt;g1&gt;hp : p&lt;/g1&gt;와 &lt;g2&gt;hq : q&lt;/g2&gt;가 주어졌을 때 &lt;g3&gt;And.intro hp hq&lt;/g3&gt;는 &lt;g4&gt;p ∧ q : Prop&lt;/g4&gt;형을 갖는 한편 &lt;g5&gt;Prod hp hq&lt;/g5&gt;는 &lt;g6&gt;p × q : Type&lt;/g6&gt;형을 갖는다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
distinction is only useful in constructive mathematics; classically,
every proposition is decidable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T171429Z" creationid="tlqk3" creationdate="20220604T171429Z">
        <seg>이 구별은 직관주의적 수학에서만 유용합니다. 고전적으로 모든 명제는 결정 가능합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
elimination rules provide for a principle of recursion on the type,
which includes, as a special case, a principle of induction as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T144552Z" creationid="tlqk3" creationdate="20220526T144552Z">
        <seg>제거 규칙은 유형의 재귀의 원리를 제공합니다. 이것은 특별한 경우로서 귀납의 원리도 포합합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
function &lt;g8&gt;F&lt;/g8&gt; provides the inductive recipe for doing that: it tells
us how to construct an element &lt;g9&gt;C x&lt;/g9&gt;, given elements of &lt;g10&gt;C y&lt;/g10&gt; for
each predecessor &lt;g11&gt;y&lt;/g11&gt; of &lt;g12&gt;x&lt;/g12&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165813Z" creationid="tlqk3" creationdate="20220603T165813Z">
        <seg>함수 &lt;g8&gt;F&lt;/g8&gt;는 그것을 하는데 귀납적인 요리법을 제공합니다. 이것은 &lt;g12&gt;x&lt;/g12&gt;의 각 선행자 &lt;g11&gt;y&lt;/g11&gt;에 대해&lt;g10&gt;C y&lt;/g10&gt;의  원소가 주어진 경우 원소 &lt;g9&gt;C x&lt;/g9&gt;를 생성하는 법을 우리에게 말해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
properties above are stated for the natural numbers (type &lt;g5&gt;Nat&lt;/g5&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082835Z" creationid="tlqk35" creationdate="20220321T180010Z">
        <seg>위의 성질들은 자연수 (&lt;g5&gt;Nat&lt;/g5&gt; 유형)에 대해 기술되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The
type &lt;g2&gt;Foo&lt;/g2&gt; consists of nothing more than the objects that are
constructed in this way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T142836Z" creationid="tlqk3" creationdate="20220526T142836Z">
        <seg>&lt;g2&gt;Foo&lt;/g2&gt; 유형은 이 방식으로 생성된 대상 외에 아무것도 갖고있지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The (unstructured) &lt;g1&gt;cases&lt;/g1&gt; is particularly useful when you can close several
subgoals using the same tactic.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T070730Z" creationid="tlqk35" creationdate="20220522T070730Z">
        <seg>(비구조화된)&lt;g1&gt;cases&lt;/g1&gt;는 여러분이 여러 개의 하위목표를 같은 전략을 사용해 끝낼 때 특히 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g10&gt;try&lt;/g10&gt; tactic ensures that the sequential composition
succeeds.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T112350Z" creationid="tlqk35" creationdate="20220524T151824Z">
        <seg>&lt;g10&gt;try&lt;/g10&gt; 전략은 순차적인 복합이 성공함을 보장합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;;&lt;/g1&gt; can be omitted when a line break is used.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144853Z" creationid="tlqk35" creationdate="20220321T144853Z">
        <seg>세미콜론&lt;g1&gt;;&lt;/g1&gt;은 줄을 분리할 때 사용되므로 생략될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;Bool&lt;/g1&gt; type in the Lean library is an instance of
enumerated type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151914Z" creationid="tlqk3" creationdate="20220526T151914Z">
        <seg>린 라이브러리에서 &lt;g1&gt;Bool&lt;/g1&gt;형은 열거 유형의 개체입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;Decidable&lt;/g1&gt; type class also provides a bit of small-scale
automation for proving theorems.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174505Z" creationid="tlqk3" creationdate="20220604T174505Z">
        <seg>&lt;g1&gt;Decidable&lt;/g1&gt; 유형 클래스는 정리 증명에 대한 아주 작은 소규모의 자동화도 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;Lean Theorem Prover&lt;/g1&gt; aims to bridge the gap between interactive and automated theorem proving, by situating
automated tools and methods in a framework that supports user interaction and the construction of fully specified
axiomatic proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131527Z" creationid="tlqk35" creationdate="20220321T131527Z">
        <seg> &lt;g1&gt;Lean 증명 보조기&lt;/g1&gt;는 사용자의 상호작용과 완전히 구체화된 공리적 증명의 생성을 돕는 자동화된 도구와 방법들을 프레임워크에 둠으로써 상호작용과 자동화된 정리 증명 사이의 빈틈을 메우는 것을 목표로 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;Lean&lt;/g1&gt; project was launched by Leonardo de Moura at Microsoft Research Redmond in 2013.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131729Z" creationid="tlqk35" creationdate="20220321T131729Z">
        <seg>&lt;g1&gt;Lean&lt;/g1&gt; 프로젝트는 마이크로소프트 연구소 Redmond의 Leonardo de Moura가 2013년 시작했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;Mul&lt;/g1&gt; class is convenient for types that only implement the homogeneous multiplication.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170211Z" creationid="tlqk3" creationdate="20220604T170211Z">
        <seg>&lt;g1&gt;Mul&lt;/g1&gt; 클래스는 동형 곱셈만 구현된 유형에 대해 편리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;Nat.recOn&lt;/g1&gt; is similar to &lt;g2&gt;Nat.rec&lt;/g2&gt; but the major premise occurs before the minor premises.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155858Z" creationid="tlqk3" creationdate="20220527T155858Z">
        <seg>&lt;g1&gt;Nat.recOn&lt;/g1&gt;은 &lt;g2&gt;Nat.rec&lt;/g2&gt;과 비슷하지만 주요 전제는 사소한 전제보다 먼저 일어납니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;OfNat&lt;/g1&gt; instance is parametric on the numeral.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162918Z" creationid="tlqk3" creationdate="20220604T162918Z">
        <seg>&lt;g1&gt;OfNat&lt;/g1&gt; 개체는 수치에 대해 매개적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;apply&lt;/g1&gt; tactic applies an expression, viewed as denoting a
function with zero or more arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T083834Z" creationid="tlqk35" creationdate="20220321T184622Z">
        <seg>&lt;g1&gt;apply&lt;/g1&gt; 전략은 0 또는 그 이상의 인수가 있는 함수를 나타내는 것으로 간주되는 표현식에 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;assumption&lt;/g1&gt; tactic looks through the assumptions in context of
the current goal, and if there is one matching the conclusion, it
applies it.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090322Z" creationid="tlqk35" creationdate="20220522T062815Z">
        <seg>&lt;g1&gt;assumption&lt;/g1&gt; 전략은 현재 목표의 맥락 속 가정을 훑어 봅니다. 
그리고 결론과 대응되는 가정이 있다면 그것을 목표에 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;calc&lt;/g1&gt; command can be configured for any relation that supports
some form of transitivity.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T065645Z" creationid="tlqk35" creationdate="20220321T180640Z">
        <seg>&lt;g1&gt;calc&lt;/g1&gt; 명령은 추이성의 몇몇 형태를 지원하는 어떤 관계든지 설정될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;case&lt;/g1&gt; tactic is clever, in that it will match the constructor to the appropriate goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165554Z" creationid="tlqk3" creationdate="20220527T165554Z">
        <seg> &lt;g1&gt;case&lt;/g1&gt; 전략은 적절한 목표에 대한 생성자를 짝지어준다는 점에서 영리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;cases&lt;/g1&gt; tactic can also be used to
decompose a conjunction.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T093031Z" creationid="tlqk35" creationdate="20220522T071059Z">
        <seg>&lt;g1&gt;cases&lt;/g1&gt; 전략은 논리곱를 분해하는데 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;cases&lt;/g1&gt; tactic will also do a
case distinction on a natural number:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T103919Z" creationid="tlqk35" creationdate="20220523T073754Z">
        <seg>&lt;g1&gt;cases&lt;/g1&gt; 전략은 자연수의 경우를 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;cases&lt;/g1&gt; tactic works on elements of an inductively defined type,
and does what the name suggests: it decomposes the element according
to each of the possible constructors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163924Z" creationid="tlqk3" creationdate="20220527T163924Z">
        <seg>&lt;g1&gt;cases&lt;/g1&gt; 전략은 재귀적으로 정의된 유형의 원소와 이름이 제안하는 것에 작용합니다. 이것은 가능한 생성자들의 각각에 따라 원소를 분리한다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;cases&lt;/g1&gt; tactic, and its companion, the &lt;g2&gt;induction&lt;/g2&gt; tactic, are discussed in greater detail in
the &lt;g3&gt;Tactics for Inductive Types&lt;/g3&gt; section.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104029Z" creationid="tlqk35" creationdate="20220524T142143Z">
        <seg>&lt;g1&gt;cases&lt;/g1&gt; 전략 그리고 그것의 동반자인 &lt;g2&gt;induction&lt;/g2&gt; 전략은 
&lt;g3&gt;귀납형을 위한 전략&lt;/g3&gt;  섹션에서 더욱 상세히 논의될 예정입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;choice&lt;/g1&gt; principle also erases the distinction between the
property of being &lt;g2&gt;Nonempty&lt;/g2&gt; and the more constructive property of
being &lt;g3&gt;Inhabited&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184236Z" creationid="tlqk3" creationdate="20220610T184236Z">
        <seg>&lt;g1&gt;선택&lt;/g1&gt; 원리은 또 &lt;g2&gt;비어 있음&lt;/g2&gt; 속성과 보다 건설적인 &lt;g3&gt;내재&lt;/g3&gt; 속성 간의 구별을 지웁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;contradiction&lt;/g1&gt; tactic searches for a contradiction among the hypotheses of the current goal:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104110Z" creationid="tlqk35" creationdate="20220524T142215Z">
        <seg>&lt;g1&gt;contradiction&lt;/g1&gt; 전략은 현재 목표의 가정들 중에 서로 모순인 것을 탐색합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;def&lt;/g1&gt; keyword declares new constant symbols into the
working environment.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135611Z" creationid="tlqk35" creationdate="20220321T135611Z">
        <seg>&lt;g1&gt;def&lt;/g1&gt;는 작업 환경에 새로운 상수기호를 선언합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;example&lt;/g1&gt; command states a theorem without naming it or storing
it in the permanent context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124601Z" creationid="tlqk35" creationdate="20220321T162659Z">
        <seg>&lt;g1&gt;example&lt;/g1&gt; 명령은 이름이 없거나 영구적인 맥락 속에 그것을 저장한 정리를 기술합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;first | t₁ | t₂ | ... | tₙ&lt;/g1&gt; applies each &lt;g2&gt;tᵢ&lt;/g2&gt; until one succeeds, or else fails:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111523Z" creationid="tlqk35" creationdate="20220524T150543Z">
        <seg> &lt;g1&gt;first | t₁ | t₂ | ... | tₙ&lt;/g1&gt;은 각각의  &lt;g2&gt;tᵢ&lt;/g2&gt;에 대해 이 중 하나가 성공하거나 모두 실패할 때까지 적용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;induction&lt;/g1&gt; tactic also supports user-defined induction principles with
multiple targets (aka major premises).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172241Z" creationid="tlqk3" creationdate="20220527T172241Z">
        <seg>&lt;g1&gt;induction&lt;/g1&gt; 전략은 (주요 전제라고도 하는) 다수의 타겟을 갖는 사용자 정의 귀납 원리도 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;inductive&lt;/g1&gt; command creates a new type, &lt;g2&gt;Weekday&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T145246Z" creationid="tlqk3" creationdate="20220526T145246Z">
        <seg>&lt;g1&gt;inductive&lt;/g1&gt; 명령은 새로운 유형 &lt;g2&gt;Weekday&lt;/g2&gt;를 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;injection&lt;/g1&gt; tactic also detects contradictions that arise when different constructors
are set equal to one another, and uses them to close the goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T173115Z" creationid="tlqk3" creationdate="20220527T173115Z">
        <seg>&lt;g1&gt;injection&lt;/g1&gt; 전략은 서로 다른 생성자들이 서로 같도록 설정되었을 때 일어나는 모순을 감지하고 이들로 목표를 종료하는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;intro&lt;/g1&gt; command can more generally be used to introduce a variable of any type:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085852Z" creationid="tlqk35" creationdate="20220522T062210Z">
        <seg>&lt;g1&gt;intro&lt;/g1&gt;명령은 일반적으로 임의 유형의 변수를 도입하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;intros&lt;/g1&gt; tactic can be used without any arguments, in which
case, it chooses names and introduces as many variables as it can.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090221Z" creationid="tlqk35" creationdate="20220522T062749Z">
        <seg>&lt;g1&gt;intros&lt;/g1&gt; 전략은 어떠한 인수 없이도 사용될 수 있습니다. 
가령, 그것은 이름을 정하고, 가능한 많은 변수를 도입할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;map&lt;/g1&gt; function is even more tedious to define by hand than the
&lt;g2&gt;tail&lt;/g2&gt; function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T184127Z" creationid="tlqk3" creationdate="20220603T184127Z">
        <seg>심지어 &lt;g1&gt;map&lt;/g1&gt; 함수는 &lt;g2&gt;tail&lt;/g2&gt; 함수보다 손으로 정의하기에는 더 번거롭습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;match&lt;/g1&gt; expression is part of Lean's function definition system,
which provides convenient and expressive ways of defining complex
functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T092149Z" creationid="tlqk35" creationdate="20220321T182458Z">
        <seg>&lt;g1&gt;match&lt;/g1&gt; 표현식은 복잡한 함수를 정의하는데 편리하고 표현력 있는 방법을 주는 린의 함수 정의 시스템의 일부입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;open&lt;/g1&gt; command admits variations.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180911Z" creationid="tlqk35" creationdate="20220524T180911Z">
        <seg>&lt;g1&gt;open&lt;/g1&gt; 명령은 변형을 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;open&lt;/g1&gt; command brings the shorter names into the current
context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150440Z" creationid="tlqk35" creationdate="20220321T150440Z">
        <seg>&lt;g1&gt;open&lt;/g1&gt; 명령은 현재 맥락에서 짧은 이름을 가져옵니다.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;or-elimination&lt;/g1&gt; rule is slightly more complicated.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T163700Z" creationid="tlqk35" creationdate="20220321T163700Z">
        <seg>&lt;g1&gt;or-제거&lt;/g1&gt; 규칙은 약간 더 복잡합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;repeat&lt;/g1&gt; combinator can be used to apply a tactic several times.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090942Z" creationid="tlqk35" creationdate="20220522T063805Z">
        <seg>조합자 &lt;g1&gt;repeat&lt;/g1&gt;는 한 전략을 여러 번 적용하는데 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;rewrite&lt;/g1&gt; tactic (abbreviated &lt;g2&gt;rw&lt;/g2&gt;) and the &lt;g3&gt;simp&lt;/g3&gt; tactic
were introduced briefly in &lt;g4&gt;Calculational Proofs&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113300Z" creationid="tlqk35" creationdate="20220524T153240Z">
        <seg> (&lt;g2&gt;rw&lt;/g2&gt;로 축약되는)&lt;g1&gt;rewrite&lt;/g1&gt; 전략과 &lt;g3&gt;simp&lt;/g3&gt; 전략은 
&lt;g4&gt;계산 증명&lt;/g4&gt;에서 간단히 소개했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;rewrite&lt;/g1&gt; tactic is not restricted to propositions.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120206Z" creationid="tlqk35" creationdate="20220524T160430Z">
        <seg>&lt;g1&gt;rewrite&lt;/g1&gt; 전략은 명제에만 국한되지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;rewrite&lt;/g1&gt; tactic provides a basic mechanism for applying
substitutions to goals and hypotheses, providing a convenient and
efficient way of working with equality.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113355Z" creationid="tlqk35" creationdate="20220524T153504Z">
        <seg>동등과 작업할 때 편리하고 효율적인 방식을 제공하면서 
&lt;g1&gt;rewrite&lt;/g1&gt; 전략은 목표와 가정에 치환을 적용하는 기본적인 작동원리를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;rfl&lt;/g1&gt; tactic is syntax sugar for &lt;g2&gt;exact rfl&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090926Z" creationid="tlqk35" creationdate="20220522T063726Z">
        <seg>&lt;g1&gt;rfl&lt;/g1&gt; 전략은 &lt;g2&gt;exact rfl&lt;/g2&gt;에 대한 문법 설탕입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;show&lt;/g1&gt; command does
nothing more than annotate the type, and, internally, all the
presentations of &lt;g2&gt;t1&lt;/g2&gt; that we have seen produce the same term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T120851Z" creationid="tlqk35" creationdate="20220321T161127Z">
        <seg>&lt;g1&gt;show&lt;/g1&gt; 명령은 유형에 주석을 달아줄 뿐 내부적으로 우리가 본 &lt;g2&gt;t1&lt;/g2&gt;의 모든 나타남이 같은 항을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;show&lt;/g1&gt; tactic can actually be used to rewrite a goal to something definitionally equivalent:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105242Z" creationid="tlqk35" creationdate="20220524T143548Z">
        <seg>&lt;g1&gt;show&lt;/g1&gt; 전략은 사실 정의상으로 동등한 무언가로 목표를 다시 쓰는데 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;simp&lt;/g1&gt; tactic, instead, rewrites the goal by applying the given
identities repeatedly, in any order, anywhere they are applicable in a
term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064952Z" creationid="tlqk35" creationdate="20220321T180515Z">
        <seg>한편, &lt;g1&gt;simp&lt;/g1&gt; 전략은 주어진 항등식들을 항에 적용할 수 있는 어느 곳이든 이들을 반복적으로 사용하여 목표를 재작성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;sorry&lt;/g1&gt; identifier magically produces a proof of anything, or
provides an object of any data type at all.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164641Z" creationid="tlqk35" creationdate="20220321T170232Z">
        <seg>&lt;g1&gt;sorry&lt;/g1&gt; 식별자는 어떤 증명이든 마법같이 만듭니다. 혹은 임의 데이터 유형의 대상를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;structure&lt;/g1&gt;
command, available in Lean, provides infrastructure to support this
process.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173150Z" creationid="tlqk35" creationdate="20220528T173150Z">
        <seg> 린에서 사용할 수 있는 &lt;g1&gt;structure&lt;/g1&gt; 명령은 이 절차를 지원하는 기반구조를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;structure&lt;/g1&gt; command is especially useful for defining algebraic
structures, and Lean provides substantial infrastructure to support
working with them.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T145720Z" creationid="tlqk3" creationdate="20220527T145720Z">
        <seg>&lt;g1&gt;structure&lt;/g1&gt; 명령은 대수적 구조를 정의하는데 특히 유용합니다. 그리고 린은 이들과 작업을 지원하는 중요한 기반구조를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;tail&lt;/g1&gt; function is, however, easy to define using recursive
equations, and the equation compiler generates all the boilerplate
code automatically for us.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183906Z" creationid="tlqk3" creationdate="20220603T183906Z">
        <seg>하지만 &lt;g1&gt;tail&lt;/g1&gt; 함수는 재귀적인 방정식을 사용해 정의하기 쉽습니다. 그리고 방정식 컴파일러는 모든 보일러 플레이트 코드를 우리를 위해 자동적으로 만들어 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g1&gt;variable&lt;/g1&gt; command instructs Lean to insert the declared
variables as bound variables in definitions that refer to them by
name.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145922Z" creationid="tlqk35" creationdate="20220321T145922Z">
        <seg> &lt;g1&gt;variable&lt;/g1&gt;명령은 Lean에게 선언된 변수를 그들을 이름으로 참조하는 정의의 구속 변수로 삽입하라고 지시합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g2&gt;cases&lt;/g2&gt; tactic can be used to
decompose any element of an inductively defined type; &lt;g3&gt;constructor&lt;/g3&gt;
always applies the first applicable constructor of an inductively defined type.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T094038Z" creationid="tlqk35" creationdate="20220522T071828Z">
        <seg>&lt;g2&gt;cases&lt;/g2&gt; 전략은 귀납적으로 정의된 유형의 임의의 원소를 분해하는데 사용될 수 있습니다.
&lt;g3&gt;constructor&lt;/g3&gt;는 항상 귀납적으로 정의된 유형의 첫 적용 가능한 생성자를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g2&gt;cond&lt;/g2&gt; function is a boolean conditional: &lt;g3&gt;cond b t1 t2&lt;/g3&gt;
returns &lt;g4&gt;t1&lt;/g4&gt; if &lt;g5&gt;b&lt;/g5&gt; is true, and &lt;g6&gt;t2&lt;/g6&gt; otherwise.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T154142Z" creationid="tlqk3" creationdate="20220526T154142Z">
        <seg>&lt;g2&gt;cond&lt;/g2&gt; 함수는 조건 불리언입니다. &lt;g3&gt;cond b t1 t2&lt;/g3&gt;은 &lt;g5&gt;b&lt;/g5&gt;가 참이면 &lt;g4&gt;t1&lt;/g4&gt;을 그렇지 않으면 &lt;g6&gt;t2&lt;/g6&gt;를 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g2&gt;exact&lt;/g2&gt;
command is just a variant of &lt;g3&gt;apply&lt;/g3&gt; which signals that the
expression given should fill the goal exactly.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084110Z" creationid="tlqk35" creationdate="20220522T054950Z">
        <seg>&lt;g2&gt;exact&lt;/g2&gt; 명령은 주어진 식이 목표를 정확히 채움을 알리는 신호인 &lt;g3&gt;apply&lt;/g3&gt;의 변형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g2&gt;injection&lt;/g2&gt; tactic is designed to make use of
this fact:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172856Z" creationid="tlqk3" creationdate="20220527T172856Z">
        <seg>&lt;g2&gt;injection&lt;/g2&gt; 전략은 이 사실을 사용하도록 설계되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g2&gt;match&lt;/g2&gt;
statement "destructs" the existential assertion into the components
&lt;g3&gt;w&lt;/g3&gt; and &lt;g4&gt;hw&lt;/g4&gt;, which can then be used in the body of the statement
to prove the proposition.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071547Z" creationid="tlqk35" creationdate="20220321T182639Z">
        <seg>&lt;g2&gt;match&lt;/g2&gt; 구문은 존재 주장을 &lt;g3&gt;w&lt;/g3&gt;와 &lt;g4&gt;hw&lt;/g4&gt; 성분으로 "파괴"합니다. 이들은 명제를 증명하는 구문의 몸체에서 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g2&gt;sorry&lt;/g2&gt; does not
prevent the bytecode evaluator from evaluating the function
successfully.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172814Z" creationid="tlqk3" creationdate="20220603T172814Z">
        <seg>&lt;g2&gt;sorry&lt;/g2&gt;는 바이트코드 평가기가 함수를 성공적으로 평가하는 것을 막지 못합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g2&gt;try&lt;/g2&gt; combinator builds a
tactic that always succeeds, though possibly in a trivial way:
&lt;g3&gt;try t&lt;/g3&gt; executes &lt;g4&gt;t&lt;/g4&gt; and reports success, even if &lt;g5&gt;t&lt;/g5&gt; fails.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111934Z" creationid="tlqk35" creationdate="20220524T151428Z">
        <seg>대개 자명한 방법일지라도 &lt;g2&gt;try&lt;/g2&gt; 조합자는  항상 성공하는 전략을 세우고, 
&lt;g5&gt;t&lt;/g5&gt;가 실패했음에도 &lt;g3&gt;try t&lt;/g3&gt;는 &lt;g4&gt;t&lt;/g4&gt;를 실행해 성공을 보고합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g3&gt;@&lt;/g3&gt; symbol
and the difference between the round and curly braces will be
explained momentarily.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152129Z" creationid="tlqk35" creationdate="20220321T152129Z">
        <seg>&lt;g3&gt;@&lt;/g3&gt; 기호와 소괄호와 중괄호 사이의 차이는 곧 설명할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g3&gt;Option&lt;/g3&gt; type provides a way of representing partial functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T150223Z" creationid="tlqk3" creationdate="20220527T150223Z">
        <seg>&lt;g3&gt;Option&lt;/g3&gt; 형은 부분 함수를 표현하는 한 방법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g3&gt;local&lt;/g3&gt; modifier tells the simplifier
to use these rules in the current file (or section or namespace, as
the case may be).</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T121859Z" creationid="tlqk35" creationdate="20220524T162147Z">
        <seg>&lt;g3&gt;local&lt;/g3&gt; 수정자는 단순화기에게 현재 파일(경우에 따라 섹션, 이름공간일 수 있음) 
속 이 규칙들을 사용하라고 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g3&gt;match&lt;/g3&gt; interprets
&lt;g4&gt;p&lt;/g4&gt; as a pair, &lt;g5&gt;Prod.mk a b&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153530Z" creationid="tlqk3" creationdate="20220526T153530Z">
        <seg>&lt;g3&gt;match&lt;/g3&gt;는 &lt;g4&gt;p&lt;/g4&gt;를 쌍으로서 해석합니다. &lt;g5&gt;Prod.mk a b&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g3&gt;simp&lt;/g3&gt; tactic also recognizes the &lt;g4&gt;←t&lt;/g4&gt;
syntax that &lt;g5&gt;rewrite&lt;/g5&gt; does.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171718Z" creationid="tlqk35" creationdate="20220524T163201Z">
        <seg>&lt;g5&gt;rewrite&lt;/g5&gt;가 그런 것처럼 &lt;g3&gt;simp&lt;/g3&gt; 전략도 &lt;g4&gt;←t&lt;/g4&gt; 문법을 인식할 수 있습니다. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g5&gt;constructor&lt;/g5&gt; tactic applies the unique
constructor for conjunction, &lt;g6&gt;And.intro&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T093623Z" creationid="tlqk35" creationdate="20220522T071324Z">
        <seg>&lt;g5&gt;constructor&lt;/g5&gt; 전략은 논리곱 &lt;g6&gt;And.intro&lt;/g6&gt;의 유일한 생성자를 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g6&gt;#check&lt;/g6&gt; command asks Lean to report their
types; in Lean, auxiliary commands that query the system for
information typically begin with the hash (#) symbol.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135833Z" creationid="tlqk35" creationdate="20220321T135833Z">
        <seg>&lt;g6&gt;#check&lt;/g6&gt; 명령은 린에게 그것의 유형을 보고하도록 요청합니다. 린에서 시스템에게 정보를 불러오는 보조 명령은 주로 해시(#) 기호로 시작합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g6&gt;rewrite&lt;/g6&gt; tactic will be discussed below.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T070109Z" creationid="tlqk35" creationdate="20220522T070050Z">
        <seg>&lt;g6&gt;rewrite&lt;/g6&gt;전략은 아래에서 더 논의할 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g7&gt;#eval&lt;/g7&gt; command asks Lean to evaluate the given expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135856Z" creationid="tlqk35" creationdate="20220321T135856Z">
        <seg>&lt;g7&gt;#eval&lt;/g7&gt; 명령은 린에게 제시된 표현의 값을 평가하도록 요청합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;g9&gt;let&lt;/g9&gt; construct is a stronger means of abbreviation, and there
are expressions of the form &lt;g10&gt;let a := t1; t2&lt;/g10&gt; that cannot be
expressed as &lt;g11&gt;(fun a =&gt; t2) t1&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145042Z" creationid="tlqk35" creationdate="20220321T145042Z">
        <seg> &lt;g9&gt;let&lt;/g9&gt; 생성은 약어의 의미로 더 강합니다. 그리고 &lt;g10&gt;let a := t1; t2&lt;/g10&gt; 형태의 표현식은 &lt;g11&gt;(fun a =&gt; t2) t1&lt;/g11&gt;같이 표현될 수 없는 식이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Calculus of Constructions therefore identifies dependent arrow
types with forall-expressions in this way.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T063817Z" creationid="tlqk35" creationdate="20220321T173244Z">
        <seg>그러므로 구성주의 계산법은 의존 화살표 유형을 이처럼 모든-표현식으로 바라봅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Conversion Tactic Mode</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181748Z" creationid="tlqk3" creationdate="20220604T181748Z">
        <seg>전략 모드로 전환</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Existential Quantifier</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180810Z" creationid="tlqk35" creationdate="20220321T180810Z">
        <seg>존재 한정기호</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Law of the Excluded Middle</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184721Z" creationid="tlqk3" creationdate="20220610T184721Z">
        <seg>배중률(The Law of the Excluded Middle)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Lean standard library contains
many instances of inductive types (e.g., &lt;g1&gt;Nat&lt;/g1&gt;, &lt;g2&gt;Prod&lt;/g2&gt;, &lt;g3&gt;List&lt;/g3&gt;),
and even the logical connectives are defined using inductive types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152435Z" creationid="tlqk35" creationdate="20220528T172440Z">
        <seg>린 표준 라이브러리는 귀납형의 만은 개체(예 &lt;g1&gt;Nat&lt;/g1&gt;, &lt;g2&gt;Prod&lt;/g2&gt;, &lt;g3&gt;List&lt;/g3&gt;)들을 담고 있습니다. 그리고 심지어 논리 결합자도 귀납형을 사용해 정의됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Lean standard library contains the definition &lt;g1&gt;inferInstance&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161642Z" creationid="tlqk3" creationdate="20220604T161642Z">
        <seg>린 표준 라이브러리는 &lt;g1&gt;inferInstance&lt;/g1&gt; 정의를 포함합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Universal Quantifier</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T172601Z" creationid="tlqk35" creationdate="20220321T172601Z">
        <seg>전칭 한정기호</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The above snippet show three navigation commands:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183247Z" creationid="tlqk3" creationdate="20220604T182550Z">
        <seg>위의 자투리는 세 가지 탐색 명령을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The actual Lean implementation defines homogeneous and heterogeneous classes for arithmetical operators.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165312Z" creationid="tlqk3" creationdate="20220604T165312Z">
        <seg>실제 린에서 구현은 산술 연산자에 대한 동형과 이형 클래스를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The advantage is that we can simply write &lt;g1&gt;trans_r hab hbc&lt;/g1&gt; as a
proof of &lt;g2&gt;r a c&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065624Z" creationid="tlqk35" creationdate="20220321T174303Z">
        <seg>이것의 장점은 우리가 간단히 &lt;g1&gt;trans_r hab hbc&lt;/g1&gt;을 &lt;g2&gt;r a c&lt;/g2&gt;의 증명으로 쓸 수 있다는 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The alternatives for each constructor don't need to be solved
in the order the constructors were declared.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165249Z" creationid="tlqk3" creationdate="20220527T165249Z">
        <seg>각 생성자에 대한 대안은 성성자가 선언된 순서대로 풀려야 할 필요는 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The analogy to the logical connectives
should not come as a surprise; as we will see below, they, too, are
examples of inductive type constructions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151842Z" creationid="tlqk3" creationdate="20220526T144423Z">
        <seg>논리 연결사와 유사점은 놀라움으로 오지 말아야 합니다. 우리가 아래에서 보듯이 그들도 귀납형 생성의 예제입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The appearances of constructors prompt case splits, with
the arguments to the constructors represented by the given
variables.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T171318Z" creationid="tlqk3" creationdate="20220529T171318Z">
        <seg>생성자의 출현은 제시된 변수로 표현된 생성자에 대한 인수로 경우를 신속히 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The arbitrary fact, &lt;g1&gt;q&lt;/g1&gt;, that follows from falsity is an implicit
argument in &lt;g2&gt;False.elim&lt;/g2&gt; and is inferred automatically.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T155650Z" creationid="tlqk35" creationdate="20220321T164448Z">
        <seg>어떤 사실 &lt;g1&gt;q&lt;/g1&gt;가 어떤 거짓 명제로부터 도출됨은 &lt;g2&gt;False.elim&lt;/g2&gt;의 암시적 인수이며 자동적으로 추론됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The argument &lt;g1&gt;motive&lt;/g1&gt; is used to specify the type of the object you want to
construct, and it is a function because it may depend on the pair.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T154004Z" creationid="tlqk3" creationdate="20220526T154004Z">
        <seg>인자 &lt;g1&gt;motive&lt;/g1&gt;는 여러분이 생성하기 원하는 대상의 유형을 명시하는데 사용됩니다. 그리고 이것은 쌍에 의존할 수 있기에 함수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The argument &lt;g1&gt;{n : Nat}&lt;/g1&gt; appear after the colon, because it cannot
be held fixed throughout the definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T145544Z" creationid="tlqk3" creationdate="20220604T145544Z">
        <seg>인수&lt;g1&gt;{n : Nat}&lt;/g1&gt; 은 콜론 뒤에 나타납니다. 왜냐하면 이것은 정의 전체에 대해 고정될 수 없기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The argument &lt;g3&gt;α : Type&lt;/g3&gt;
is a parameter and occurs before the colon to indicate it does not participate in the pattern matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163822Z" creationid="tlqk3" creationdate="20220529T163822Z">
        <seg>인수 &lt;g3&gt;α : Type&lt;/g3&gt;은 매개변수이고 패턴 매칭에 참여하지 않음을 지칭하는 콜론 앞에 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The attribute can also be applied any time after the theorem is declared:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171556Z" creationid="tlqk35" creationdate="20220524T165001Z">
        <seg>이 특성은 정리가 선언된 이후 언제든지 적용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The automatically generated definitions for indexed
families are far from straightforward.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T184037Z" creationid="tlqk3" creationdate="20220603T184037Z">
        <seg>인덱스된 군을 위한 자동적으로 생성된 정의는 직관과는 거리가 멉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The axiom &lt;g10&gt;Quot.sound&lt;/g10&gt; says that &lt;g11&gt;r a b&lt;/g11&gt;
implies &lt;g12&gt;r' a b&lt;/g12&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T184107Z" creationid="tlqk3" creationdate="20220605T184107Z">
        <seg>공리 &lt;g10&gt;Quot.sound&lt;/g10&gt;는 &lt;g11&gt;r a b&lt;/g11&gt;가 &lt;g12&gt;r' b&lt;/g12&gt;를 함의한다고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The axiom has the
effect that equivalent propositions can be substituted for one another
in any context:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173401Z" creationid="tlqk3" creationdate="20220605T173401Z">
        <seg>공리는 동등한 명제는 임의의 맥락 속에서 서로를 대체할 수 있다는 효과를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The choice principle is equivalent to
the principle of &lt;g3&gt;indefinite description&lt;/g3&gt;, which can be expressed with
subtypes as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T183619Z" creationid="tlqk3" creationdate="20220610T183619Z">
        <seg>선택 원리은 &lt;g3&gt;무한 설명&lt;/g3&gt;의 원리과 동일하며, 다음과 같이 하위 유형으로 표현될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The classical axioms also give you access to additional patterns of
proof that can be justified by appeal to &lt;g1&gt;em&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T163416Z" creationid="tlqk35" creationdate="20220321T165852Z">
        <seg>고전적 공리는 추가로 여러분에게 &lt;g1&gt;em&lt;/g1&gt;에 호소하여 정당화할 수 있는 추가적인 증명 패턴 접근권한을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The collection is interrupted by nested parentheses.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140339Z" creationid="tlqk3" creationdate="20220526T140339Z">
        <seg>모음은 중첩된 괄호에 의해 중단됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The combinator &lt;g1&gt;focus t&lt;/g1&gt; ensures that &lt;g2&gt;t&lt;/g2&gt; only effects the current
goal, temporarily hiding the others from the scope.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113131Z" creationid="tlqk35" creationdate="20220524T152951Z">
        <seg>조합자 &lt;g1&gt;focus t&lt;/g1&gt;은 일시적으로 이 범위로부터 다른 것들을 숨겨 
&lt;g2&gt;t&lt;/g2&gt;가 오직 현재 목표에만 영향을 끼침을 보장합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The command
&lt;g4&gt;namespace foo&lt;/g4&gt; causes &lt;g5&gt;foo&lt;/g5&gt; to be prepended to the name of each
definition and theorem until &lt;g6&gt;end foo&lt;/g6&gt; is encountered.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180339Z" creationid="tlqk35" creationdate="20220524T175824Z">
        <seg>&lt;g4&gt;namespace foo&lt;/g4&gt; 명령은  &lt;g6&gt;end foo&lt;/g6&gt;와 마추치기 전까지 &lt;g5&gt;foo&lt;/g5&gt;가 각 정의와 정리의 이름에 앞에 붙게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The command
&lt;g7&gt;open foo&lt;/g7&gt; then creates temporary &lt;g8&gt;aliases&lt;/g8&gt; to definitions and
theorems that begin with prefix &lt;g9&gt;foo&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180329Z" creationid="tlqk35" creationdate="20220524T180021Z">
        <seg>&lt;g7&gt;open foo&lt;/g7&gt; 명령은 접두사 &lt;g9&gt;foo&lt;/g9&gt;로 시작하는 정의와 정리에 일시적인 &lt;g8&gt;별명&lt;/g8&gt;으로 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The command &lt;g1&gt;open List&lt;/g1&gt; allows you to use the shorter names:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150528Z" creationid="tlqk35" creationdate="20220321T150528Z">
        <seg>&lt;g1&gt;open List&lt;/g1&gt; 명령은 여러분이 더 짧은 이름을 사용할 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The command &lt;g1&gt;set_option pp.all true&lt;/g1&gt; carries out these settings all
at once, whereas &lt;g2&gt;set_option pp.all false&lt;/g2&gt; reverts to the previous
values.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130152Z" creationid="tlqk3" creationdate="20220526T130152Z">
        <seg>&lt;g1&gt;set_option pp.all true&lt;/g1&gt; 명령은 이 설정을 한번에 수행합니다. 반면 &lt;g2&gt;set_option pp.all false&lt;/g2&gt;은 이전의 값으로 되돌립니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The connective &lt;g1&gt;False&lt;/g1&gt; has a single elimination rule,
&lt;g2&gt;False.elim&lt;/g2&gt;, which expresses the fact that anything follows from a
contradiction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164351Z" creationid="tlqk35" creationdate="20220321T164351Z">
        <seg>연결사 &lt;g1&gt;False&lt;/g1&gt;은 하나의 제거 규칙 &lt;g2&gt;False.elim&lt;/g2&gt;을 갖습니다. 이것은 모순으로부터 어떤 것이든 도출된다는 사실을 표현합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The constants &lt;g1&gt;Quotient.mk&lt;/g1&gt;, &lt;g2&gt;Quotient.ind&lt;/g2&gt;, &lt;g3&gt;Quotient.lift&lt;/g3&gt;,
and &lt;g4&gt;Quotient.sound&lt;/g4&gt; are nothing more than the specializations of
the corresponding elements of &lt;g5&gt;Quot&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T174655Z" creationid="tlqk3" creationdate="20220610T174655Z">
        <seg>상수 &lt;g1&gt;Quotient.mk&lt;/g1&gt;, &lt;g2&gt;Quotient.ind&lt;/g2&gt;, &lt;g3&gt;Quotient.lift&lt;/g3&gt;와 &lt;g4&gt;Quotient.sound&lt;/g4&gt;는 &lt;g5&gt;Quot&lt;/g5&gt;의 언소에 대응하는 특수화일 뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The constructors, &lt;g1&gt;even_zero&lt;/g1&gt;, &lt;g2&gt;even_succ&lt;/g2&gt;, and &lt;g3&gt;odd_succ&lt;/g3&gt; provide positive means for showing that a number is even or odd.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174551Z" creationid="tlqk3" creationdate="20220603T174551Z">
        <seg>생성자 &lt;g1&gt;even_zero&lt;/g1&gt;, &lt;g2&gt;even_succ&lt;/g2&gt;과 &lt;g3&gt;odd_succ&lt;/g3&gt;은 수가 짝수인지 홀수인지 보이는데 긍정적인 수단을 제공한다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The course-of-values recursion is implemented by &lt;g5&gt;Nat.brecOn&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165008Z" creationid="tlqk3" creationdate="20220603T164419Z">
        <seg>course-of-values 재귀는 &lt;g5&gt;Nat.brecOn&lt;/g5&gt;로 구현됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The data component of this
definition is conventionally known as &lt;g5&gt;Hilbert's epsilon function&lt;/g5&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184712Z" creationid="tlqk3" creationdate="20220610T184712Z">
        <seg>이 정의의 데이터 구성요소는 일반적으로 &lt;g5&gt;Hilbert의 엡실론 함수&lt;/g5&gt;로 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The defining equation for &lt;g1&gt;div&lt;/g1&gt; does &lt;g2&gt;not&lt;/g2&gt; hold definitionally, but
the equation is available to &lt;g3&gt;rewrite&lt;/g3&gt; and &lt;g4&gt;simp&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172430Z" creationid="tlqk3" creationdate="20220603T172430Z">
        <seg>&lt;g1&gt;div&lt;/g1&gt; 로 방정식을 정의하는 것은 정의로부터 성립하지 &lt;g2&gt;않습니다.&lt;/g2&gt; 그래도 방정식은 &lt;g3&gt;rewrite&lt;/g3&gt;와 &lt;g4&gt;simp&lt;/g4&gt;를 사용할 수 있습니다. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The definition is somewhat inscrutable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171046Z" creationid="tlqk3" creationdate="20220603T171046Z">
        <seg>정의는 무언가 헤아리기가 어렵습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The definition of &lt;g1&gt;double&lt;/g1&gt; does not have to declare &lt;g2&gt;x&lt;/g2&gt; as an
argument; Lean detects the dependence and inserts it
automatically.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175209Z" creationid="tlqk35" creationdate="20220524T175209Z">
        <seg>&lt;g1&gt;double&lt;/g1&gt;의 정의는 &lt;g2&gt;x&lt;/g2&gt;를 인수로서 정의할 필요가 없습니다.
린은 종속성을 감지하고 그것을 자동적으로 삽입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The definition of &lt;g1&gt;yellow&lt;/g1&gt; forms the record with the three values
shown, and the projection &lt;g2&gt;Color.red&lt;/g2&gt; returns the red component.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T145459Z" creationid="tlqk3" creationdate="20220527T145459Z">
        <seg>&lt;g1&gt;yellow&lt;/g1&gt;의 정의는 제시한 세 값의 레코드를 형성합니다. 그리고 투영 &lt;g2&gt;Color.red&lt;/g2&gt;은 빨간색 성분을 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The definitions and theorems in Lean's standard library are spread
across multiple files.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173657Z" creationid="tlqk35" creationdate="20220524T173657Z">
        <seg>린의 정의와 정리 표준 라이브러리는 다수의 파일에 걸쳐 펴져있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The definitions of &lt;g1&gt;False&lt;/g1&gt;, &lt;g2&gt;True&lt;/g2&gt;, &lt;g3&gt;And&lt;/g3&gt;, and &lt;g4&gt;Or&lt;/g4&gt; are
perfectly analogous to the definitions of &lt;g5&gt;Empty&lt;/g5&gt;, &lt;g6&gt;Unit&lt;/g6&gt;,
&lt;g7&gt;Prod&lt;/g7&gt;, and &lt;g8&gt;Sum&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T152847Z" creationid="tlqk3" creationdate="20220527T152847Z">
        <seg> &lt;g1&gt;False&lt;/g1&gt;, &lt;g2&gt;True&lt;/g2&gt;, &lt;g3&gt;And&lt;/g3&gt;그리고 &lt;g4&gt;Or&lt;/g4&gt;의 정의는 완전히 &lt;g5&gt;Empty&lt;/g5&gt;, &lt;g6&gt;Unit&lt;/g6&gt;,
&lt;g7&gt;Prod&lt;/g7&gt;과 &lt;g8&gt;Sum&lt;/g8&gt;의 정의와 유사합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference between &lt;g3&gt;let&lt;/g3&gt; and &lt;g4&gt;have&lt;/g4&gt; is that
&lt;g5&gt;let&lt;/g5&gt; introduces a local definition in the context, so that the
definition of the local declaration can be unfolded in the proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T110100Z" creationid="tlqk35" creationdate="20220524T144703Z">
        <seg> &lt;g3&gt;let&lt;/g3&gt;과 &lt;g4&gt;have&lt;/g4&gt; 사이의 차이는 &lt;g5&gt;let&lt;/g5&gt;은 맥락 속에 지역 정의를 도입하여 
지역 선언의 정의가 증명 속에 펼쳐져 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference is that
given &lt;g1&gt;a : α&lt;/g1&gt; and &lt;g2&gt;h : p a&lt;/g2&gt;, the term &lt;g3&gt;Exists.intro a h&lt;/g3&gt; has
type &lt;g4&gt;(∃ x : α, p x) : Prop&lt;/g4&gt; and &lt;g5&gt;Sigma.mk a h&lt;/g5&gt; has type
&lt;g6&gt;(Σ x : α, p x) : Type&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T091936Z" creationid="tlqk35" creationdate="20220321T181721Z">
        <seg>차이점은 &lt;g1&gt;a : α&lt;/g1&gt;와 &lt;g2&gt;h : p a&lt;/g2&gt;에 대해서 항 &lt;g3&gt;Exists.intro a h&lt;/g3&gt;가 &lt;g4&gt;(∃ x : α, p x) : Prop&lt;/g4&gt; 형이고 &lt;g5&gt;Sigma.mk a h&lt;/g5&gt;는 &lt;g6&gt;(Σ x : α, p x) : Type&lt;/g6&gt;형이라는 점입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difference is that the first group yields
elements of &lt;g9&gt;Prop&lt;/g9&gt;, and the second yields elements of &lt;g10&gt;Type u&lt;/g10&gt; for
some &lt;g11&gt;u&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T152951Z" creationid="tlqk3" creationdate="20220527T152951Z">
        <seg>차이점은 첫 번째 그룹은 &lt;g9&gt;Prop&lt;/g9&gt;의 원소를 얻고 두 번째 그룹은 어떤 &lt;g11&gt;u&lt;/g11&gt;에 대한 &lt;g10&gt;Type u&lt;/g10&gt; 의 원소를 얻는다는 점입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The difficulty in defining &lt;g1&gt;tail&lt;/g1&gt; is to maintain the relationships between the indices.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183617Z" creationid="tlqk3" creationdate="20220603T183617Z">
        <seg>&lt;g1&gt;tail&lt;/g1&gt;을 정의하는데 어려움은 인덱스 사이의 관계를 유지해야 한다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dot notation is convenient not just for accessing the projections
of a record, but also for applying functions defined in a namespace
with the same name.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174503Z" creationid="tlqk35" creationdate="20220528T174503Z">
        <seg>점 기호는 레코드의 투영에 접근하는데에만 편리한 게 아니라 같은 이름인 이름공간에 정의된 함수를 적용하는데에도 편리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elimination principle generated by Lean is as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T153959Z" creationid="tlqk35" creationdate="20220528T153959Z">
        <seg>린에 의해 생성된 제거 원리는 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elimination principle, &lt;g5&gt;Weekday.rec&lt;/g5&gt;, is defined
along with the type &lt;g6&gt;Weekday&lt;/g6&gt; and its constructors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T145810Z" creationid="tlqk3" creationdate="20220526T145810Z">
        <seg>제거 규칙  &lt;g5&gt;Weekday.rec&lt;/g5&gt;은 &lt;g6&gt;Weekday&lt;/g6&gt;형과 그것의 생성자를 따라 정의되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The elimination rule states:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T061324Z" creationid="tlqk35" creationdate="20220321T172924Z">
        <seg>제거 규칙은 다음과 같이 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation
compiler generates such theorems internally.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173101Z" creationid="tlqk3" creationdate="20220529T173101Z">
        <seg>방정식 컴파일러는 그런 정리를 내부적으로 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation
compiler in and of itself is not clever enough to derive that &lt;g2&gt;x -
y&lt;/g2&gt; is less than &lt;g3&gt;x&lt;/g3&gt; under the given hypotheses, but we can help it
out by putting this fact in the local context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172220Z" creationid="tlqk3" creationdate="20220603T172212Z">
        <seg>방정식 컴파일러의 속과 그 자체는 주어진 가정 하에서 &lt;g2&gt;x -y&lt;/g2&gt;가 &lt;g3&gt;x&lt;/g3&gt;보다 작다는 것을 유도할만큼 영리하지 않습니다. 그러나 우리는 그것을 지역 맥락에 이 사실을 넣음으로써 도울 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation compiler
looks in the local context for such information, and, when it finds
it, puts it to good use.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172313Z" creationid="tlqk3" creationdate="20220603T172313Z">
        <seg>방정식 컴파일러는 그런 정보에 대해 지역 맥락에서 보고 그것을 찾을 때 사용하기 좋게 둡니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation compiler
tries to ensure that this holds whenever possible, as is the case with
straightforward structural induction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T172804Z" creationid="tlqk3" creationdate="20220529T172804Z">
        <seg>방정식 컴파일러는 직관적인 구조적 재귀와 같은 한 언제든 이것이 성립함을 보장하려고 시도합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation compiler can process multiple arguments sequentially.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162851Z" creationid="tlqk3" creationdate="20220529T162851Z">
        <seg>이 방정식 컴파일러는 다수의 인수를 순차적으로 처리할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation compiler first splits on cases as to whether the input is
&lt;g1&gt;zero&lt;/g1&gt; or of the form &lt;g2&gt;succ x&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161958Z" creationid="tlqk3" creationdate="20220529T161958Z">
        <seg>방정식 컴파일러는 우선 입력이 &lt;g1&gt;zero&lt;/g1&gt;인지 &lt;g2&gt;succ x&lt;/g2&gt;의 꼴인지에 따라 경우를 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation compiler is clever.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170053Z" creationid="tlqk3" creationdate="20220529T170053Z">
        <seg>방정식 컴파일러는 영리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equation compiler is designed to make definitions like this more
convenient.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171624Z" creationid="tlqk3" creationdate="20220603T171624Z">
        <seg>방정식 컴파일러는 이 같은 정의를 만드는 데 더 편리하도록 설계되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The equations used to define these function hold definitionally:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161255Z" creationid="tlqk3" creationdate="20220529T161255Z">
        <seg>방정식들은 정의상으로 성립하는 이 함수들을 정의하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example above demonstrates how type classes are used to overload notation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155114Z" creationid="tlqk3" creationdate="20220604T155114Z">
        <seg>위의 예제는 어떻게 유형 클래스가 기호를 중복(overload)시키는데 사용되는지 시연합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example above shows
that &lt;g12&gt;Nat.add 3&lt;/g12&gt; has type &lt;g13&gt;Nat → Nat&lt;/g13&gt;, that is, &lt;g14&gt;Nat.add 3&lt;/g14&gt; returns a
function that "waits" for a second argument, &lt;g15&gt;n&lt;/g15&gt;, which is then
equivalent to writing &lt;g16&gt;Nat.add 3 n&lt;/g16&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T185245Z" creationid="tlqk35" creationdate="20220321T140932Z">
        <seg>위의 예제에서 &lt;g12&gt;Nat.add 3&lt;/g12&gt;는 &lt;g13&gt;Nat → Nat&lt;/g13&gt;유형을 가짐을  보였습니다. 즉 &lt;g14&gt;Nat.add 3&lt;/g14&gt;은 두번째 인자 &lt;g15&gt;n&lt;/g15&gt;을 "기다리는" 함수를 반환하는 것입니다. 이것은 &lt;g16&gt;Nat.add 3 n&lt;/g16&gt;로 쓰는 것과 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The example above shows that the defining equations for &lt;g1&gt;add&lt;/g1&gt; hold
definitionally, and the same is true of &lt;g2&gt;mul&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T172548Z" creationid="tlqk3" creationdate="20220529T172548Z">
        <seg>위 예제에서 &lt;g1&gt;add&lt;/g1&gt;에 대해 정의한 방정식은 정의로부터 성립함을 보여줍니다. 그리고 &lt;g2&gt;mul&lt;/g2&gt;에서 같은 방식으로 참이 됨을 보입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The existential
elimination rule, &lt;g2&gt;Exists.elim&lt;/g2&gt;, performs the opposite operation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T090759Z" creationid="tlqk35" creationdate="20220321T181209Z">
        <seg>존재 제거 규칙 &lt;g2&gt;Exists.elim&lt;/g2&gt;은 정반대 연산을 수행합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression
&lt;g1&gt;fun x : Nat =&gt; x&lt;/g1&gt; denotes the identity function on &lt;g2&gt;Nat&lt;/g2&gt;, the
expression &lt;g3&gt;fun x : Nat =&gt; true&lt;/g3&gt; denotes the constant function that
always returns &lt;g4&gt;true&lt;/g4&gt;, and &lt;g5&gt;fun x : Nat =&gt; g (f x)&lt;/g5&gt; denotes the
composition of &lt;g6&gt;f&lt;/g6&gt; and &lt;g7&gt;g&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142738Z" creationid="tlqk35" creationdate="20220321T142738Z">
        <seg>표현식 &lt;g1&gt;fun x : Nat =&gt; x&lt;/g1&gt;은 &lt;g2&gt;Nat&lt;/g2&gt;에 대한 항등함수를 의미합니다. 표현식 &lt;g3&gt;fun x : Nat =&gt; true&lt;/g3&gt;은 항상  &lt;g4&gt;true&lt;/g4&gt;을 반환하는 상수함수를 가리합니다. 그리고 &lt;g5&gt;fun x : Nat =&gt; g (f x)&lt;/g5&gt;는 &lt;g6&gt;f&lt;/g6&gt;와 &lt;g7&gt;g&lt;/g7&gt;의 합성함수를 가리킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g1&gt;And.intro h1 h2&lt;/g1&gt; builds a proof of &lt;g2&gt;p ∧ q&lt;/g2&gt; using
proofs &lt;g3&gt;h1 : p&lt;/g3&gt; and &lt;g4&gt;h2 : q&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124230Z" creationid="tlqk35" creationdate="20220321T162538Z">
        <seg>표현식 &lt;g1&gt;And.intro h1 h2&lt;/g1&gt;은 &lt;g2&gt;p ∧ q&lt;/g2&gt;의 증명을 &lt;g3&gt;h1 : p&lt;/g3&gt;과 &lt;g4&gt;h2 : q&lt;/g4&gt;의 증명을 사용하여 세웁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g1&gt;And.left h&lt;/g1&gt; creates a proof of &lt;g2&gt;p&lt;/g2&gt; from a proof
&lt;g3&gt;h : p ∧ q&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124740Z" creationid="tlqk35" creationdate="20220321T162748Z">
        <seg>표현식 &lt;g1&gt;And.left h&lt;/g1&gt;는 증명 &lt;g3&gt;h : p ∧ q&lt;/g3&gt;으로부터 &lt;g2&gt;p&lt;/g2&gt;의 증명을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g1&gt;Iff.intro h1 h2&lt;/g1&gt; produces a proof of &lt;g2&gt;p ↔ q&lt;/g2&gt; from
&lt;g3&gt;h1 : p → q&lt;/g3&gt; and &lt;g4&gt;h2 : q → p&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164648Z" creationid="tlqk35" creationdate="20220321T164648Z">
        <seg>표현식 &lt;g1&gt;Iff.intro h1 h2&lt;/g1&gt;은 &lt;g3&gt;h1 : p → q&lt;/g3&gt;과 &lt;g4&gt;h2 : q → p&lt;/g4&gt;으로부터  &lt;g2&gt;p ↔ q&lt;/g2&gt;의 증명을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g1&gt;Or.intro_left q hp&lt;/g1&gt; creates a proof of &lt;g2&gt;p ∨ q&lt;/g2&gt;
from a proof &lt;g3&gt;hp : p&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T163602Z" creationid="tlqk35" creationdate="20220321T163602Z">
        <seg>표현식 &lt;g1&gt;Or.intro_left q hp&lt;/g1&gt;은 &lt;g3&gt;hp : p&lt;/g3&gt;의 증명으로부터 &lt;g2&gt;p ∨ q&lt;/g2&gt;의 증명을 만듭니다.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g1&gt;decide p&lt;/g1&gt; tries to infer a
decision procedure for &lt;g2&gt;p&lt;/g2&gt;, and, if it is successful, evaluates to
either &lt;g3&gt;true&lt;/g3&gt; or &lt;g4&gt;false&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174814Z" creationid="tlqk3" creationdate="20220604T174814Z">
        <seg>표현식 &lt;g1&gt;decide p&lt;/g1&gt;는 &lt;g2&gt;p&lt;/g2&gt;에 대한 결정 절차를 추론하려고 하고, 성공하면 &lt;g3&gt;true&lt;/g3&gt;나 &lt;g4&gt;false &lt;/g4&gt;로 평가됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g2&gt;let a := t1; t2&lt;/g2&gt; is
definitionally equal to the result of replacing every occurrence of
&lt;g3&gt;a&lt;/g3&gt; in &lt;g4&gt;t2&lt;/g4&gt; by &lt;g5&gt;t1&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144755Z" creationid="tlqk35" creationdate="20220321T144755Z">
        <seg>표현식 &lt;g2&gt;let a := t1; t2&lt;/g2&gt; 는 &lt;g4&gt;t2&lt;/g4&gt;  속 &lt;g3&gt;a&lt;/g3&gt;의 모든 나타남(occurrence)을 &lt;g5&gt;t1&lt;/g5&gt;으로 대체한 결과에 대해 정의상으로 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g5&gt;Iff.mp h&lt;/g5&gt;
produces a proof of &lt;g6&gt;p → q&lt;/g6&gt; from &lt;g7&gt;h : p ↔ q&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164712Z" creationid="tlqk35" creationdate="20220321T164712Z">
        <seg>표현식 &lt;g5&gt;Iff.mp h&lt;/g5&gt;는 &lt;g7&gt;h : p ↔ q&lt;/g7&gt;으로부터 &lt;g6&gt;p → q&lt;/g6&gt;의 증명을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The expression &lt;g8&gt;p.add q&lt;/g8&gt; is therefore
shorthand for &lt;g9&gt;Point.add p q&lt;/g9&gt; in the example below.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174808Z" creationid="tlqk35" creationdate="20220528T174808Z">
        <seg>표현식 &lt;g8&gt;p.add q&lt;/g8&gt;는 그러므로 아래 예제에서 &lt;g9&gt;Point.add p q&lt;/g9&gt;에 대한 축약 표현입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The fact that the rules for implication in a
proof system for natural deduction correspond exactly to the rules
governing abstraction and application for functions is an instance of
the &lt;g1&gt;Curry-Howard isomorphism&lt;/g1&gt;, sometimes known as the
&lt;g2&gt;propositions-as-types&lt;/g2&gt; paradigm.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T105256Z" creationid="tlqk35" creationdate="20220321T155714Z">
        <seg>자연 연역에 대한 증명 보조기에서 함의 규칙이 함수 추상화와 함수 적용을 지배하는 규칙과 정확히 일치한다는 사실은 &lt;g1&gt;커리-하워드 동형론(Curry-Howard isomorphism) &lt;/g1&gt;의 한 예이며, 때때로 &lt;g2&gt;유형으로써 명제(propositions-as-types)&lt;/g2&gt; 패러다임으로 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The fact that type class
inference can find the setoid associated to a type &lt;g6&gt;α&lt;/g6&gt; brings a
number of benefits.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T174728Z" creationid="tlqk3" creationdate="20220610T174728Z">
        <seg>유형 클래스 추론이 &lt;g6&gt;α&lt;/g6&gt;형과 연관된 setoid를 찾을 수 있다는 사실은 많은 이점을 가져옵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first character &lt;g3&gt;|&lt;/g3&gt; in an inductive
declaration is optional.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T142937Z" creationid="tlqk3" creationdate="20220526T142937Z">
        <seg>유도 선언에서 첫 문자 &lt;g3&gt;|&lt;/g3&gt;은 선택적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first element, &lt;g5&gt;h&lt;/g5&gt;, is commonly known as the "head" of the list,
and the remainder, &lt;g6&gt;t&lt;/g6&gt;, is known as the "tail."</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163233Z" creationid="tlqk3" creationdate="20220527T163233Z">
        <seg>첫 원소 &lt;g5&gt;h&lt;/g5&gt;는 흔히 리스트의 "헤드"로 알려져 있고 나머지 &lt;g6&gt;t&lt;/g6&gt;는 "테일"이라고 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first function returns a type
&lt;g6&gt;γ&lt;/g6&gt; so that is also the return type of the &lt;g7&gt;compose&lt;/g7&gt; function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144609Z" creationid="tlqk35" creationdate="20220321T144609Z">
        <seg>첫 번째 함수는 유형 &lt;g6&gt;γ&lt;/g6&gt; 를 반환하여 이게 &lt;g7&gt;compose&lt;/g7&gt; 함수의 반환형이 되게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first goal is met with the command &lt;g1&gt;exact hp&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T083932Z" creationid="tlqk35" creationdate="20220522T054825Z">
        <seg>첫 번째 목표는 &lt;g1&gt;exact hp&lt;/g1&gt;명령으로 충족됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first instance of the tactic adds &lt;g1&gt;h' : succ m = succ n&lt;/g1&gt; to the
context, and the second adds &lt;g2&gt;h'' : m = n&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172947Z" creationid="tlqk3" creationdate="20220527T172947Z">
        <seg>전략의 첫번째 개체는 &lt;g1&gt;h' : succ m = succ n&lt;/g1&gt;을 맥락에 추가합니다. 그리고 두번째 개체 &lt;g2&gt;h'' : m = n&lt;/g2&gt;을 추가합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first is to run it from the web: a Javascript version of Lean, a standard
library of definitions and theorems, and an editor are actually downloaded to your browser and run there.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131828Z" creationid="tlqk35" creationdate="20220321T131828Z">
        <seg>첫째는 웹으로부터 이것을 실행하는 것입니다.(Lean의 자바스크립트 버전, 정의와 정리들의 표준 라이브러리, 편집자는 실제로 여러분의 브라우저에 다운로드를 시키고 거기서 실행하는 것임)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first is used to construct a pair, whereas the next two,
&lt;g1&gt;Prod.fst&lt;/g1&gt; and &lt;g2&gt;Prod.snd&lt;/g2&gt;, project the two elements.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T133024Z" creationid="tlqk3" creationdate="20220526T133024Z">
        <seg>첫 째는 쌍을 구성하는데 사용되며 반면 다음 둘은&lt;g1&gt;Prod.fst&lt;/g1&gt;과 &lt;g2&gt;Prod.snd&lt;/g2&gt;은 두 원소를 투영(project)합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first one forms a type &lt;g1&gt;Quot r&lt;/g1&gt; given a type &lt;g2&gt;α&lt;/g2&gt; by any binary
relation &lt;g3&gt;r&lt;/g3&gt; on &lt;g4&gt;α&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T181944Z" creationid="tlqk3" creationdate="20220605T181903Z">
        <seg>첫 번째 것은 &lt;g4&gt;α&lt;/g4&gt;에 대한 &lt;g3&gt;r&lt;/g3&gt;과의 이항 관계에 의해 &lt;g2&gt;α&lt;/g2&gt;형이 주어지면 &lt;g1&gt;Quot r&lt;/g1&gt;형을 형성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first one is the homogeneous
multiplication for natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164217Z" creationid="tlqk3" creationdate="20220604T164217Z">
        <seg>처음 것은 자연수에 대한 동형 곱셈입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first step, &lt;g1&gt;rw [Nat.add_zero] at h&lt;/g1&gt;, rewrites the hypothesis &lt;g2&gt;a + 0 = 0&lt;/g2&gt; to &lt;g3&gt;a = 0&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120131Z" creationid="tlqk35" creationdate="20220524T160308Z">
        <seg>첫 단계 &lt;g1&gt;rw [Nat.add_zero] at h&lt;/g1&gt;는 가정 &lt;g2&gt;a + 0 = 0&lt;/g2&gt;을 &lt;g3&gt;a = 0&lt;/g3&gt;으로 재작성 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first tactic in the &lt;g1&gt;by&lt;/g1&gt; block below repeatedly splits
conjunctions:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113007Z" creationid="tlqk35" creationdate="20220524T152742Z">
        <seg> &lt;g1&gt;by&lt;/g1&gt; 블럭 아래에 첫 번째 전략은 반복적으로 논리곱을 나눕니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first two of these block normalization within Lean, but are
compatible with bytecode evaluation, whereas the third is not amenable
to computational interpretation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T164127Z" creationid="tlqk3" creationdate="20220605T164127Z">
        <seg>이들 중 첫 두 개는 린에서 정규화를 막습니다. 그러나 바이트 코드 평가와 상용되며 반면 세 번째는 계산 해석으로 수정할 수 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first version of this book was
written for Lean 2, and the Lean 3 version is is available
&lt;g3&gt;here&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171622Z" creationid="tlqk35" creationdate="20220321T171622Z">
        <seg>이 책의 첫 번째 버전은 Lean 2을 위해 쓰였습니다. Lean 3 버전도 &lt;g3&gt;여기서&lt;/g3&gt; 이용 가능합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The first, &lt;g1&gt;Acc&lt;/g1&gt;, is an inductively defined predicate.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173930Z" creationid="tlqk3" creationdate="20220529T173930Z">
        <seg>우선 &lt;g1&gt;Acc&lt;/g1&gt;은 귀납적으로 정의된 술어입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following calls a given function twice passing the output of the
first invocation to the second:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144414Z" creationid="tlqk35" creationdate="20220321T144414Z">
        <seg>다음은 주어진 함수를 첫번째 호출의 출력을 두번째에 전달하는 것으로 두 번 호출합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following code block shows the current target
after each line.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182517Z" creationid="tlqk3" creationdate="20220604T182517Z">
        <seg>다음 코드 블록은 각 줄 뒤에 있는 현재 대상을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following command produces the error
"failed to create type class instance for &lt;g3&gt;Inhabited (Nat × ?m.1499)&lt;/g3&gt;" because the type has a missing part (i.e., the &lt;g4&gt;_&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163405Z" creationid="tlqk3" creationdate="20220604T163405Z">
        <seg>다음 명령은 "&lt;g3&gt;Inhabited (Nat × ?m.1499)&lt;/g3&gt;에 대한 유형 클래스 개체를 생성하는데 실패했다(failed to create type class instance for &lt;g3&gt;Inhabited (Nat × ?m.1499)&lt;/g3&gt;)"는 오류를 일으킵니다. 왜냐하면 유형에 모르는 부분(즉, &lt;g4&gt;_&lt;/g4&gt;)이 있기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following constants
are built into Lean:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T181544Z" creationid="tlqk3" creationdate="20220605T181544Z">
        <seg>다음 상수들은 린에 내장되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following definition</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180122Z" creationid="tlqk35" creationdate="20220524T180033Z">
        <seg>다음 정의  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example defines
the &lt;g2&gt;tail&lt;/g2&gt; function using pattern matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163649Z" creationid="tlqk3" creationdate="20220529T163649Z">
        <seg>다음 예제는 패턴 매칭을 사용해 &lt;g2&gt;tail&lt;/g2&gt; 함수를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example defines the prefix relation on lists,
proves that this relation is reflexive, and assigns the &lt;g3&gt;[simp]&lt;/g3&gt; attribute to that theorem.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T183037Z" creationid="tlqk3" creationdate="20220525T182849Z">
        <seg>다음 예제에서는 리스트에 대한 접두사 관계를 정의하고, 이 관계는 반사적임을 증명하고, 그 정리에 &lt;g3&gt;[simp]&lt;/g3&gt; 특성을 부여합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example demonstrates
both approaches.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170043Z" creationid="tlqk3" creationdate="20220529T170043Z">
        <seg>다음 예제는 두 접근법을 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example illustrates how this
is done:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181719Z" creationid="tlqk3" creationdate="20220604T181719Z">
        <seg>다음 예제는 이것이 어떻게 이뤄지는지 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example is similar: it converts any natural number to a
binary expression, represented as a list of 0's and 1's.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172628Z" creationid="tlqk3" creationdate="20220603T172628Z">
        <seg>다음 예제는 이것이 어떤 자연수를 이진 표현식으로 바꾸고 0과 1의 리스트로 나타낸다는 점에서 비슷합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example uses the &lt;g1&gt;intros&lt;/g1&gt; command to introduce the three variables and two hypotheses automatically:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T063054Z" creationid="tlqk35" creationdate="20220522T063054Z">
        <seg>다음 예제는 &lt;g1&gt;intros&lt;/g1&gt; 명령을 사용해 세 개의 변수와 두 개의 가정을 자동으로 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example, we declare an inductive type that defines the
property of "being in the image of &lt;g1&gt;f&lt;/g1&gt;".</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T144108Z" creationid="tlqk3" creationdate="20220604T144108Z">
        <seg>다음 예제에서 우리는 "&lt;g1&gt;f&lt;/g1&gt;의 이미지에 있음" 속성을 정의하는 귀납형을 선언합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following is a more natural example:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105057Z" creationid="tlqk35" creationdate="20220524T143211Z">
        <seg>다음은 좀 더 자연스러운 예제입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following is a shorter version of the preceding
proof:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T060622Z" creationid="tlqk35" creationdate="20220522T060622Z">
        <seg>다음은 이전의 증명보다 더 짧은 버전의 증명입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following is a somewhat toy example:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105049Z" creationid="tlqk35" creationdate="20220524T143156Z">
        <seg>다음은 좀 간단한 예제입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following is a structured
version of our first tactic proof in this chapter.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085031Z" creationid="tlqk35" creationdate="20220522T061249Z">
        <seg>다음은 이 장의 첫 전략 증명의 구조화된 버전입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following is an example of how function extensionality blocks
computation inside the Lean kernel.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174801Z" creationid="tlqk3" creationdate="20220605T174801Z">
        <seg>다음은 어떻게 함수 확장이 린 커널 속에서 계산을 막는지에 대한 예입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following list includes a number of common identities.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164520Z" creationid="tlqk35" creationdate="20220321T170122Z">
        <seg>다음 리스트는 흔한 동치명제와 항진명제들을 포함합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following options take an input of true or false:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125949Z" creationid="tlqk3" creationdate="20220526T125928Z">
        <seg>다음 옵션은 입력으로 참 혹은 거짓을 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following yields the same result:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144033Z" creationid="tlqk35" creationdate="20220321T144033Z">
        <seg>다음은 같은 결과를 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The four constants, &lt;g1&gt;Quot&lt;/g1&gt;, &lt;g2&gt;Quot.mk&lt;/g2&gt;, &lt;g3&gt;Quot.ind&lt;/g3&gt;, and
&lt;g4&gt;Quot.lift&lt;/g4&gt; in and of themselves are not very strong.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183054Z" creationid="tlqk3" creationdate="20220605T183054Z">
        <seg>네 가지 상수 &lt;g1&gt;Quot&lt;/g1&gt;, &lt;g2&gt;Quot.mk&lt;/g2&gt;, &lt;g3&gt;Quot.ind&lt;/g3&gt; 및 &lt;g4&gt;Quot.lift&lt;/g4&gt; 자체는 그다지 매우 강하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The full list of axioms that are used in Lean to support classical
reasoning are discussed in &lt;g1&gt;Axioms and Computations&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164239Z" creationid="tlqk35" creationdate="20220321T170049Z">
        <seg>고전적 추론을 지원하는 린에서 사용된 모든 공리의 리스트는 &lt;g1&gt;공리와 계산&lt;/g1&gt;에서 다뤄집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function
&lt;g3&gt;WellFounded.fix&lt;/g3&gt; is another tool Lean uses to justify that a function
terminates.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T170212Z" creationid="tlqk3" creationdate="20220603T170212Z">
        <seg>함수 &lt;g3&gt;WellFounded.fix&lt;/g3&gt;은 린이 함수 종료를 정당화하는데 사용하는 또 다른 도구입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function &lt;g1&gt;fst&lt;/g1&gt; takes a pair, &lt;g2&gt;p&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153441Z" creationid="tlqk3" creationdate="20220526T153441Z">
        <seg>&lt;g1&gt;fst&lt;/g1&gt; 함수는 쌍 &lt;g2&gt;p&lt;/g2&gt;를 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function &lt;g7&gt;Prod&lt;/g7&gt; is
similarly polymorphic:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142043Z" creationid="tlqk35" creationdate="20220321T142043Z">
        <seg>마찬가지로 &lt;g7&gt;Prod&lt;/g7&gt; 함수는 다형적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The function &lt;g7&gt;prod_example&lt;/g7&gt; takes a pair consisting of a boolean,
&lt;g8&gt;b&lt;/g8&gt;, and a number, &lt;g9&gt;n&lt;/g9&gt;, and returns either &lt;g10&gt;2 * n&lt;/g10&gt; or &lt;g11&gt;2 * n + 1&lt;/g11&gt;
according to whether &lt;g12&gt;b&lt;/g12&gt; is true or false.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T154635Z" creationid="tlqk3" creationdate="20220526T154635Z">
        <seg>함수 &lt;g7&gt;prod_example&lt;/g7&gt;은 불리언형 &lt;g8&gt;b&lt;/g8&gt;과 자연수형 &lt;g9&gt;n&lt;/g9&gt;을 받고 &lt;g10&gt;2 * n&lt;/g10&gt;나 &lt;g11&gt;2 * n + 1&lt;/g11&gt; 둘 중의 하나를 &lt;g12&gt;b&lt;/g12&gt; 가 참인지 거짓인지에 따라 출력하는 함수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The functions &lt;g1&gt;f&lt;/g1&gt; and &lt;g2&gt;g&lt;/g2&gt; above denote the same function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152345Z" creationid="tlqk35" creationdate="20220321T152345Z">
        <seg>위 함수  &lt;g1&gt;f&lt;/g1&gt;와 &lt;g2&gt;g&lt;/g2&gt;는 같은 함수를 지칭합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The functions &lt;g6&gt;prod.fst&lt;/g6&gt; and &lt;g7&gt;prod.snd&lt;/g7&gt;, which return the
first and second elements of a pair, are examples of such projections.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173026Z" creationid="tlqk35" creationdate="20220528T173026Z">
        <seg>순서쌍의 첫 번째와 두 번째 원소를 반환하는 함수 &lt;g6&gt;prod.fst&lt;/g6&gt;와 &lt;g7&gt;prod.snd&lt;/g7&gt;는 그런 투영의 예입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The general form is as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173640Z" creationid="tlqk35" creationdate="20220528T173640Z">
        <seg>일반적인 형태는 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The general form of a definition is &lt;g1&gt;def foo : α := bar&lt;/g1&gt; where
&lt;g2&gt;α&lt;/g2&gt; is the type returned from the expression &lt;g3&gt;bar&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144127Z" creationid="tlqk35" creationdate="20220321T144127Z">
        <seg>정의의 일반적인 형태는  &lt;g1&gt;def foo : α := bar&lt;/g1&gt;입니다. 여기서  &lt;g2&gt;α&lt;/g2&gt; 는 식 &lt;g3&gt;bar&lt;/g3&gt;로부터 반환되는 유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The general form of a lambda expression is &lt;g1&gt;fun x : α =&gt; t&lt;/g1&gt;, where
the variable &lt;g2&gt;x&lt;/g2&gt; is a "bound variable": it is really a placeholder,
whose "scope" does not extend beyond the expression &lt;g3&gt;t&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143328Z" creationid="tlqk35" creationdate="20220321T143328Z">
        <seg>람다 표현식의 일반적인 형태는 &lt;g1&gt;fun x : α =&gt; t&lt;/g1&gt;입니다. 여기서 변수 &lt;g2&gt;x&lt;/g2&gt;는 "구속변수"입니다. 이는 그것의 "범위"가 표현식  &lt;g3&gt;t&lt;/g3&gt; 안으로 제한되는 '자리차지자'일 뿐 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The goal is to support both mathematical reasoning and reasoning about complex systems, and to verify
claims in both domains.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131543Z" creationid="tlqk35" creationdate="20220321T131543Z">
        <seg>목표는 수학적 추론과 복잡한 시스템에 대한 추론을 모두 지원하고 양쪽 영역의 주장을 식별하게 만드는 겁이다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The goal of Lean's front end is to interpret user input, construct
formal expressions, and check that they are well formed and type
correct.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173445Z" creationid="tlqk35" creationdate="20220524T173445Z">
        <seg>린의 프론트 엔드의 목표는 사용자의 입력을 해석하고 형식적인 표현을 만들고 그들이 잘 형성되었고 옳바른 유형인지 확인하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The goal was to obtain a powerful
"conceptual" understanding without getting bogged down in
computational details, but this had the effect of admitting
mathematical theorems that are simply &lt;g1&gt;false&lt;/g1&gt; on a direct
computational reading.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T165245Z" creationid="tlqk3" creationdate="20220605T165245Z">
        <seg>목표는 계산의 세부 사항에 얽매이지 않고 강력한 "개념적" 이해를 얻는 것이지만 직접 계산을 해석하는데 단지 &lt;g1&gt;거짓&lt;/g1&gt;인 수학적 정리를 인정하는 효과가 있었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The gold standard for supporting a mathematical claim is to provide a proof, and twentieth-century developments in logic
show most if not all conventional proof methods can be reduced to a small set of axioms and rules in any of a number of
foundational systems.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131234Z" creationid="tlqk35" creationdate="20220321T131234Z">
        <seg>수학 진술을 지지하기 위한 황금률은 증명을 제공하는 것이며 20세기 논리학의 발전은 기존은 몇 가지의 공리의 모임과 기초계의 몇 가지 규칙으로 축소될 수 있음을 거의 보여주었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The hypothesis &lt;g2&gt;e : m = n + 1&lt;/g2&gt; in &lt;g3&gt;tailAux&lt;/g3&gt; is used to communicate the relationship
between &lt;g4&gt;n&lt;/g4&gt; and the index associated with the minor premise.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183709Z" creationid="tlqk3" creationdate="20220603T183709Z">
        <seg> &lt;g3&gt;tailAux&lt;/g3&gt;의 가정 &lt;g2&gt;e : m = n + 1&lt;/g2&gt;은 &lt;g4&gt;n&lt;/g4&gt;과 작은 전제와 연관된 인덱스 사이의 관계를 소통하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The idea is
that &lt;g1&gt;var n&lt;/g1&gt; is a variable, &lt;g2&gt;vₙ&lt;/g2&gt;, and &lt;g3&gt;const n&lt;/g3&gt; is the
constant whose value is &lt;g4&gt;n&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181818Z" creationid="tlqk3" creationdate="20220603T181818Z">
        <seg>이해를 돕자면 &lt;g1&gt;var n&lt;/g1&gt;는 변수, &lt;g2&gt;vₙ&lt;/g2&gt;와 &lt;g3&gt;const n&lt;/g3&gt;은 값이 &lt;g4&gt;n&lt;/g4&gt;인 상수이다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The idea is
that they are structurally smaller, and hence appear in the inductive
type at an earlier stage.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T172147Z" creationid="tlqk3" creationdate="20220529T172147Z">
        <seg>아이디어는 이들이 구조적으로 더 작고 그러므로 앞 단에서 귀납형으로 나타날 수 있다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The idea is
that we can define two (or more) inductive types at the same time,
where each one refers to the other(s).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152353Z" creationid="tlqk35" creationdate="20220528T165132Z">
        <seg>아이디어는 각각이 서로 다른 이들을 참조하면서 우리가 둘(혹은 그 이상의) 귀납형을 동시에 정의할 수 있다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The idea is
that we can prove &lt;g2&gt;r&lt;/g2&gt; from &lt;g3&gt;p ∨ q&lt;/g3&gt;, by showing that &lt;g4&gt;r&lt;/g4&gt; follows
from &lt;g5&gt;p&lt;/g5&gt; and that &lt;g6&gt;r&lt;/g6&gt; follows from &lt;g7&gt;q&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T140004Z" creationid="tlqk35" creationdate="20220321T163752Z">
        <seg>아이디어는 &lt;g4&gt;r&lt;/g4&gt;이 &lt;g5&gt;p&lt;/g5&gt;로부터 그리고 &lt;g6&gt;r&lt;/g6&gt;이 &lt;g7&gt;q&lt;/g7&gt;로부터 도출됨을 보임으로써 우리가 &lt;g3&gt;p ∨ q&lt;/g3&gt;로부터 &lt;g2&gt;r&lt;/g2&gt;을 증명할 수 있다입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The idea is as follows.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T174605Z" creationid="tlqk35" creationdate="20220321T174605Z">
        <seg>아이디어는 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The idea is that for each
element &lt;g20&gt;a&lt;/g20&gt; in &lt;g21&gt;α&lt;/g21&gt;, the function &lt;g22&gt;Quot.lift f h&lt;/g22&gt; maps
&lt;g23&gt;Quot.mk r a&lt;/g23&gt; (the &lt;g24&gt;r&lt;/g24&gt;-class containing &lt;g25&gt;a&lt;/g25&gt;) to &lt;g26&gt;f a&lt;/g26&gt;, wherein &lt;g27&gt;h&lt;/g27&gt;
shows that this function is well defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T182629Z" creationid="tlqk3" creationdate="20220605T182629Z">
        <seg>아이디어는 &lt;g21&gt;α&lt;/g21&gt;의 각 원소 &lt;g20&gt;a&lt;/g20&gt;에 대해 함수 &lt;g22&gt;Quot.lift f h&lt;/g22&gt;가 &lt;g23&gt;Quot.mk r a&lt;/g23&gt; (&lt;g25&gt;a&lt;/g25&gt;를 포함하는 &lt;g24&gt;r&lt;/g24&gt;-클래스)를  &lt;g26&gt;f a&lt;/g26&gt;로 대응합니다. 여기서 &lt;g27&gt;h&lt;/g27&gt;는 이 함수가 잘 정의되었음을 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The idea is to return &lt;g2&gt;some a&lt;/g2&gt; for the provided patterns, and use
&lt;g3&gt;none&lt;/g3&gt; for the incomplete cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165957Z" creationid="tlqk3" creationdate="20220529T165957Z">
        <seg>이 아이디어는 제공받은 패턴에 대해 &lt;g2&gt;some a&lt;/g2&gt;를 반환하는 것입니다. 그리고 불완전한 경우에 대해 &lt;g3&gt;none&lt;/g3&gt;을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The implicit argument, &lt;g1&gt;motive&lt;/g1&gt;, is the codomain of the function being defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155408Z" creationid="tlqk3" creationdate="20220527T155408Z">
        <seg>암시적 인수 &lt;g1&gt;motive&lt;/g1&gt;는 정의될 함수와 공동 영역입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The impredicativity of Prop means that we
can form propositions that quantify over &lt;g5&gt;α → Prop&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070922Z" creationid="tlqk35" creationdate="20220321T175235Z">
        <seg>Prop의 비서술성은 &lt;g5&gt;α → Prop&lt;/g5&gt;에 대해 정량화하는 명제를 세울 수 있음을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The inaccessible pattern &lt;g1&gt;.(_)&lt;/g1&gt; can be written as &lt;g2&gt;_&lt;/g2&gt; for convenience.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T150800Z" creationid="tlqk3" creationdate="20220604T150800Z">
        <seg>접근 불가한 패턴 &lt;g1&gt;.(_)&lt;/g1&gt;은 편의상 &lt;g2&gt;_&lt;/g2&gt;로 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The inductively defined types we have seen so far are "flat":
constructors wrap data and insert it into a type, and the
corresponding recursor unpacks the data and acts on it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T153813Z" creationid="tlqk3" creationdate="20220527T153813Z">
        <seg>우리가 지금까지 본 재귀적으로 정의된 유형은 "평평"합니다. 생성자는 데이터를 변형해서 유형에 그것을 삽입하고, 그에 대응하는 재귀자는 데이터를 풀고 그것에 작용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The inscription &lt;g1&gt;.{u}&lt;/g1&gt; tells Lean to instantiate the constants at the universe &lt;g2&gt;u&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T081457Z" creationid="tlqk35" creationdate="20220321T175555Z">
        <seg>접두사 &lt;g1&gt;.{u}&lt;/g1&gt;은 린에게 세계변수 &lt;g2&gt;u&lt;/g2&gt;로 상수를 인스턴스화하라고 말해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance &lt;g1&gt;HMul&lt;/g1&gt; is not synthesized by Lean because the type of &lt;g2&gt;y&lt;/g2&gt; has not been provided.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164848Z" creationid="tlqk3" creationdate="20220604T164848Z">
        <seg>&lt;g2&gt;y&lt;/g2&gt;형으로 제공되지 않았으므로 개체 &lt;g1&gt;HMul&lt;/g1&gt;은 린으로부터 생성되지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The instance &lt;g7&gt;OfNat Nat n&lt;/g7&gt; is the default instance (with priority 100) for the &lt;g8&gt;OfNat&lt;/g8&gt; class.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165422Z" creationid="tlqk3" creationdate="20220604T165422Z">
        <seg>개체 &lt;g7&gt;OfNat Nat n&lt;/g7&gt;은 &lt;g8&gt;OfNat&lt;/g8&gt; 클래스에 대한 (우선순위 100의) 기본 개체입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The intention is that elements of a type &lt;g2&gt;p : Prop&lt;/g2&gt; should
play no role in computation, and so the particular construction of a
term &lt;g3&gt;t : p&lt;/g3&gt; is "irrelevant" in that sense.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T171747Z" creationid="tlqk3" creationdate="20220605T171747Z">
        <seg>의도는 &lt;g2&gt;p : Prop&lt;/g2&gt;형의 원소가 계산에서 아무 역할도 하지 않아야 한다는 것입니다. 그래서 특히 항 &lt;g3&gt;t : p&lt;/g3&gt;의 생성은 이 관점에 의해 "무관"합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The internally defined function takes, as argument, an element of a sum type, either an input to &lt;g5&gt;even&lt;/g5&gt;, or an input to &lt;g6&gt;odd&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174007Z" creationid="tlqk3" creationdate="20220603T174007Z">
        <seg>내부적으로 정의된 함수는 인수로써 &lt;g5&gt;even&lt;/g5&gt;의 입력으로나 &lt;g6&gt;odd&lt;/g6&gt;의 입력으로 합 유형의 원소로 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The internals are meant to be hidden from users; the canonical way to make use of such definitions is to use &lt;g7&gt;rewrite&lt;/g7&gt; or &lt;g8&gt;simp&lt;/g8&gt;, as we did above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174208Z" creationid="tlqk3" creationdate="20220603T174208Z">
        <seg>내부는 사용자로부터 숨겨지도록 의도되었습니다. 그런 정의를 만들어 사용하는 정식 방법은 &lt;g7&gt;rewrite&lt;/g7&gt;나 &lt;g8&gt;simp&lt;/g8&gt;를 우리가 위에서 했던 것처럼 사용하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The interpretation of schematic patterns is the first step of the
compilation process.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160640Z" creationid="tlqk3" creationdate="20220529T160640Z">
        <seg>도식적인 패턴의 해석은 컴파일 과정의 첫 단계입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The introduction and elimination rules we have seen so far are all
constructive, which is to say, they reflect a computational
understanding of the logical connectives based on the
propositions-as-types correspondence.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T162245Z" creationid="tlqk35" creationdate="20220321T165648Z">
        <seg>지금까지 본 도입 규칙과 제거 규칙은 모두 구성주의적입니다. 그 말은 즉, 그들은 유형으로써 명제 대응에 기반한 논리적 연결사의 계산적인 이해를 반영한다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The introduction rule is
straightforward: to prove &lt;g1&gt;∃ x : α, p x&lt;/g1&gt;, it suffices to provide a
suitable term &lt;g2&gt;t&lt;/g2&gt; and a proof of &lt;g3&gt;p t&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180911Z" creationid="tlqk35" creationdate="20220321T180911Z">
        <seg>도입 규칙은 직관적입니다. &lt;g1&gt;∃ x : α, p x&lt;/g1&gt;을 증명하기 위해 적절한 항 &lt;g2&gt;t&lt;/g2&gt;와 &lt;g3&gt;p t&lt;/g3&gt;의 증명을 제공하는 것으로 충분합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The intuition is that an inductive
type is exhaustively generated by the constructors, and has no
elements beyond those they construct.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151940Z" creationid="tlqk3" creationdate="20220526T150231Z">
        <seg>직관적인 설명은 귀납형은 생성자에 의해 철저히 생성된다는 점입니다. 그래서 이들 없이 생긴 원소는 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The intuition is that each constructor specifies a way of building new
objects of &lt;g1&gt;Foo&lt;/g1&gt;, possibly from previously constructed values.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T142725Z" creationid="tlqk3" creationdate="20220526T142725Z">
        <seg>직관적인 설명은 아마 이전에 구성된 값으로부터 각 생성자가 &lt;g1&gt;Foo&lt;/g1&gt;의 새로운 대상을 만드는 방식을 지정한다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The intuition is that in this case the
elimination does not make use of any information that is not already
given by the mere fact that the type of argument is inhabited.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T163733Z" creationid="tlqk35" creationdate="20220528T163733Z">
        <seg>이 경우에 대한 직관적인 설명은 제거가 단순히 인수 유형이 존재한다는 사실에 의해 이미 제공되는 정보를 쓰지 않는다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The judicious use of Unicode improves
legibility, and all modern editors have great support for it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140114Z" creationid="tlqk35" creationdate="20220321T140114Z">
        <seg>분별있는 유니코드의 사용은 가독성을 개선합니다. 그리고 현대의 모든 편집기는 그것의 사용을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last chapter introduced you to methods that construct proofs of
statements involving the propositional connectives.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T060545Z" creationid="tlqk35" creationdate="20220321T172547Z">
        <seg>지난 장에서 여러분에게 명제 연결사를 포함한 문장의 증명을 구성하는 방법을 소개했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last expression, for example, denotes the function that takes
three types, &lt;g1&gt;α&lt;/g1&gt;, &lt;g2&gt;β&lt;/g2&gt;, and &lt;g3&gt;γ&lt;/g3&gt;, and two functions, &lt;g4&gt;g : β → γ&lt;/g4&gt;
and &lt;g5&gt;f : α → β&lt;/g5&gt;, and returns the composition of &lt;g6&gt;g&lt;/g6&gt; and &lt;g7&gt;f&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143241Z" creationid="tlqk35" creationdate="20220321T143241Z">
        <seg>마지막 표현식은 세 유형 &lt;g1&gt;α&lt;/g1&gt;, &lt;g2&gt;β&lt;/g2&gt;, &lt;g3&gt;γ&lt;/g3&gt;과 두 함수 &lt;g4&gt;g : β → γ&lt;/g4&gt;과 &lt;g5&gt;f : α → β&lt;/g5&gt;을 받고 &lt;g6&gt;g&lt;/g6&gt;과 &lt;g7&gt;f&lt;/g7&gt;의 합성을 반환하는 함수를 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last two theorems show that the definitions preserve the value.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180218Z" creationid="tlqk3" creationdate="20220603T180218Z">
        <seg>마지막 두 정리는 정의가 값을 보존함을 보이는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last,
&lt;g3&gt;Prod.rec&lt;/g3&gt;, provides another mechanism for defining functions on a
product in terms of a function on the two components.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T133757Z" creationid="tlqk3" creationdate="20220526T133757Z">
        <seg>마지막으로 &lt;g3&gt;Prod.rec&lt;/g3&gt;은 두 원소에 대한 함수에 대한 관점으로 곱에 대한 함수를 정의하는 또다른 방법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The law of the excluded middle and propositional extensionality imply propositional completeness:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190401Z" creationid="tlqk3" creationdate="20220610T190401Z">
        <seg>배중률과 명제의 확장성은 명제의 완전성을 함의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The law of the excluded middle is the following</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184739Z" creationid="tlqk3" creationdate="20220610T184739Z">
        <seg>배중률은 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The letter "f" is for "French," since the unicode
symbols can also be used as French quotation marks.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074006Z" creationid="tlqk35" creationdate="20220321T183508Z">
        <seg>"f"는 "french(프랑스)"의 첫머리 글자입니다. 왜냐하면 이 유니코드 기호는 프랑스 인용부호로도 사용되기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The list is indefinite, so
that there is a &lt;g6&gt;Type n&lt;/g6&gt; for every natural number &lt;g7&gt;n&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141719Z" creationid="tlqk35" creationdate="20220321T141719Z">
        <seg>모든 자연수 &lt;g6&gt;n&lt;/g6&gt;에 대해 &lt;g7&gt;Type n&lt;/g7&gt;가 있어서 이런 리스트를 무한히 나열할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The list of subtrees is represented by the type &lt;g3&gt;TreeList α&lt;/g3&gt;,
which is defined to be either the empty list, &lt;g4&gt;nil&lt;/g4&gt;, or the
&lt;g5&gt;cons&lt;/g5&gt; of a tree and an element of &lt;g6&gt;TreeList α&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T165935Z" creationid="tlqk35" creationdate="20220528T165935Z">
        <seg>하위 트리의 리스트는 &lt;g3&gt;TreeList α&lt;/g3&gt;형으로 표현됩니다. 이것은 빈 리스트 &lt;g4&gt;nil&lt;/g4&gt;이거나 트리의 &lt;g5&gt;cons&lt;/g5&gt;과 &lt;g6&gt;TreeList α&lt;/g6&gt;의 원소로 정의될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The macro &lt;g5&gt;h ▸ e&lt;/g5&gt; uses more effective heuristics for computing
this implicit parameter, and often succeeds in situations where
applying &lt;g6&gt;Eq.subst&lt;/g6&gt; fails.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T083823Z" creationid="tlqk35" creationdate="20220321T180148Z">
        <seg> &lt;g6&gt;Eq.subst&lt;/g6&gt;을 적용하는 데 실패하는 상황에서 매크로 &lt;g5&gt;h ▸ e&lt;/g5&gt;은 이 암시적 인자를 계산하는데 더 효과적인 경험적 방법(Heuristics)을 사용해 종종 성공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The main function of Lean is to translate user input to formal
expressions that are checked by the kernel for correctness and then
stored in the environment for later use.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181833Z" creationid="tlqk3" creationdate="20220525T181833Z">
        <seg>린의 주요 기능은 사용자의 입력을 커널에 의해 올바름이 검증된 형식 표현식으로 번역하는 것과 나중에 사용할 수 있도록 환경에 저장해두는 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The main idea behind type classes is to make arguments such as &lt;g1&gt;Add a&lt;/g1&gt; implicit,
and to use a database of user-defined instances to synthesize the desired instances
automatically through a process known as typeclass resolution.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153933Z" creationid="tlqk3" creationdate="20220604T153933Z">
        <seg>유형 클래스 뒤편의 주요 아이디어는 &lt;g1&gt;Add a&lt;/g1&gt; 같은 인수를 암시적으로 만드는 것이고 사용자 정의 개체들의 데이터베이스를 사용해 유형 클래스 해결책으로 알려진 과정을 통해 원하는 개체를 자동적으로 합성하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The mnemonic in the notation above is that you are generalizing the
goal by setting &lt;g1&gt;3&lt;/g1&gt; to an arbitrary variable &lt;g2&gt;x&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091805Z" creationid="tlqk35" creationdate="20220522T065006Z">
        <seg>위의 표기에 대한 기억법은 여러분이 &lt;g1&gt;3&lt;/g1&gt;을 임의의 변수 &lt;g2&gt;x&lt;/g2&gt; 설정하여 목표을 일반화시키는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most basic form of the
tactic is &lt;g2&gt;rewrite [t]&lt;/g2&gt;, where &lt;g3&gt;t&lt;/g3&gt; is a term whose type asserts an
equality.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113423Z" creationid="tlqk35" creationdate="20220524T153620Z">
        <seg>전략의 가장 기본적인 형태는 &lt;g2&gt;rewrite [t]&lt;/g2&gt;입니다. 
여기서 &lt;g3&gt;t&lt;/g3&gt;는 동등을 주장하는 유형의 항입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most basic syntax extension commands allow introducing new (or
overloading existing) prefix, infix, and postfix operators.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T121539Z" creationid="tlqk3" creationdate="20220526T121539Z">
        <seg>가장 기본적인 문법 확장 명령은 새로운 (혹은 이미 있는 것을 오버로딩하는 것) 전위, 중위 그리고 후위 연산자를 도입하는 것을 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The motivation is to
ensure your tactic proofs do not rely on automatically generated names, and are consequently more robust.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090534Z" creationid="tlqk35" creationdate="20220522T063247Z">
        <seg>그 이유는 여러분의 전략 증명이 자동으로 생성된 이름에 의존하지 않고 증명을 더 견고하게 만들기 위함입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The naive
first attempt is to enter tactic mode and try &lt;g2&gt;rw [Nat.mul_comm]&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182310Z" creationid="tlqk3" creationdate="20220604T182310Z">
        <seg>첫 순진한 시도는 전략 모드로 들어가 &lt;g2&gt;rw [Nat.mul_comm]&lt;/g2&gt;을 시도하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The naive first attempt is to enter tactic mode and try
&lt;g2&gt;rw [zero_add]&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183032Z" creationid="tlqk3" creationdate="20220604T183032Z">
        <seg>첫 순진한 시도는 전략 모드로 들어가 &lt;g2&gt;rw [zero_add]&lt;/g2&gt;를 시도하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name &lt;g1&gt;double&lt;/g1&gt; is defined as a
function that takes an input parameter &lt;g2&gt;x&lt;/g2&gt; of type &lt;g3&gt;Nat&lt;/g3&gt;, where the
result of the call is &lt;g4&gt;x + x&lt;/g4&gt;, so it is returning type &lt;g5&gt;Nat&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143946Z" creationid="tlqk35" creationdate="20220321T143946Z">
        <seg>이름 &lt;g1&gt;double&lt;/g1&gt;은 &lt;g3&gt;Nat&lt;/g3&gt; 유형의 입력 매개변수 &lt;g2&gt;x&lt;/g2&gt;를 받고  호출의 결과로 &lt;g4&gt;x + x&lt;/g4&gt;인 함수로 정의되었습니다. 그래서 &lt;g5&gt;Nat&lt;/g5&gt; 유형을 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The native version is much faster than
the web version, and is more flexible in other ways, too.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131909Z" creationid="tlqk35" creationdate="20220321T131909Z">
        <seg>원본 버전은 웹 버전보다 더 빠르고 다른 방식보다 유연합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new notation is preferred to the binary notation since the latter,
before chaining, would stop parsing after &lt;g1&gt;1 + 2&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T124058Z" creationid="tlqk3" creationdate="20220526T124058Z">
        <seg>새로운 기호는 이항기호로 정의되길 선호합니다. 왜냐면 뒤에 나올 것은 연결되기 전에 &lt;g1&gt;1 + 2&lt;/g1&gt; 뒤에 분석을 멈춥니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The new subgoals can be solved in any order.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092541Z" creationid="tlqk35" creationdate="20220522T070437Z">
        <seg>새로운 하위 목표는 원하는 순서로 풀 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next
section offers syntax that allow you to write calculational proofs in
a more natural and perspicuous way.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T064057Z" creationid="tlqk35" creationdate="20220321T180201Z">
        <seg>다음 섹션은 여러분이 계산 증명을 더 자연스럽고 안목 있는 방향으로 작성할 수 있게 하는 문법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example simplifies all the hypotheses, and then uses them to prove the goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123839Z" creationid="tlqk35" creationdate="20220524T164111Z">
        <seg>다음 예제는 모든 가정을 단순화한 뒤 이들로 목표를 증명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example simply permutes the last two lines in
the previous proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T161805Z" creationid="tlqk35" creationdate="20220321T165230Z">
        <seg>다음 예제는 이전 증명에서 마지막 두 줄의 순서만 바꾼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next example uses both these rules to produce a
proof of &lt;g9&gt;(p → q) → ¬q → ¬p&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154655Z" creationid="tlqk35" creationdate="20220321T164305Z">
        <seg>다음 예제는 &lt;g9&gt;(p → q) → ¬q → ¬p&lt;/g9&gt;의 증명을 만드는 데 두 규칙 모두를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next step is to prove that &lt;g1&gt;eqv&lt;/g1&gt; is in fact an equivalence
relation, which is to say, it is reflexive, symmetric and
transitive.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T175847Z" creationid="tlqk3" creationdate="20220610T175847Z">
        <seg>다음 단계는 &lt;g1&gt;eqv&lt;/g1&gt;가 실제로 등가 관계, 즉 반사적, 대칭적, 추이적임을 증명하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next two arguments specify how to compute the zero and successor cases, as described above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155625Z" creationid="tlqk3" creationdate="20220527T155625Z">
        <seg>다음 두 인수는 위에서 설명한 0과 계승자에 대한 경우를 어떻게 계산하는지를 보여줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The next two examples instead apply associativity to
move the parenthesis to the right on both sides, and then switch &lt;g8&gt;b&lt;/g8&gt;
and &lt;g9&gt;c&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T115923Z" creationid="tlqk35" creationdate="20220524T155903Z">
        <seg>다음 두 예제는 앞의 것과 달리 양변의 괄호에 결합성을 적용해 오른쪽으로 옮긴 뒤 
&lt;g8&gt;b&lt;/g8&gt;와 &lt;g9&gt;c&lt;/g9&gt;의 자리를 바꿉니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The notation
&lt;g2&gt;rw [t] at h&lt;/g2&gt; applies the rewrite &lt;g3&gt;t&lt;/g3&gt; at hypothesis &lt;g4&gt;h&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120054Z" creationid="tlqk35" creationdate="20220524T160214Z">
        <seg>&lt;g2&gt;rw [t] at h&lt;/g2&gt; 표기는 가정 &lt;g4&gt;h&lt;/g4&gt;에 &lt;g3&gt;t&lt;/g3&gt;로 재작성을 적용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The notation &lt;g1&gt;@[simp]&lt;/g1&gt; declares &lt;g2&gt;reverse_mk_symm&lt;/g2&gt; to have the
&lt;g3&gt;[simp]&lt;/g3&gt; attribute, and can be spelled out more explicitly:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T125247Z" creationid="tlqk35" creationdate="20220524T164926Z">
        <seg> &lt;g1&gt;@[simp]&lt;/g1&gt; 표기는 &lt;g2&gt;reverse_mk_symm&lt;/g2&gt;가 &lt;g3&gt;[simp]&lt;/g3&gt; 
특성을 갖고 더 명시적으로 쓸 수 있도록 선언합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The notation &lt;g1&gt;{x : α // p x}&lt;/g1&gt; is syntactic sugar for &lt;g2&gt;Subtype (fun x : α =&gt; p x)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T153539Z" creationid="tlqk3" creationdate="20220527T153539Z">
        <seg>기호 &lt;g1&gt;{x : α // p x}&lt;/g1&gt;은 &lt;g2&gt;Subtype (fun x : α =&gt; p x)&lt;/g2&gt;에 대한 문법적 설탕입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The notation &lt;g2&gt;.&lt;/g2&gt; is whitespace sensitive and relies on the indentation
to detect whether the tactic block ends.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T110617Z" creationid="tlqk35" creationdate="20220524T145116Z">
        <seg>&lt;g2&gt;.&lt;/g2&gt; 표기는 공백 문자에 민감하고 전략 블럭의 끝인지 감지하는데 들여쓰기에 의존합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The notation &lt;g2&gt;←t&lt;/g2&gt; can be used to instruct the
tactic to use the equality &lt;g3&gt;t&lt;/g3&gt; in the reverse direction.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114337Z" creationid="tlqk35" creationdate="20220524T154937Z">
        <seg>&lt;g2&gt;←t&lt;/g2&gt; 기호는 반대 방향으로 등식 &lt;g3&gt;t&lt;/g3&gt;을 사용하라고 지시하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The one thing you are missing is a mechanism
for defining new data types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T172828Z" creationid="tlqk35" creationdate="20220524T172828Z">
        <seg>한 가지 여러분이 놓친 작동원리는 새로운 데이터 형을 정의하는 것에 대한 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The order of operations is as follows: unary negation &lt;g1&gt;¬&lt;/g1&gt; binds most
strongly, then &lt;g2&gt;∧&lt;/g2&gt;, then &lt;g3&gt;∨&lt;/g3&gt;, then &lt;g4&gt;→&lt;/g4&gt;, and finally &lt;g5&gt;↔&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162225Z" creationid="tlqk35" creationdate="20220321T162225Z">
        <seg>연산자의 우선순위는 다음과 같습니다. 일항 부정 &lt;g1&gt;¬&lt;/g1&gt; 은 가장 강하게 결합하고 그 다음은 &lt;g2&gt;∧&lt;/g2&gt; 그 다음 &lt;g3&gt;∨&lt;/g3&gt; 그 다음 &lt;g4&gt;→&lt;/g4&gt; 그리고 마지막으로 &lt;g5&gt;↔&lt;/g5&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The other propositional connectives are
defined in Lean's library in the file &lt;g2&gt;Prelude.core&lt;/g2&gt; (see
&lt;g3&gt;importing files&lt;/g3&gt; for more information on the library
hierarchy), and each connective comes with its canonical introduction
and elimination rules.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124138Z" creationid="tlqk35" creationdate="20220321T162457Z">
        <seg>다른 명제 논리적 연결사들은 린의 라이브러리 속 &lt;g2&gt;Prelude.core&lt;/g2&gt; 파일에 정의되어 있습니다. (라이브러리 계층에 대한 더 많은 정보는 &lt;g3&gt;파일 불러오기&lt;/g3&gt;를 참고) 그리고 각 연결사들에 대해 그것의 정식 도입 및 제거 규칙이 딸려 나옵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output of the
&lt;g2&gt;#check&lt;/g2&gt; command means that whenever &lt;g3&gt;α&lt;/g3&gt; has type &lt;g4&gt;Type n&lt;/g4&gt;,
&lt;g5&gt;List α&lt;/g5&gt; also has type &lt;g6&gt;Type n&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142028Z" creationid="tlqk35" creationdate="20220321T142028Z">
        <seg>&lt;g2&gt;#check&lt;/g2&gt; 명령의 출력은 &lt;g3&gt;α&lt;/g3&gt;가 &lt;g4&gt;Type n&lt;/g4&gt;유형을 갖는 한 &lt;g5&gt;List α&lt;/g5&gt;도 &lt;g6&gt;Type n&lt;/g6&gt; 유형을 가짐을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output of the first &lt;g5&gt;#check&lt;/g5&gt;
command is &lt;g6&gt;r ?m.1 ?m.2 → r ?m.2 ?m.3 → r ?m.1 ?m.3&lt;/g6&gt;, indicating
that the implicit arguments are unspecified in this case.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065737Z" creationid="tlqk35" creationdate="20220321T174351Z">
        <seg>&lt;g5&gt;#check&lt;/g5&gt; 명령의 첫 출력은 &lt;g6&gt;r ?m.1 ?m.2 → r ?m.2 ?m.3 → r ?m.1 ?m.3&lt;/g6&gt;입니다. 이들은 여기에서 명시되지 않은 암시적 인자들을 지칭합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The parameter list can be separated like this:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144304Z" creationid="tlqk35" creationdate="20220321T144304Z">
        <seg>매개변수 리스트는 이와 같이 나눠 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The parameters &lt;g1&gt;α&lt;/g1&gt; and &lt;g2&gt;β&lt;/g2&gt; are considered input parameters and &lt;g3&gt;γ&lt;/g3&gt; an output one.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164137Z" creationid="tlqk3" creationdate="20220604T163904Z">
        <seg>매개변수 &lt;g1&gt;α&lt;/g1&gt;와 &lt;g2&gt;β&lt;/g2&gt;는 입력 매개변수로 &lt;g3&gt;γ&lt;/g3&gt;는 출력 매개변수 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The parentheses
around &lt;g3&gt;h hq&lt;/g3&gt; are not necessary, but we have added them for clarity.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113928Z" creationid="tlqk35" creationdate="20220524T154419Z">
        <seg>&lt;g3&gt;h hq&lt;/g3&gt; 주위의 괄호는 필요하지 않습니다만 우리는 명확성을 위해 이들을 추가했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The polymorphic method &lt;g1&gt;toString&lt;/g1&gt; has type &lt;g2&gt;{α : Type u} → [ToString α] → α → String&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161846Z" creationid="tlqk3" creationdate="20220604T161846Z">
        <seg>다형적인 방법 &lt;g1&gt;toString&lt;/g1&gt;은 &lt;g2&gt;{α : Type u} → [ToString α] → α → String&lt;/g2&gt;형 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The precedence is a natural number describing how "tightly" an
operator binds to its arguments, encoding the order of operations.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122211Z" creationid="tlqk3" creationdate="20220526T122211Z">
        <seg>연산의 순서를 부호화하는 우선순위는 연산자가 그것의 인자와 얼마나 "강력하게" 묶여있는지를 설명하는 자연수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The presence of implicit arguments means that at times
there may be insufficient information to fix the meaning of an
expression precisely.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153430Z" creationid="tlqk35" creationdate="20220321T153430Z">
        <seg>암시적 인수의 존재는 현재로는 식의 정확한 의미를 고치기에 정보가 불충분함을 의미할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The previous
examples can therefore be written concisely as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T164850Z" creationid="tlqk35" creationdate="20220321T164850Z">
        <seg>그러므로 이전 예제는 다음과 같이 간결하게 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The previous example can be written as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114058Z" creationid="tlqk35" creationdate="20220524T154605Z">
        <seg>이전 예제는 다음과 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The problem goes away if we use weak implicit arguments:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T190406Z" creationid="tlqk3" creationdate="20220525T190406Z">
        <seg>문제는 우리가 약한 암시적인 인수를 사용하면 사라집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The process of instantiating these
"holes," or "placeholders," in a term is often known as
&lt;g1&gt;elaboration&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153423Z" creationid="tlqk35" creationdate="20220321T153423Z">
        <seg>이런 "구멍" 또는 "플레이스 홀더"의 인스턴스화 과정은 &lt;g1&gt;협력(elaboration)&lt;/g1&gt;으로 불리기도 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product type has one constructor, &lt;g3&gt;Prod.mk&lt;/g3&gt;,
which takes two arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153055Z" creationid="tlqk3" creationdate="20220526T153055Z">
        <seg>곱 유형은 하나의 생성자 &lt;g3&gt;Prod.mk&lt;/g3&gt;를 갖고 있습니다. 이것은 두 인수를 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The product type is a
structure, as is the dependent product (Sigma) type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T172704Z" creationid="tlqk35" creationdate="20220528T172704Z">
        <seg>곱 형은 의존적 곱 (시그마) 형과 마찬가지로 구조체입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The projection &lt;g4&gt;Inhabited.default&lt;/g4&gt; will allow us to "extract" such an element of &lt;g5&gt;a&lt;/g5&gt; from an element of &lt;g6&gt;Inhabited a&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160343Z" creationid="tlqk3" creationdate="20220604T160343Z">
        <seg>투영 &lt;g4&gt;Inhabited.default&lt;/g4&gt;은 &lt;g6&gt;Inhabited a&lt;/g6&gt;의 원소로부터 &lt;g5&gt;a&lt;/g5&gt;의 원소 같은 것을 "추출"하도록 해줄 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The proof above
is functionally equivalent to the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T171101Z" creationid="tlqk3" creationdate="20220527T171101Z">
        <seg>위의 증명은 다음과 기능적으로 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The proof of &lt;g1&gt;zero_add&lt;/g1&gt; makes it clear that proof by induction is
really a form of recursion in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T172430Z" creationid="tlqk3" creationdate="20220529T172430Z">
        <seg>&lt;g1&gt;zero_add&lt;/g1&gt;의 증명은 귀납적 증명은 실제로 린에서 재귀의 한 형태라는 점을 명확히 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The propositional connectives come with the following notation:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T123136Z" creationid="tlqk35" creationdate="20220321T161840Z">
        <seg>명제 연결사는 다음 기호와 딸려 나온다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The recursor &lt;g1&gt;Eq.rec&lt;/g1&gt; is also used to define substitution:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154226Z" creationid="tlqk35" creationdate="20220528T154226Z">
        <seg>재귀자 &lt;g1&gt;Eq.rec&lt;/g1&gt;도 대입을 정의하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The requirement is that if the latter is present at all, it
occurs only &lt;g3&gt;strictly positively&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T160402Z" creationid="tlqk35" creationdate="20220528T160402Z">
        <seg>요구사항은 만약 후자가 전부 나타났다면 이것은 &lt;g3&gt;엄격하게 긍정적으로&lt;/g3&gt;만 일어납니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The results are broken down into small steps: &lt;g1&gt;th1&lt;/g1&gt; shows that a
relation that is reflexive and euclidean is symmetric, and &lt;g2&gt;th2&lt;/g2&gt;
shows that a relation that is symmetric and euclidean is
transitive.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T185920Z" creationid="tlqk3" creationdate="20220525T185920Z">
        <seg>결과는 작은 단계들로 나눠집니다. &lt;g1&gt;th1&lt;/g1&gt;은 반사적이고 유클리디안은 대칭적이다는 관계를 증명하고 &lt;g2&gt;th2&lt;/g2&gt;은 대칭적이고 유클리디언은 추이적이다는 관계를 증명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The results of these definitions are essentially the same as the ones given earlier in this section.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T160525Z" creationid="tlqk3" creationdate="20220526T160525Z">
        <seg>이 정의의 결과는 본질적으로 이전 섹션에서 제시된 것과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The right hand side &lt;g1&gt;bar&lt;/g1&gt; can be any expression, not just a lambda.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144213Z" creationid="tlqk35" creationdate="20220321T144213Z">
        <seg>우변 &lt;g1&gt;bar&lt;/g1&gt;는 lambda뿐만 아니라 어떤 식이든 될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The rule &lt;g1&gt;Eq.subst&lt;/g1&gt; is used to define the following auxiliary rules,
which carry out more explicit substitutions.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082400Z" creationid="tlqk35" creationdate="20220321T175832Z">
        <seg>&lt;g1&gt;Eq.subst&lt;/g1&gt;의 규칙은 더 명시적인 치환를 수행하는 다음 부가적인 규칙을 정의하는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second argument is often a variable as in the example above, or a &lt;g2&gt;raw&lt;/g2&gt; natural number.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163030Z" creationid="tlqk3" creationdate="20220604T163030Z">
        <seg>두 번째 인수는 종종 위의 예제의 것처럼 변수이거나 &lt;g2&gt;생(raw)&lt;/g2&gt; 자연수입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second is the scalar multiplication for arrays.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164232Z" creationid="tlqk3" creationdate="20220604T164232Z">
        <seg>두 번째 것은 배열에 대한 스칼라 곱셈입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second main reason to use conversion mode is to rewrite under
binders.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182953Z" creationid="tlqk3" creationdate="20220604T182953Z">
        <seg>전환 모드를 사용하는 두 번째 주요 이유는 결합자 아래에서 다시쓰기 위한 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second maps &lt;g5&gt;α&lt;/g5&gt; to &lt;g6&gt;Quot α&lt;/g6&gt;, so that
if &lt;g7&gt;r : α → α → Prop&lt;/g7&gt; and &lt;g8&gt;a : α&lt;/g8&gt;, then &lt;g9&gt;Quot.mk r a&lt;/g9&gt; is an
element of &lt;g10&gt;Quot r&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T182115Z" creationid="tlqk3" creationdate="20220605T182115Z">
        <seg>두 번째는 &lt;g5&gt;α&lt;/g5&gt;를 &lt;g6&gt;Quot α&lt;/g6&gt;로 대응하여서 &lt;g7&gt;r : α → α → Prop&lt;/g7&gt; 및 &lt;g8&gt;a : α&lt;/g8&gt;이면 , &lt;g9&gt;Quot.mk r a&lt;/g9&gt;는 &lt;g10&gt;Quot r&lt;/g10&gt;의 원소입니다..</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The second way to use Lean is to install and run it natively on your computer.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131857Z" creationid="tlqk35" creationdate="20220321T131857Z">
        <seg>Lean을 사용하는 두 번째 방법은 여러분의 컴퓨터에 설치하여 로컬로 실행하는 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The short explanation is that types can depend on parameters.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150811Z" creationid="tlqk35" creationdate="20220321T150811Z">
        <seg>간단한 설명은 유형이 매개변수에 의존할 수 있다는 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The similarity between &lt;g7&gt;∃&lt;/g7&gt; and &lt;g8&gt;Σ&lt;/g8&gt; is another
instance of the Curry-Howard isomorphism.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071231Z" creationid="tlqk35" creationdate="20220321T181755Z">
        <seg>&lt;g7&gt;∃&lt;/g7&gt;과&lt;g8&gt;Σ&lt;/g8&gt; 사이의 유사성은 이들이 커리-하워드 동형의 또 다른 예라는 점입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The similarity between &lt;g7&gt;∧&lt;/g7&gt; and &lt;g8&gt;×&lt;/g8&gt; is another instance
of the Curry-Howard isomorphism, but in contrast to implication and
the function space constructor, &lt;g9&gt;∧&lt;/g9&gt; and &lt;g10&gt;×&lt;/g10&gt; are treated separately
in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T125048Z" creationid="tlqk35" creationdate="20220321T163016Z">
        <seg>&lt;g7&gt;∧&lt;/g7&gt;과 &lt;g8&gt;×&lt;/g8&gt; 사이의 유사성은 커리-하워드 동형론의 또 다른 예입니다. 그러나 함의와 함수 공간 생성자와는 대조적으로  &lt;g9&gt;∧&lt;/g9&gt;과 &lt;g10&gt;×&lt;/g10&gt;은 린에서 별개로 다뤄집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The simplest kind of inductive type is simply a type with a finite, enumerated list of elements.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151926Z" creationid="tlqk3" creationdate="20220526T145214Z">
        <seg>가장 간단한 귀납형은 원소의 리스트를 유한하게 열거한 유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The simplifier
will loop if you apply it blindly, but &lt;g5&gt;rewrite&lt;/g5&gt; will do the trick.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172531Z" creationid="tlqk3" creationdate="20220603T172531Z">
        <seg>단순화기는 여러분이 맹목적으로 적용한다면 무한루프를 돌 것입니다. 그러나 &lt;g5&gt;rewrite&lt;/g5&gt;는 트릭을 씁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The simplifier then proves &lt;g1&gt;isPrefix [1, 2, 3] [1, 2, 3]&lt;/g1&gt; by rewriting it to &lt;g2&gt;True&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T182954Z" creationid="tlqk3" creationdate="20220525T182954Z">
        <seg>그럼 단순화기는 &lt;g1&gt;isPrefix [1, 2, 3] [1, 2, 3]&lt;/g1&gt;을 그것이 &lt;g2&gt;True&lt;/g2&gt;라고 다시쓰기하여 증명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The simplifier will also do propositional rewriting.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123508Z" creationid="tlqk35" creationdate="20220524T163741Z">
        <seg>단순화기도 명제 재작성을 할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The solution is:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183135Z" creationid="tlqk3" creationdate="20220604T183135Z">
        <seg>해결책은</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The source
code, and instructions for building Lean, are available at
&lt;g1&gt;https://github.com/leanprover/lean4/&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131946Z" creationid="tlqk35" creationdate="20220321T131946Z">
        <seg>Lean을 만든 소스코드와  명령어들은 &lt;g1&gt;https://github.com/leanprover/lean4/&lt;/g1&gt;에서 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library also contains a variant of &lt;g1&gt;ite&lt;/g1&gt; called
&lt;g2&gt;dite&lt;/g2&gt;, the dependent if-then-else expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172553Z" creationid="tlqk3" creationdate="20220604T172553Z">
        <seg>표준 라이브러리는 또 &lt;g2&gt;dite (the dependent if-then-else expression)&lt;/g2&gt;라는 &lt;g1&gt;ite&lt;/g1&gt;의 변종을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library also defines a choice principle that is entirely
antithetical to a computational interpretation, since it magically
produces "data" from a proposition asserting its existence.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T162826Z" creationid="tlqk3" creationdate="20220605T162826Z">
        <seg>또한 표준 라이브러리는 마술처럼 선택 원리의 존재를 주장하는 명제로부터 "데이터"를 만들기 때문에 계산적 해석과 완전히 정반대인 선택 원리를 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library defines a type class &lt;g8&gt;Inhabited&lt;/g8&gt; to enable type class inference to infer a
"default" element of an inhabited type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160029Z" creationid="tlqk3" creationdate="20220604T160029Z">
        <seg>표준 라이브러리는 유형 클래스 추론이 내재된 유형의 "기본" 원소를 유추할 수 있도록 유형 클래스 &lt;g8&gt;Inhabited&lt;/g8&gt;를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The standard library introduces the
tactic &lt;g2&gt;decide&lt;/g2&gt; that uses the &lt;g3&gt;Decidable&lt;/g3&gt; instance to solve simple goals.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174558Z" creationid="tlqk3" creationdate="20220604T174558Z">
        <seg>표준 라이브러리는 단순한 목표를 풀기 위해 &lt;g3&gt;Decidable&lt;/g3&gt; 개체를 사용하는 &lt;g2&gt;decide&lt;/g2&gt; 전략을 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The statement that &lt;g1&gt;r&lt;/g1&gt; is well founded, denoted &lt;g2&gt;WellFounded r&lt;/g2&gt;,
is exactly the statement that every element of the type is
accessible.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T175121Z" creationid="tlqk3" creationdate="20220529T174746Z">
        <seg>&lt;g2&gt;WellFounded r&lt;/g2&gt;로 표시되어 잘 세워진 명제 &lt;g1&gt;r&lt;/g1&gt;는 바로 그 유형의 모든 원소가 접근 가능한 명제입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The structure command also generates useful recursors and
theorems.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173919Z" creationid="tlqk35" creationdate="20220528T173919Z">
        <seg>또 구조체 명령은 유용한 재귀자와 정리들을 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The structure command is essentially a "front end" for defining
inductive data types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173413Z" creationid="tlqk35" creationdate="20220528T173413Z">
        <seg>구조체 명령은 본질적은 유도 데이터형을 정의하기 위한 "최전선"입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The style of writing proofs is most effective when it is used in
conjunction with the &lt;g1&gt;simp&lt;/g1&gt; and &lt;g2&gt;rewrite&lt;/g2&gt; tactics, which are
discussed in greater detail in the next chapter.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T180349Z" creationid="tlqk35" creationdate="20220321T180349Z">
        <seg>증명 작성 스타일은 &lt;g1&gt;simp&lt;/g1&gt;와 &lt;g2&gt;rewrite&lt;/g2&gt; 전략을 결합해 사용되었을 때 가장 효과적입니다. 이것들은 다음 장에서 상세히 논할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The suffix &lt;g1&gt;: structure-type&lt;/g1&gt; can be omitted whenever the name of
the structure can be inferred from the expected type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T182148Z" creationid="tlqk35" creationdate="20220528T182148Z">
        <seg>접미사 &lt;g1&gt;: structure-type&lt;/g1&gt;은 언제든지 구조체의 이름이 기대되는 유형으로부터 추론될 수 있는 한 생략될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The syntax for doing so is as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125701Z" creationid="tlqk3" creationdate="20220526T125701Z">
        <seg>그렇게 하는 문법은 다음과 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The syntax is similar to that for mutual inductive types, as described in :numref:&lt;g1&gt;mutual_and_nested_inductive_types&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173612Z" creationid="tlqk3" creationdate="20220603T173612Z">
        <seg>numref&lt;g1&gt;상호적이고 재귀적인 귀납형&lt;/g1&gt;에서 기술한 바처럼 문법은 상호 귀납적인 유형에 대한 것과 비슷합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The syntax is similar to that of &lt;g3&gt;cases&lt;/g3&gt;, except that the
argument can only be a term in the local context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172058Z" creationid="tlqk3" creationdate="20220527T172058Z">
        <seg>인수가 지역 상황에 대한 것이라는 점을 제외하고 문법은 &lt;g3&gt;cases&lt;/g3&gt;의 것과 비슷합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The syntax of the &lt;g1&gt;with&lt;/g1&gt; is convenient for writing structured proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165312Z" creationid="tlqk3" creationdate="20220527T165312Z">
        <seg>&lt;g1&gt;with&lt;/g1&gt;의 문법은 구조화된 증명을 작성하는데 편리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tactic &lt;g11&gt;decide&lt;/g11&gt; puts it all together: to
prove a target &lt;g12&gt;p&lt;/g12&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T175044Z" creationid="tlqk3" creationdate="20220604T175044Z">
        <seg>&lt;g11&gt;decide&lt;/g11&gt; 전략은 목표 &lt;g12&gt;p&lt;/g12&gt;를 증명하기 위해 모든 것을 한데 모읍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tactic automatically closes any goal of the form
&lt;g7&gt;t = t&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T113738Z" creationid="tlqk35" creationdate="20220524T154238Z">
        <seg>이 전략은 자동적으로 &lt;g7&gt;t = t&lt;/g7&gt;꼴의 임의의 목표를 자동적으로 마무리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tactic interpreter
-- tries all possible macro extensions for `triv` until one succeeds
macro_rules</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T131752Z" creationid="tlqk35" creationdate="20220524T171012Z">
        <seg>전략 번역기는
-- `triv`에 대한 가능한 모든 매크로 확장들 중 어느 하나라도 성공할 때까지 시도합니다.

macro_rules</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The tactic tries to solve the left disjunct immediately by assumption;
if that fails, it tries to focus on the right disjunct; and if that
doesn't work, it invokes the assumption tactic.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111701Z" creationid="tlqk35" creationdate="20220524T150955Z">
        <seg>전략은 왼쪽의 논리합를 가정으로 즉시 풀려고 합니다.
만약 그것이 실패하면 이것은 논리합의 오른쪽에 초점을 맞춰 시도합니다. 그래도 
그것 성공하지 못하면, 가정 전략을 불러옵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The term "predicative" stems from foundational developments around the
turn of the twentieth century, when logicians such as Poincaré and
Russell blamed set-theoretic paradoxes on the "vicious circles" that
arise when we define a property by quantifying over a collection that
includes the very property being defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070646Z" creationid="tlqk35" creationdate="20220321T175119Z">
        <seg>"서술적"이라는 말은 20세기로 접어드는 시기에 기초수학의 발전으로부터 유래되었습니다.  이때 푸엥카레와 레셀 같은 논리학자들은 정의하려는 그 성질을 포함하는 모임에 대해 정량화함으로써 성질을 정의할 때 발생하는 집합론적 역설인 "악순환(vicious circles)"을 비난했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The term rewriter and simplifier are described
briefly in the next section, and then in greater detail in the next
chapter.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T084033Z" creationid="tlqk35" creationdate="20220321T180218Z">
        <seg>항 재작성기와 단순화기는 다음 섹션에서 간단히 설명합니다. 그러고 나서 다음 장에서 아주 상세하게 다룹니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The theorem &lt;g1&gt;Nat.lt_or_ge m n&lt;/g1&gt; says &lt;g2&gt;m &lt; n ∨ m ≥ n&lt;/g2&gt;, and it is
natural to think of the proof above as splitting on these two
cases.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T170957Z" creationid="tlqk3" creationdate="20220527T170957Z">
        <seg>정리 &lt;g1&gt;Nat.lt_or_ge m n&lt;/g1&gt;은 &lt;g2&gt;m &lt; n ∨ m ≥ n&lt;/g2&gt;을 말합니다. 그리고 이것은 이들 두 경우를 나눔으로써 위의 증명이 당연하다고 생각합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The third principle, &lt;g11&gt;Quot.ind&lt;/g11&gt;, says that
every element of &lt;g12&gt;Quot.mk r a&lt;/g12&gt; is of this form.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T182152Z" creationid="tlqk3" creationdate="20220605T182152Z">
        <seg>세 번째 원칙인 &lt;g11&gt;Quot.ind&lt;/g11&gt;는 &lt;g12&gt;Quot.mk r a&lt;/g12&gt;의 모든 원소가 이 같은 꼴이라고 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The triangle in the second presentation is a macro built on top of
&lt;g1&gt;Eq.subst&lt;/g1&gt; and &lt;g2&gt;Eq.symm&lt;/g2&gt;, and you can enter it by typing &lt;g3&gt;\t&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T063635Z" creationid="tlqk35" creationdate="20220321T175821Z">
        <seg>두 번째 보기에서 삼각형은 &lt;g1&gt;Eq.subst&lt;/g1&gt;과 &lt;g2&gt;Eq.symm&lt;/g2&gt;의 꼭대기에 만들어진 매크로입니다. 여러분은 이것은 &lt;g3&gt;\t&lt;/g3&gt;을 쳐서 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two
defining equations for addition now hold definitionally:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160421Z" creationid="tlqk3" creationdate="20220527T160421Z">
        <seg>덧셈에 대해 정의한 두 방정식은 이제 정의상으로 성립합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two ways we have suggested thinking about the
propositions-as-types paradigm differ in a fundamental way.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T111901Z" creationid="tlqk35" creationdate="20220321T160323Z">
        <seg>앞서 제안한 유형으로써 명제 패러다임에 대한 두 사고 방식은 근본적인 면에서 다릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type &lt;g1&gt;@Nat.below C (3 : nat)&lt;/g1&gt; is a data structure that stores elements of &lt;g2&gt;C 0&lt;/g2&gt;, &lt;g3&gt;C 1&lt;/g3&gt;, and &lt;g4&gt;C 2&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165012Z" creationid="tlqk3" creationdate="20220603T164349Z">
        <seg>&lt;g1&gt;@Nat.below C (3 : nat)&lt;/g1&gt;형은 &lt;g2&gt;C 0&lt;/g2&gt;, &lt;g3&gt;C 1&lt;/g3&gt;과 &lt;g4&gt;C 2&lt;/g4&gt;의 원소를 저장하는 데이터 구조입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type algebra &lt;g2&gt;β → γ&lt;/g2&gt; and &lt;g3&gt;α → β&lt;/g3&gt; means it is a requirement
that the type of the output of the second function must match the
type of the input to the first function - which makes sense, otherwise
the two functions would not be composable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144512Z" creationid="tlqk35" creationdate="20220321T144512Z">
        <seg> &lt;g2&gt;β → γ&lt;/g2&gt; 와 &lt;g3&gt;α → β&lt;/g3&gt;의 유형 대수는 두 번째 함수의 출력 유형이 첫 번째 함수의 입력 유형과 반드시 일치해야 한다는 요구를 같습니다. 이렇지 않다면 두 함수는 합성될 수 없을 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type of &lt;g1&gt;t1&lt;/g1&gt; is now &lt;g2&gt;∀ {p q : Prop}, p → q → p&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T161439Z" creationid="tlqk35" creationdate="20220321T161439Z">
        <seg>&lt;g1&gt;t1&lt;/g1&gt;의 유형은 이제 &lt;g2&gt;∀ {p q : Prop}, p → q → p&lt;/g2&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The types in a &lt;g1&gt;have&lt;/g1&gt; tactic can be omitted, so you can write &lt;g2&gt;have
hp := h.left&lt;/g2&gt; and &lt;g3&gt;have hqr := h.right&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T143959Z" creationid="tlqk35" creationdate="20220524T143959Z">
        <seg>&lt;g1&gt;have&lt;/g1&gt; 전략에서 유형은 생략될 수 있습니다. 그래서 여러분은  &lt;g2&gt;have
hp := h.left&lt;/g2&gt;과 &lt;g3&gt;have hqr := h.right&lt;/g3&gt;을 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The typing rules forces us to write &lt;g8&gt;f a&lt;/g8&gt; for the
first argument, but this term is neither a variable nor a constructor
application, and plays no role in the pattern-matching definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T144852Z" creationid="tlqk3" creationdate="20220604T144852Z">
        <seg>입력 규칙은 우리가 첫 인수에 대해 &lt;g8&gt;f a&lt;/g8&gt;로 쓰도록 합니다. 그러나 이 항은 변수도 생성자 적용도 아닙니다. 그리고 패턴 매칭 정의에서 어떤 역할도 하지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The unicode symbol &lt;g8&gt;×&lt;/g8&gt; for the Cartesian product
is entered as &lt;g9&gt;\times&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140531Z" creationid="tlqk35" creationdate="20220321T140531Z">
        <seg>카테시안 곱을 나타내는 유니코드 기호 &lt;g8&gt;×&lt;/g8&gt;는 &lt;g9&gt;\times&lt;/g9&gt;을 입력하여 씁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The universal quantifier, &lt;g1&gt;∀ x : α, p x&lt;/g1&gt; is supposed to denote the
assertion that "for every &lt;g2&gt;x : α&lt;/g2&gt;, &lt;g3&gt;p x&lt;/g3&gt;" holds.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T061120Z" creationid="tlqk35" creationdate="20220321T172839Z">
        <seg>전칭 한정기호 &lt;g1&gt;∀ x : α, p x&lt;/g1&gt;은 "모든 &lt;g2&gt;x : α&lt;/g2&gt;에 대해  &lt;g3&gt;p x&lt;/g3&gt;"가 성립한다는 주장을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The use of course-of-values recursion is one of the techniques the equation compiler uses to justify to
the Lean kernel that a function terminates.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165021Z" creationid="tlqk3" creationdate="20220603T164834Z">
        <seg>course-of-values 재귀의 사용은 방정식 컴파일러가 함수를 끝내는 린 커널을 정당화하는데 사용하는 한 기법입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The use of underscores for wildcards is
common in functional programming languages, and so Lean adopts that
notation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T163403Z" creationid="tlqk3" creationdate="20220529T163403Z">
        <seg>와일드카드에 대한 밑줄 문자의 사용은 함수형 프로그래밍 언어에서 흔합니다. 그래서 린은 이 표기를 채택합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The variable &lt;g5&gt;C&lt;/g5&gt;
represents the motive of the recursive definition: for each element
&lt;g6&gt;x : α&lt;/g6&gt;, we would like to construct an element of &lt;g7&gt;C x&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165547Z" creationid="tlqk3" creationdate="20220603T165547Z">
        <seg>변수 &lt;g5&gt;C&lt;/g5&gt;는 재귀적 정의의 동기를 나타냅니다. 각 원소 &lt;g6&gt;x : α&lt;/g6&gt;에 대하여 우리는 &lt;g7&gt;C x&lt;/g7&gt;의 원소를 생성하고자 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The virtual
machine, however, has no trouble evaluating the expression to
&lt;g11&gt;0&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T175420Z" creationid="tlqk3" creationdate="20220605T175420Z">
        <seg>하지만 가상 머신은 식을 &lt;g11&gt;0&lt;/g11&gt;으로 평가하는 데 문제가 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then
&lt;g6&gt;(x : α) → β&lt;/g6&gt; is an element of &lt;g7&gt;Sort (imax i j)&lt;/g7&gt;, where &lt;g8&gt;imax i j&lt;/g8&gt; is the
maximum of &lt;g9&gt;i&lt;/g9&gt; and &lt;g10&gt;j&lt;/g10&gt; if &lt;g11&gt;j&lt;/g11&gt; is not 0, and 0 otherwise.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070148Z" creationid="tlqk35" creationdate="20220321T174559Z">
        <seg>그러면 &lt;g6&gt;(x : α) → β&lt;/g6&gt;은 &lt;g7&gt;Sort (imax i j)&lt;/g7&gt;의 원소입니다. 여기서 &lt;g11&gt;j&lt;/g11&gt;가 0이 아니면 &lt;g8&gt;imax i j&lt;/g8&gt;는 &lt;g9&gt;i&lt;/g9&gt;와 &lt;g10&gt;j&lt;/g10&gt; 중의 최대값이고, j가 0이면 0 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then &lt;g3&gt;th3&lt;/g3&gt; combines the two results.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T185956Z" creationid="tlqk3" creationdate="20220525T185956Z">
        <seg>그런 뒤 &lt;g3&gt;th3&lt;/g3&gt;는 이 두 결과를 결합합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then for &lt;g1&gt;n : Nat&lt;/g1&gt; and &lt;g2&gt;m : Nat&lt;/g2&gt;, the term &lt;g3&gt;Add.add n m&lt;/g3&gt; triggers typeclass resolution with the goal
of &lt;g4&gt;Add Nat&lt;/g4&gt;, and typeclass resolution will synthesize the instance above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T154807Z" creationid="tlqk3" creationdate="20220604T154807Z">
        <seg>그런 다음 &lt;g1&gt;n : Nat&lt;/g1&gt; 및 &lt;g2&gt;m : Nat&lt;/g2&gt;에 대해 항 &lt;g3&gt;Add.add n m&lt;/g3&gt;는 &lt;g4&gt;Add Nat&lt;/g4&gt;의 목표를 유형 클래스 해결책으로 만듭니다. 그리고 유형 클래스 해결책은 위의 개체를 합성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then for any list &lt;g1&gt;xs&lt;/g1&gt;, &lt;g2&gt;reverse (mk_symm xs)&lt;/g2&gt; is equal to &lt;g3&gt;mk_symm xs&lt;/g3&gt;,
which can easily be proved by unfolding the definition:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T124519Z" creationid="tlqk35" creationdate="20220524T164500Z">
        <seg>그럼 임의의 리스트  &lt;g1&gt;xs&lt;/g1&gt;에 대해 &lt;g2&gt;reverse (mk_symm xs)&lt;/g2&gt;은 &lt;g3&gt;mk_symm xs&lt;/g3&gt;과 동일합니다. 
그리고 이는 정의를 열어보는 것으로 쉽게 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then go back and replace each &lt;g5&gt;sorry&lt;/g5&gt; with an actual proof,
until no more remain.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165326Z" creationid="tlqk35" creationdate="20220321T170401Z">
        <seg>그런 뒤 다시 돌아가 각각의 &lt;g5&gt;sorry&lt;/g5&gt;가 더 남지 않을 때까지 이를 실제 증명으로 바꾸세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then next applies commutativity to the term
&lt;g3&gt;b + c&lt;/g3&gt;; without specifying the argument, the tactic would instead rewrite
&lt;g4&gt;a + (b + c)&lt;/g4&gt; to &lt;g5&gt;(b + c) + a&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T115805Z" creationid="tlqk35" creationdate="20220524T155631Z">
        <seg>그런 뒤 항 &lt;g3&gt;b + c&lt;/g3&gt;에 교환성을 적용합니다 .
반면 인수의 명시가 없다면 전략은 &lt;g4&gt;a + (b+ c)&lt;/g4&gt;에서 &lt;g5&gt;(b + c) + a&lt;/g5&gt;으로 재작성할 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then the new hypothesis &lt;g4&gt;a = 0&lt;/g4&gt; is used to rewrite the goal to &lt;g5&gt;f 0 = f 0&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120200Z" creationid="tlqk35" creationdate="20220524T160355Z">
        <seg>그 뒤 새로운 가정 &lt;g4&gt;a = 0&lt;/g4&gt; 가 목표를 &lt;g5&gt;f 0 = f 0&lt;/g5&gt;로 재작성하는 데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then the universe level &lt;g3&gt;u&lt;/g3&gt; is
constrained to satisfy the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T161907Z" creationid="tlqk35" creationdate="20220528T161907Z">
        <seg>그러면 세계 수준 &lt;g3&gt;u&lt;/g3&gt;는 다음을 만족하도록 제한됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then try proving some
of their basic properties, building on the theorems we have already
proved.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T171132Z" creationid="tlqk35" creationdate="20220528T171127Z">
        <seg>그 뒤 그들의 기본 성질 몇 가지를 증명해보세요. 우리가 이미 증명한 정리를 세워보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then use e.g. &lt;g1&gt;&lt;g2&gt;mdbook watch&lt;/g2&gt;&lt;/g1&gt; in the root folder:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T172040Z" creationid="tlqk35" creationdate="20220321T172040Z">
        <seg>루트 폴더에서 &lt;g1&gt;&lt;g2&gt;mdbook watch&lt;/g2&gt;&lt;/g1&gt;을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then use the equation
compiler to derive some of their basic properties.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180954Z" creationid="tlqk3" creationdate="20220603T180954Z">
        <seg>그 뒤 방정식 컴파일러를 그들의 기본 성질 몇 가지를 유도하는데 사용하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then we can "cancel" the hypothesis and obtain a proof of &lt;g3&gt;Implies p q&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T155131Z" creationid="tlqk35" creationdate="20220321T155131Z">
        <seg>그러면 우리는 가정을 "상쇄"하여 &lt;g3&gt;Implies p q&lt;/g3&gt;의 증명을 얻을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then, the second one replaces &lt;g5&gt;f 0&lt;/g5&gt;
with &lt;g6&gt;0&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T172103Z" creationid="tlqk35" creationdate="20220524T154206Z">
        <seg>그런 뒤 두 번째 것은 &lt;g5&gt;f 0&lt;/g5&gt;을 &lt;g6&gt;0&lt;/g6&gt;으로 대체합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then, we use the command &lt;g3&gt;macro_rules&lt;/g3&gt; to specify what should
be done when &lt;g4&gt;triv&lt;/g4&gt; is used.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T130732Z" creationid="tlqk35" creationdate="20220524T170602Z">
        <seg>그런 뒤 우리는  &lt;g4&gt;triv&lt;/g4&gt;가 사용될 때 &lt;g3&gt;macro_rules&lt;/g3&gt; 명령으로 
무엇을 해야 하는지 나타내는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then, when we write the expression &lt;g2&gt;f 7&lt;/g2&gt; without further
arguments, it is parsed as &lt;g3&gt;f 7 _&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T185104Z" creationid="tlqk3" creationdate="20220525T185104Z">
        <seg>그럼, 우리가 표현식 &lt;g2&gt;f 7&lt;/g2&gt;을 추가 인수없이 슬때, 이는 &lt;g3&gt;f 7 _&lt;/g3&gt;와 같이 구문 분석 될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then, you can construct lists of &lt;g1&gt;Nat&lt;/g1&gt; as follows.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T185331Z" creationid="tlqk35" creationdate="20220321T152432Z">
        <seg>그럼 여러분은  &lt;g1&gt;Nat&lt;/g1&gt;의 리스트를 다음과 같이 생성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Theorem Proving in Lean 4</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171646Z" creationid="tlqk35" creationdate="20220321T170911Z">
        <seg>린4로 하는 정리 증명</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are a few more things to notice here.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140641Z" creationid="tlqk35" creationdate="20220321T140641Z">
        <seg>여기서 몇 개 더 짚고가야 할 것이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are a few pragmatic differences between definitions and
theorems, however.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T160855Z" creationid="tlqk35" creationdate="20220321T160855Z">
        <seg>하지만 정의와 정리 사이에 약간의 실용적 차이는 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are a number of ways in which you can query Lean for information
about its current state and the objects and theorems that are
available in the current context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125042Z" creationid="tlqk3" creationdate="20220526T125042Z">
        <seg>여러분이 린에게 그것의 현재 상태와 현재 상황에서 사용할 수 있는 대상과 정리에 대한 정보를 요청하는 여러가지 방법이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are at least two ways of thinking about propositions as
types.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T105910Z" creationid="tlqk35" creationdate="20220321T155833Z">
        <seg>유형으로써 명제에 대해 적어도 두 가지 사고 방식이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are currently two ways to use Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131811Z" creationid="tlqk35" creationdate="20220321T131811Z">
        <seg>현재 Lean을 사용하는 두 가지 방식이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are extra bells and whistles.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164227Z" creationid="tlqk3" creationdate="20220527T164227Z">
        <seg>여기 여분의 종과 호루라기가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are rules that
govern what the eliminator of an inductive type can eliminate &lt;g1&gt;to&lt;/g1&gt;,
that is, what kinds of types can be the target of a recursor.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152054Z" creationid="tlqk3" creationdate="20220527T151944Z">
        <seg>귀납형의 제거자가 제거할 수 있는 것, 즉 유형의 어느 종류가 재귀자의 대상이 될 수 있는가를 다루는 규칙이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several
ways to fix this issue, and one way is to use a more precise tool :
the conversion mode.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182439Z" creationid="tlqk3" creationdate="20220604T182439Z">
        <seg>이 문제를 해결하는 방법에는 여러 가지가 있으며 한 가지 방법은 보다 정밀한 도구인 전환 모드를 사용하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two additional modifiers that are useful.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T130145Z" creationid="tlqk35" creationdate="20220524T170029Z">
        <seg>유용한 수정자들이 두 개 더 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two constructors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154052Z" creationid="tlqk3" creationdate="20220527T154052Z">
        <seg>두 생성자가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a fine line between brevity and obfuscation, and omitting
information in this way can sometimes make a proof harder to read.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T133506Z" creationid="tlqk35" creationdate="20220321T163506Z">
        <seg>간결함과 난독화 사이에 미세한 선이 있고 이런 식으로 정보를 생략하는 것은 종종 증명을 읽기 더 어렵게 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a long cast of characters here, but the first block we have
already seen: the type, &lt;g1&gt;α&lt;/g1&gt;, the relation, &lt;g2&gt;r&lt;/g2&gt;, and the
assumption, &lt;g3&gt;h&lt;/g3&gt;, that &lt;g4&gt;r&lt;/g4&gt; is well founded.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171011Z" creationid="tlqk3" creationdate="20220603T165459Z">
        <seg>여기 문자의 긴 캐스트가 있지만 우리는 이미 유형 &lt;g1&gt;α&lt;/g1&gt;, 관계 &lt;g2&gt;r&lt;/g2&gt; 그리고 가정 &lt;g3&gt;h&lt;/g3&gt;으로 된 첫 블럭을 봤습니다. 여기서 &lt;g4&gt;r&lt;/g4&gt;은 잘 세워진 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a small exception to this rule, however, which we
will discuss below, in the section on inductive families.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152109Z" creationid="tlqk3" creationdate="20220527T152622Z">
        <seg>그러나 이 규칙에 우리가 아래에서 논의할 작은 예외가 귀납군의 섹션에 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is a third kind of implicit argument that is denoted with square
brackets, &lt;g1&gt;[&lt;/g1&gt; and &lt;g2&gt;]&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T190539Z" creationid="tlqk3" creationdate="20220525T190539Z">
        <seg>대괄호 &lt;g1&gt;[&lt;/g1&gt;과 &lt;g2&gt;]&lt;/g2&gt;로 표시된 세 번째 종류의 암시적인 매개변수가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is also a &lt;g1&gt;have&lt;/g1&gt; tactic, which introduces a new subgoal, just as when writing proof terms:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T105340Z" creationid="tlqk35" creationdate="20220524T143650Z">
        <seg>증명 항을 작성할 때처럼 &lt;g1&gt;have&lt;/g1&gt; 전략은 새로운 하위목표를 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is an exception to this last rule: we are allowed to eliminate
from an inductively defined &lt;g1&gt;Prop&lt;/g1&gt; to an arbitrary &lt;g2&gt;Sort&lt;/g2&gt; when
there is only one constructor and each constructor argument is either
in &lt;g3&gt;Prop&lt;/g3&gt; or an index.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T163129Z" creationid="tlqk35" creationdate="20220528T163129Z">
        <seg>이 마지막 규칙에 예외가 있습니다. 우리는 재귀적으로 정의된 &lt;g1&gt;Prop&lt;/g1&gt;에서 임의의 &lt;g2&gt;Sort&lt;/g2&gt;이르기까지 오직 한 생성자와 각 생성자 인수가 &lt;g3&gt;Prop&lt;/g3&gt;에 있거나 한 색인으로 있을 때 제거할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is only one
anonymous namespace at the root level.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150427Z" creationid="tlqk35" creationdate="20220321T150427Z">
        <seg>root 계층에서만 익명 이름 공간이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There is still fairly uniform agreement today that computation is
important to mathematics.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T165337Z" creationid="tlqk3" creationdate="20220605T165337Z">
        <seg>계산이 수학에 중요하다는 것에 오늘날에도 여전히 꽤 균등한 합의가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thereafter &lt;g1&gt;decidable p&lt;/g1&gt; has an instance for every &lt;g2&gt;p&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173818Z" creationid="tlqk3" creationdate="20220604T173818Z">
        <seg>그 후에 &lt;g1&gt;decidable p&lt;/g1&gt;는 모든 &lt;g2&gt;p&lt;/g2&gt;에 대해 개체를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These
annotations are essential, for example, when a term occurring in the
left-hand side is neither a variable nor a constructor application,
because these are not suitable targets for pattern matching.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T143757Z" creationid="tlqk3" creationdate="20220604T143757Z">
        <seg>이 주석은 필수적입니다. 예를 들어 좌변에서 나타나는 항이 변수도 생성자 적용도 아닐 때, 이들은 패턴 매칭에 적적한 대상이 아니기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These
aspects of Lean are explored in a companion tutorial to this one, &lt;g2&gt;Programming in Lean 4&lt;/g2&gt;, though computational
aspects of the system will make an appearance here.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131657Z" creationid="tlqk35" creationdate="20220321T131657Z">
        <seg>Lean의 이러한 측면은 이 교재의 동반 교재인 &lt;g2&gt;Programming in Lean&lt;/g2&gt;에서 더 찾아볼 수 있다. 그렇지만 여기에서도 린의 계산적인 측면을 찾아봅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These
types vary depending on the first argument, &lt;g11&gt;α&lt;/g11&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151505Z" creationid="tlqk35" creationdate="20220321T151500Z">
        <seg>이 유형은 첫번째 인수 &lt;g11&gt;α&lt;/g11&gt;에 따라 달라집니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These angle brackets are obtained by typing &lt;g1&gt;\&lt;&lt;/g1&gt; and &lt;g2&gt;\&gt;&lt;/g2&gt;, respectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T132605Z" creationid="tlqk35" creationdate="20220321T163322Z">
        <seg>이 꺽긴 괄호는 각각 &lt;g1&gt;\&lt;&lt;/g1&gt;과 &lt;g2&gt;\&gt;&lt;/g2&gt;으로 입력해 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These are called "inaccessible patterns" for
that reason.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T171552Z" creationid="tlqk3" creationdate="20220529T171552Z">
        <seg>이들은 이런 이유로 "접근할 수 없는 패턴"으로 불립니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These are not
supported by Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T155106Z" creationid="tlqk35" creationdate="20220528T155106Z">
        <seg>이것들은 린에서 지원되지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These are the left and
right &lt;g7&gt;or-introduction&lt;/g7&gt; rules.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T163645Z" creationid="tlqk35" creationdate="20220321T163645Z">
        <seg>이들은 왼쪽과 오른쪽 &lt;g7&gt;or-도입&lt;/g7&gt; 규칙입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These are used for type classes, as
explained in &lt;g3&gt;Chapter Type Classes&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T190606Z" creationid="tlqk3" creationdate="20220525T190606Z">
        <seg>&lt;g3&gt;Chapter Type Classes&lt;/g3&gt;에서 설명할 이들은 유형 클래스에 대해서 사용되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These can include ordinary mathematical theorems, as well as claims that pieces of hardware
or software, network protocols, and mechanical and hybrid systems meet their specifications.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131146Z" creationid="tlqk35" creationdate="20220321T131146Z">
        <seg>이 주장들은 평범한 수학적 정리뿐만 아니라 하드웨어와 소프트웨어, 네트워크 프로토콜, 역학적 복합적 시스템이 그들의 명세를 만족하는지에 대한 주장도 포함될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These extensions are used, for
example, to develop theories of sets and finite sets.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T161629Z" creationid="tlqk3" creationdate="20220605T161629Z">
        <seg>이 확장은 예를 들어 집합과 유한 집합의 이론을 만드는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These require classical reasoning.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165851Z" creationid="tlqk35" creationdate="20220321T170708Z">
        <seg>이것은 고전적 추론이 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These require classical reasoning:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164543Z" creationid="tlqk35" creationdate="20220321T170211Z">
        <seg>이것은 고전적 추론이 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These tactics can be used on data just as well as propositions.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T094500Z" creationid="tlqk35" creationdate="20220522T072519Z">
        <seg>이 전략들은 명제와 마찬가지로 데이터에도 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>These variations are equally useful for destructing propositions:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181905Z" creationid="tlqk3" creationdate="20220603T181905Z">
        <seg>이 변수들은 명제를 파괴하는데 똑같이 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They
are commonly known as the right and left &lt;g6&gt;and-elimination&lt;/g6&gt; rules.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162823Z" creationid="tlqk35" creationdate="20220321T162823Z">
        <seg>이들은 흔히 오른쪽과 왼쪽 &lt;g6&gt;and-제거&lt;/g6&gt; 규칙으로 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They all take values in &lt;g1&gt;Prop&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162148Z" creationid="tlqk35" creationdate="20220321T162148Z">
        <seg>이들은 &lt;g1&gt;Prop&lt;/g1&gt;형의 모든 값을 받습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They are also known as the &lt;g4&gt;minor premises&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155714Z" creationid="tlqk3" creationdate="20220527T155714Z">
        <seg>이들은 &lt;g4&gt;사소한 전제&lt;/g4&gt;라고도 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They are considered "the same" by Lean's type
checker, and Lean does its best to recognize and support these
identifications.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143738Z" creationid="tlqk35" creationdate="20220321T143738Z">
        <seg>이런 것은 린의 유형 검사기가 "같은"것으로 봅니다. 그리고 린은 유형을 인식하고 대조하는데 최선을 다합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They are designed to deal
with applicative terms, that is, terms of form &lt;g2&gt;s t&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T082438Z" creationid="tlqk35" creationdate="20220321T175843Z">
        <seg>이들은 적용한 항을 다루도록 설계되었습니다. 즉,  &lt;g2&gt;s t&lt;/g2&gt; 꼴의 항입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They are not meant to be
used directly by the user; rather, the &lt;g4&gt;simp&lt;/g4&gt; tactic
is configured to use them when necessary.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173308Z" creationid="tlqk3" creationdate="20220529T173308Z">
        <seg>이들은 사용자로부터 직접 사용되기 위한 것이 아니라 오히려 &lt;g4&gt;simp&lt;/g4&gt; 전략이 필요할 때 사용되도록 설정됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They are, like inductively defined types and the associated
constructors and recursors, viewed as part of the logical framework.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183412Z" creationid="tlqk3" creationdate="20220605T183412Z">
        <seg>그것들은 귀납적으로 정의된 유형과 관련 생성자와 재귀자처럼 논리적 프레임워크의 일부로 간주됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They can also
include subscripts, which can be entered by typing &lt;g1&gt;\_&lt;/g1&gt; followed by
the desired subscripted character.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T191212Z" creationid="tlqk3" creationdate="20220525T191212Z">
        <seg>이들은 아래첨자를 넣고자 하는 문자 다음에  &lt;g1&gt;\_&lt;/g1&gt;을 쳐 넣음으로써 아래첨자도 포함할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They include equations &lt;g6&gt;s = t : α&lt;/g6&gt; for any type &lt;g7&gt;α&lt;/g7&gt;, and
such equations can be used as casts, to type check terms.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172113Z" creationid="tlqk3" creationdate="20220605T172113Z">
        <seg>이들은 임의의 &lt;g7&gt;α&lt;/g7&gt;형에 대한 방정식 &lt;g6&gt;s = t : α&lt;/g6&gt;을 포함하고 그 방정식은 형변환 항의 유형 확인에 사용될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They naturally support an incremental style of writing proofs,
in which you decompose a proof and work on goals one step at a time.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082528Z" creationid="tlqk35" creationdate="20220321T184311Z">
        <seg>그들은 자연스럽게 증명을 분해하고 한 번에 한 단계씩 목표를 달성하는 점진적인 증명 작성 스타일을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They will be improved over time.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173133Z" creationid="tlqk3" creationdate="20220603T173133Z">
        <seg>그들은 시간이 지나면서 개선될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They work as follows.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174610Z" creationid="tlqk3" creationdate="20220604T174610Z">
        <seg>이는 다음과 같이 동작합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Things get
much more interesting when the constructors act on elements of the
very type being defined.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T153904Z" creationid="tlqk3" creationdate="20220527T153904Z">
        <seg>생성자가 정의될 바로 그 유형의 원소들에 작용할 때 훨씬 더 흥미롭게 될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Think about what is going on here.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T174007Z" creationid="tlqk35" creationdate="20220321T174007Z">
        <seg>무슨 일이 생긴 건지 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Think about what these expressions mean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142638Z" creationid="tlqk35" creationdate="20220321T142638Z">
        <seg>이 표현식의 의미에 대해 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Think of &lt;g1&gt;Type 0&lt;/g1&gt; as a universe of "small" or "ordinary" types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141626Z" creationid="tlqk35" creationdate="20220321T141626Z">
        <seg>&lt;g1&gt;Type 0&lt;/g1&gt;는 "작은" 또는 "평범한" 유형들의 세계라고 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Think of &lt;g1&gt;sunday&lt;/g1&gt;, &lt;g2&gt;monday&lt;/g2&gt;, ... , &lt;g3&gt;saturday&lt;/g3&gt; as
being distinct elements of &lt;g4&gt;Weekday&lt;/g4&gt;, with no other distinguishing
properties.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T145728Z" creationid="tlqk3" creationdate="20220526T145728Z">
        <seg>다른 성질을 구별할 것 없이 &lt;g1&gt;sunday&lt;/g1&gt;, &lt;g2&gt;monday&lt;/g2&gt;, ... , &lt;g3&gt;saturday&lt;/g3&gt;를 &lt;g4&gt;Weekday&lt;/g4&gt;의 구별되는 원소로서 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Think of this as saying "split on cases as to whether &lt;g1&gt;m + 3 * k&lt;/g1&gt; is
zero or the successor of some number." The result is functionally
equivalent to the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T170241Z" creationid="tlqk3" creationdate="20220527T170241Z">
        <seg>이것을 "&lt;g1&gt;m + 3 * k&lt;/g1&gt;이 0이거나 어떤 수의 계승자인지로 경우가 나뉜다"고 생각합시다. 이 결과는 다음과 기능적으로 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Think of this as the function from &lt;g7&gt;α&lt;/g7&gt; to &lt;g8&gt;β&lt;/g8&gt; which maps
any value &lt;g9&gt;x&lt;/g9&gt; to the value &lt;g10&gt;t&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142516Z" creationid="tlqk35" creationdate="20220321T142516Z">
        <seg>이를  임의의 값 &lt;g9&gt;x&lt;/g9&gt;에서 값 &lt;g10&gt;t&lt;/g10&gt;로 대응시키는 &lt;g7&gt;α&lt;/g7&gt;에서 &lt;g8&gt;β&lt;/g8&gt;까지의 함수로 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This
form of &lt;g5&gt;cases&lt;/g5&gt; will &lt;g6&gt;not&lt;/g6&gt; revert any hypotheses that also mention
the expression in the equation (in this case, &lt;g7&gt;m + 3 * k&lt;/g7&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T170551Z" creationid="tlqk3" creationdate="20220527T170551Z">
        <seg>이 &lt;g5&gt;cases&lt;/g5&gt;의 형태는 방정식(이 경우 &lt;g7&gt;m + 3 * k&lt;/g7&gt;)에서 표현식을 언급한 적 있는 어떤 가정도 되돌리지 &lt;g6&gt;않을&lt;/g6&gt; 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This
is not a trivial affair.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T070157Z" creationid="tlqk35" creationdate="20220321T181031Z">
        <seg>이것은 자명한 일이 아닙니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This
is useful for discharging goals not supported by &lt;g2&gt;conv&lt;/g2&gt; mode, and
applying custom congruence and extensionality lemmas.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T184746Z" creationid="tlqk3" creationdate="20220604T184746Z">
        <seg>이는 &lt;g2&gt;conv&lt;/g2&gt; 모드에서 지원되지 않는 목표를 실행하고 사용자 정의 합동 및 확장 보조정리를 적용하는 데 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This
pattern, deriving an arbitrary fact from contradictory hypotheses, is
quite common, and is represented by &lt;g3&gt;absurd&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T155729Z" creationid="tlqk35" creationdate="20220321T164500Z">
        <seg>모순적인 가정들로부터 어떤 사실을 유도하는 이런 패턴은 꽤 흔하고 &lt;g3&gt;absurd&lt;/g3&gt;로 표현됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This
special case is known as &lt;g4&gt;singleton elimination&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T163850Z" creationid="tlqk35" creationdate="20220528T163850Z">
        <seg>이 특별한 경우는 &lt;g4&gt;한번에 한 제거(singleton elimination)&lt;/g4&gt;로도 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This also blocks evaluation in the kernel, but it is
compatible with compilation to bytecode.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T162422Z" creationid="tlqk3" creationdate="20220605T162422Z">
        <seg>이것도 커널에서 평가를 차단하지만 바이트 코드로 컴파일하는 것과 호환됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This annotation can also be
written using as &lt;g6&gt;⦃y : Nat⦄&lt;/g6&gt;, where the unicode brackets are entered
as &lt;g7&gt;\{{&lt;/g7&gt; and &lt;g8&gt;\}}&lt;/g8&gt;, respectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T185427Z" creationid="tlqk3" creationdate="20220525T185427Z">
        <seg>이런 주석은 &lt;g6&gt;⦃y : Nat⦄&lt;/g6&gt;으로서 사용해 쓸 수도 있습니다. 여기서 유니코드 괄호는 각각 &lt;g7&gt;\{{&lt;/g7&gt;과 &lt;g8&gt;\}}&lt;/g8&gt;으로 쳐서 입력될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This approach is more robust than using &lt;g1&gt;by assumption&lt;/g1&gt;, because the
type of the assumption that needs to be inferred is given
explicitly.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074118Z" creationid="tlqk35" creationdate="20220321T183641Z">
        <seg>추론될 필요가 있는 가정의 유형은 명시적으로 제시되야 하므로 이런 접근법은 &lt;g1&gt;by assumption&lt;/g1&gt;을 사용하는 것보다 더 견고합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This approach would provide us with a reasonable way of building assertions and proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T103847Z" creationid="tlqk35" creationdate="20220321T155149Z">
        <seg>이런 접근법은 주장과 증명을 세우는 합리적인 방법을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This book is designed to teach you to develop and verify proofs in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T132009Z" creationid="tlqk35" creationdate="20220321T132009Z">
        <seg>이 책은 Lean에서 증명을 검증하고 세울 수 있도록 당신을 가르치게끔 설계되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This can be helpful in
indicating the separate proofs of multiple subgoals introduced by a
tactic.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T110336Z" creationid="tlqk35" creationdate="20220524T144940Z">
        <seg>이는 전략의 도입으로 생긴 다수의 하위 목표를의 증명의 분할를 가리키는데 유용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This causes class inference to chain through instances recursively, backtracking when necessary, in a Prolog-like search.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161229Z" creationid="tlqk3" creationdate="20220604T161229Z">
        <seg>Prolog 같은 탐색에서 필요할 때 역추적하는데 개체를 통한 클래스 추론이 재귀적으로 연결되게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This clarifies your intention, and Lean will flag an
error if the right-hand side of the definition does not have a matching
type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144154Z" creationid="tlqk35" creationdate="20220321T144154Z">
        <seg>이것은 당신의 의도를 명확히 만들고 Lean은 정의의 우변에 일치하는 유형이 아닌 경우 에러를 표시할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This definition is inconvenient to work with, however.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T170351Z" creationid="tlqk35" creationdate="20220528T165954Z">
        <seg>이그러나  정의는 작업하기에 불편합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This definition of &lt;g1&gt;ident&lt;/g1&gt; here has the same effect as the one
above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153405Z" creationid="tlqk35" creationdate="20220321T153405Z">
        <seg>&lt;g1&gt;ident&lt;/g1&gt;의 이 정의는 여기서 위의 것과 같이 같은 효과를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This does not look very different from an ordinary pattern matching
definition, but the point is that a &lt;g1&gt;match&lt;/g1&gt; can be used anywhere in
an expression, and with arbitrary arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T183000Z" creationid="tlqk3" creationdate="20220603T183000Z">
        <seg>이것은 평범한 패턴 매칭 정의와 아주 달라보이지 않지만 &lt;g1&gt;match&lt;/g1&gt;가 임의의 인수로 표현식의 어디서든 사용될 수 있다는 점이 다릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example is similar to the previous one, but now an input to
&lt;g1&gt;sum_example&lt;/g1&gt; is implicitly either of the form &lt;g2&gt;inl n&lt;/g2&gt; or &lt;g3&gt;inr n&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160524Z" creationid="tlqk3" creationdate="20220526T155207Z">
        <seg>이 예제는 이전의 것과 닮았습니다. 하지만 &lt;g1&gt;sum_example&lt;/g1&gt;의 입력이 이제 암시적으로 &lt;g2&gt;inl n&lt;/g2&gt;이나 &lt;g3&gt;inr n&lt;/g3&gt;의 꼴 둘 중의 하나입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example simultaneously introduces the inductive type, &lt;g1&gt;Prod&lt;/g1&gt;,
its constructor, &lt;g2&gt;mk&lt;/g2&gt;, the usual eliminators (&lt;g3&gt;rec&lt;/g3&gt; and
&lt;g4&gt;recOn&lt;/g4&gt;), as well as the projections, &lt;g5&gt;fst&lt;/g5&gt; and &lt;g6&gt;snd&lt;/g6&gt;, as
defined above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152041Z" creationid="tlqk3" creationdate="20220526T161853Z">
        <seg>이 예제는 동시에 귀납형 &lt;g1&gt;Prod&lt;/g1&gt;과 그것의 생성자 &lt;g2&gt;mk&lt;/g2&gt;, 평범한 제거자 (&lt;g3&gt;rec&lt;/g3&gt;과
&lt;g4&gt;recOn&lt;/g4&gt;) 뿐만 아니라 위에서 정의한 대로 투영 &lt;g5&gt;fst&lt;/g5&gt;과 &lt;g6&gt;snd&lt;/g6&gt;을 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This explains the
type annotation of the function &lt;g5&gt;List&lt;/g5&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141932Z" creationid="tlqk35" creationdate="20220321T141932Z">
        <seg>이는 &lt;g5&gt;List&lt;/g5&gt;함수의 유형 표기를 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This feature
allows us to simulate a form of &lt;g2&gt;inheritance&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T180648Z" creationid="tlqk35" creationdate="20220528T180648Z">
        <seg>이 기능은 우리가 &lt;g2&gt;상속(inheritance)&lt;/g2&gt;의 형태를 모사하도록 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This feature of the framework is so important that the library defines a notation &lt;g1&gt;rfl&lt;/g1&gt; for &lt;g2&gt;Eq.refl _&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T185425Z" creationid="tlqk35" creationdate="20220321T175649Z">
        <seg>프레임워크의 이 특징은 너무 중요해서 라이브러리가 &lt;g2&gt;Eq.refl _&lt;/g2&gt;에 대한 기호 &lt;g1&gt;rfl&lt;/g1&gt;을 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This function is used by the &lt;g3&gt;#eval&lt;/g3&gt; command to display &lt;g4&gt;Weekday&lt;/g4&gt; objects.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T150918Z" creationid="tlqk3" creationdate="20220526T150918Z">
        <seg>이 함수는 &lt;g4&gt;Weekday&lt;/g4&gt;  대상을 표시하도록 &lt;g3&gt;#eval&lt;/g3&gt; 명령으로 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This gives you a way of creating pairs of natural
numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141135Z" creationid="tlqk35" creationdate="20220321T141135Z">
        <seg>이는 여러분에게 자연수의 쌍을 만들 수 있는 방법을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This gives you a way of extracting
its two components.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141215Z" creationid="tlqk35" creationdate="20220321T141215Z">
        <seg>이는 여러분에게 순서쌍의 두 성분을 추출하는 방법을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This guarantees that Lean will favor other instances and fall back on
&lt;g1&gt;propDecidable&lt;/g1&gt; only after other attempts to infer decidability have
failed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174346Z" creationid="tlqk3" creationdate="20220604T174346Z">
        <seg>이렇게 하면 린이 다른 개체를 선호하고 결정가능성을 추론하려는 다른 시도가 실패한 후에만 &lt;g1&gt;propDecidable&lt;/g1&gt;으로 후퇴함을 보장합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This instructs Lean's elaborator to use the value
&lt;g4&gt;T&lt;/g4&gt; as the type of &lt;g5&gt;e&lt;/g5&gt; when trying to resolve implicit
arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153538Z" creationid="tlqk35" creationdate="20220321T153538Z">
        <seg>이것은 린의 협력기가 암시적 인수를 해결하려고 시도할 때 &lt;g5&gt;e&lt;/g5&gt;의 유형으로 &lt;g4&gt;T&lt;/g4&gt;값을 사용하라고 지시합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is
followed by nested case splits on the next two arguments, and in each
case the equation compiler rules out the cases are not compatible with
the first pattern.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T145940Z" creationid="tlqk3" creationdate="20220604T145940Z">
        <seg>이것은 다음 두 인수에 대한 중첩된 경우 분할을 따르고 각 경우에서 방정식 컴파일러는 첫 번째 패턴과 적합하지 않은 경우를 배제합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is
known as an "implicit argument."</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152804Z" creationid="tlqk35" creationdate="20220321T152804Z">
        <seg>이것은 "암시적 인자"라고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is
precisely what Lean's virtual machine does.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T172333Z" creationid="tlqk3" creationdate="20220605T172333Z">
        <seg>이는 정확히 린의 가상 머신이 하는 일입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is a central feature of dependent type theory: terms carry a lot
of information, and often some of that information can be inferred
from the context.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152741Z" creationid="tlqk35" creationdate="20220321T152741Z">
        <seg>이는 의존 유형론의 핵심 특징입니다. 항은 많은 정보를 전달하고 종종 그 정보의 몇은  맥락으로부터 추론될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is a good place to introduce another device Lean offers to help
structure long proofs, namely, the &lt;g1&gt;have&lt;/g1&gt; construct, which
introduces an auxiliary subgoal in a proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T160815Z" creationid="tlqk35" creationdate="20220321T165101Z">
        <seg>여기는 린이 긴 증명을 구조화하도록 돕는 또 다른 장치를 도입하기에 적절한 곳 입니다. 주로  &lt;g1&gt;have&lt;/g1&gt; 구성은 증명의 보조적인 세부목표를 도입합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is a good place to mention another inductive type, denoted
&lt;g1&gt;{x : α // p}&lt;/g1&gt;, which is sort of a hybrid between
&lt;g2&gt;∃ x : α, P&lt;/g2&gt; and &lt;g3&gt;Σ x : α, P&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152123Z" creationid="tlqk3" creationdate="20220527T153355Z">
        <seg>여기서 또 다른 귀납형 &lt;g2&gt;∃ x : α, P&lt;/g2&gt;과 &lt;g3&gt;Σ x : α, P&lt;/g3&gt;이 섞인 &lt;g1&gt;{x : α // p}&lt;/g1&gt;으로 나타낸 귀납형을 얘기하기 좋은 곳 같습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is a notoriously inefficient way of
computing the fibonacci function, however, with an execution time that
is exponential in &lt;g7&gt;n&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T163724Z" creationid="tlqk3" creationdate="20220603T163724Z">
        <seg>이것은 계산 시간이 &lt;g7&gt;n&lt;/g7&gt;에 대해 지수적인 피보나치 함수를 계산하는 악명높게 비효율적인 방식이지만</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is an idiom that is used extensively in the
Lean standard library.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T181319Z" creationid="tlqk3" creationdate="20220610T181319Z">
        <seg>이것은 린 표준 라이브러리에서 광범위하게 사용되는 관용구입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is an instance of a &lt;g1&gt;dependent function type&lt;/g1&gt;, or &lt;g2&gt;dependent
arrow type&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151554Z" creationid="tlqk35" creationdate="20220321T151554Z">
        <seg>이것은 &lt;g1&gt;의존적 함수 유형&lt;/g1&gt; 또는 &lt;g2&gt;의존적 방향 유형&lt;/g2&gt;의 개체입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is consistent with
the understanding that if &lt;g4&gt;p : Prop&lt;/g4&gt;, an element &lt;g5&gt;hp : p&lt;/g5&gt; carries
no data.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T152520Z" creationid="tlqk3" creationdate="20220527T152520Z">
        <seg>이것은 &lt;g4&gt;p : Prop&lt;/g4&gt;이면 원소 &lt;g5&gt;hp : p&lt;/g5&gt;는 아무 데이터도 나르지 않는다는 것의 이해와 일관됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is consistent with set-theoretic interpretations
in which any element &lt;g1&gt;a : Prop&lt;/g1&gt; is either empty or the singleton set
&lt;g2&gt;{*}&lt;/g2&gt;, for some distinguished element &lt;g3&gt;*&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173255Z" creationid="tlqk3" creationdate="20220605T173255Z">
        <seg>이것은 어떤 원소 &lt;g1&gt;a : Prop&lt;/g1&gt;가 비었거나 어떤 구별된 원소 &lt;g3&gt;*&lt;/g3&gt;에 대한 단일 개체 집합 &lt;g2&gt;{*}&lt;/g2&gt;이라는 집합론적인 해석과 일관됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is done by putting the arguments in
curly braces, as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153159Z" creationid="tlqk35" creationdate="20220321T153159Z">
        <seg>이것은 다음과 같이 인수를 중괄호 안에 두는 것으로 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is especially useful when the resulting goals can be finished off
in a uniform way, or, at least, when it is possible to make progress
on all of them uniformly.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111459Z" creationid="tlqk35" creationdate="20220524T150429Z">
        <seg>이는 특히 생기는 목표가 균일한 방식으로 마무리 될 때 아니면 적어도 
그들 모두가 균일한 방식으로 진전을 만드는게 가능할 때 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is essentially just alternative notation for the &lt;g1&gt;match&lt;/g1&gt;
construct above.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T092851Z" creationid="tlqk35" creationdate="20220321T182820Z">
        <seg>이는 본질적으로 위의 &lt;g1&gt;match&lt;/g1&gt; 생성을 위한 대체 표기일 뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is found in the &lt;g1&gt;Classical&lt;/g1&gt; namespace, so the full name of the
theorem is &lt;g2&gt;Classical.choice&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T183514Z" creationid="tlqk3" creationdate="20220610T183514Z">
        <seg>이것은 &lt;g1&gt;Classical&lt;/g1&gt; 이름공간에서 발견되므로 정리의 완전한 이름은 &lt;g2&gt;Classical.choice&lt;/g2&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is illustrated in the
following example, in which we set the option &lt;g10&gt;pp.explicit&lt;/g10&gt; to true
to ask Lean's pretty-printer to show the implicit arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T090712Z" creationid="tlqk35" creationdate="20220321T181146Z">
        <seg>이것은 다음 예제에서 보여주고 있습니다. 여기서 암시적 인자를 보여주는데 린의 깔끔한 출력기 &lt;g10&gt;pp.explicit&lt;/g10&gt; 사용 옵션을 참으로 설정하였습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is known as &lt;g5&gt;proof irrelevance,&lt;/g5&gt; and is
consistent with the interpretation in the last paragraph.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T111526Z" creationid="tlqk35" creationdate="20220321T160256Z">
        <seg>이것은 &lt;g5&gt;증명 무연관(proof irrelevance)&lt;/g5&gt;으로 알려져 있고 이것은 마지막 문단에서 해석과 일치합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is known as a &lt;g1&gt;nested&lt;/g1&gt; inductive type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152407Z" creationid="tlqk35" creationdate="20220528T170330Z">
        <seg>이것은 &lt;g1&gt;중첩된(nested)&lt;/g1&gt; 귀납형으로 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is known as an
"intensional" view of functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174052Z" creationid="tlqk3" creationdate="20220605T174052Z">
        <seg>이것을 함수에 대한 "의도적" 관점이라 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is known as an "extensional"
view of functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T173728Z" creationid="tlqk3" creationdate="20220605T173728Z">
        <seg>이것을 함수의 "확장된" 관점이라 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is necessary because these types are part
of the Lean "prelude" that is automatically imported when the system
is started.)</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T152225Z" creationid="tlqk3" creationdate="20220526T152225Z">
        <seg>이것은 이들 유형이 시스템이 시작할 때 자동적으로 불러와지는 린 "서막"의 일부이기 때문에 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is often used for names like &lt;g1&gt;Nat.rec&lt;/g1&gt; and &lt;g2&gt;Nat.recOn&lt;/g2&gt;, to prevent
overloading of common names.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180844Z" creationid="tlqk35" creationdate="20220524T180844Z">
        <seg>흔한 이름들의 과부하를 막기 위해 &lt;g1&gt;Nat.rec&lt;/g1&gt;과 &lt;g2&gt;Nat.recOn&lt;/g2&gt; 같은 이름들에 종종 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is often useful as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T134553Z" creationid="tlqk35" creationdate="20220321T163536Z">
        <seg>이 또한 종종 유용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is particularly important when we have implemented only the instance
&lt;g5&gt;HMul α α α&lt;/g5&gt;, and did not implement &lt;g6&gt;HMul Nat α α&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170048Z" creationid="tlqk3" creationdate="20220604T170048Z">
        <seg>이것은 우리가 개체 &lt;g5&gt;HMul α α α&lt;/g5&gt;만 구현하고 &lt;g6&gt;HMul Nat α α&lt;/g6&gt;을 구현하지 않았을 때 특히 중요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is similar to the way
that computer scientists occasionally blur the distinction between
syntax and semantics by saying, at times, that a program "computes" a
certain function, and at other times speaking as though the program
"is" the function in question.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114230Z" creationid="tlqk35" creationdate="20220321T160449Z">
        <seg>이것은 컴퓨터 과학자들이 프로그램이 특정 함수를 "계산"한다고 말함으로써 문법과 의미론 사이의 구분을 때때로 모호하게 하는 방식과 유사합니다. 그리고 또 다른 때에는 프로그램이 문제의 함수인 것처럼 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the approach followed in the Calculus of Constructions, and
hence in Lean as well.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T105151Z" creationid="tlqk35" creationdate="20220321T155654Z">
        <seg>이는 린에서와 마찬가지로 구성주의적 계산법에 따른 접근법입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the axiom that asserts that any two elements of &lt;g1&gt;α&lt;/g1&gt; that are
related by &lt;g2&gt;r&lt;/g2&gt; become identified in the quotient.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183623Z" creationid="tlqk3" creationdate="20220605T183623Z">
        <seg>이것은 &lt;g2&gt;r&lt;/g2&gt;과 관련된 &lt;g1&gt;α&lt;/g1&gt;의 임의의 두 원소가 몫에서 식별된다는 것을 주장하는 공리입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the elimination rule.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T173854Z" creationid="tlqk35" creationdate="20220321T173854Z">
        <seg>이것은 제거 규칙입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the introduction rule.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T173809Z" creationid="tlqk35" creationdate="20220321T173809Z">
        <seg>이것은 도입 규칙입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is tricky; you will have to define an auxiliary function.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181617Z" creationid="tlqk3" creationdate="20220603T181617Z">
        <seg>이것은 교활해서 여러분은 부가함수를 정의해야만 할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is useful for illustrative
purposes, but it is not a good idea in general, since the notation
will shadow other uses of curly brackets, such as for records and
sets.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T180600Z" creationid="tlqk3" creationdate="20220610T180600Z">
        <seg>이것은 설명 목적으로 유용하지만 일반적으로 이 표기법이 레코드 및 집합 같은 중괄호의 다른 용도를 가리기 때문에 일반적으로 좋은 생각은 아닙니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is why the numeral
&lt;g9&gt;2&lt;/g9&gt; has type &lt;g10&gt;Nat&lt;/g10&gt; when the expected type is not known.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165601Z" creationid="tlqk3" creationdate="20220604T165601Z">
        <seg>이것이 기대되는 유형을 모를 때 수치값 &lt;g9&gt;2&lt;/g9&gt;가 &lt;g10&gt;Nat&lt;/g10&gt;형이 되는 이유입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This kind of instance is
only active when you are inside of the namespace or open the namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170910Z" creationid="tlqk3" creationdate="20220604T170910Z">
        <seg>이런 종류의 개체는 여러분이 이름공간 안에 있거나 이름공간을 개방했을 때에만 활동적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This looks exactly like the definition of the constant function in the
last chapter, the only difference being that the arguments are
elements of &lt;g1&gt;Prop&lt;/g1&gt; rather than &lt;g2&gt;Type&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114745Z" creationid="tlqk35" creationdate="20220321T160711Z">
        <seg>이는 지난 장에서의 상수함수의 정의와 완전히 동일하게 보입니다. 유일한 차이는 인수가 &lt;g2&gt;Type&lt;/g2&gt;보다 &lt;g1&gt;Prop&lt;/g1&gt;의 원소라는 점입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This makes the first argument to &lt;g1&gt;ident&lt;/g1&gt; implicit.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153306Z" creationid="tlqk35" creationdate="20220321T153306Z">
        <seg>이 첫 인수는 &lt;g1&gt;ident&lt;/g1&gt;를 암시적으로 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This manual is generated by &lt;g1&gt;mdBook&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171705Z" creationid="tlqk35" creationdate="20220321T171705Z">
        <seg>이 메뉴얼은 &lt;g1&gt;mdBook&lt;/g1&gt;으로 생성되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This may often
be too restrictive.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164708Z" creationid="tlqk3" creationdate="20220604T164708Z">
        <seg>이것은 종종 너무 제한적일 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means &lt;g1&gt;compose&lt;/g1&gt; is a function that takes any two functions as input
arguments, so long as those functions each take only one input.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144440Z" creationid="tlqk35" creationdate="20220321T144440Z">
        <seg>이는 &lt;g1&gt;compose&lt;/g1&gt;가 하나의 입력만 받는 함수인 경우에만 임의의 두 함수를 입력 인수로 받는 함수임을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means &lt;g3&gt;compose&lt;/g3&gt; can compose just about any 2 functions
so long as they each take one parameter, and so long as the type of
output of the second matches the input of the first.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144642Z" creationid="tlqk35" creationdate="20220321T144642Z">
        <seg>이는 &lt;g3&gt;compose&lt;/g3&gt;가 그들이 입력받는 두 함수 각각이 한 매개변수만 받고 두번째 함수의 출력 유형이 첫번째 함수의 입력 유형과 같은 한 합성할 수 있다는 것을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means simply that any argument
to the constructor in which it occurs is a dependent arrow type in which the
inductive type under definition occurs only as the resulting type,
where the indices are given in terms of constants and previous
arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152212Z" creationid="tlqk35" creationdate="20220528T160716Z">
        <seg>이 의미는 단순히 그것이 발생하는 생성자에서 임의의 인자가 귀납형이 정의 하에서 결과적인 유형으로써만 일어나는 의존 화살표 유형임을 의미합니다. 여기서 색인은 상수와 이전의 인수에 대해서 제시됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that the system maintains an internal ordering
of terms, and only applies the identity if doing so decreases the
order.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123008Z" creationid="tlqk35" creationdate="20220524T162624Z">
        <seg>이는 린 시스템이 항들의 내부적인 순서를 유지하고 
순위를 감소시키는 방향으로만 항등식을 적용함을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This means that whenever you write &lt;g7&gt;t&lt;/g7&gt;, a placeholder, or
"hole," is inserted, so that &lt;g8&gt;t&lt;/g8&gt; is replaced by &lt;g9&gt;@t _&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T184623Z" creationid="tlqk3" creationdate="20220525T184623Z">
        <seg>이는 우리가 &lt;g7&gt;t&lt;/g7&gt;를 쓰는 언제든지 자리차지자 혹은 "구멍"이 삽입되고 &lt;g8&gt;t&lt;/g8&gt;는 &lt;g9&gt;@t _&lt;/g9&gt;로 대체됨을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This might look more familiar to you if you know how functions work in
other programming languages.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143905Z" creationid="tlqk35" creationdate="20220321T143905Z">
        <seg>다른 프로그래밍언어에서 함수가 어떻게 동작하는지 안다면 이게 여러분에게 더 친숙하게 보일지 모르겠습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This mode allows to travel inside assumptions and
goals, even inside function abstractions and dependent arrows, to apply rewriting or
simplifying steps.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T182024Z" creationid="tlqk3" creationdate="20220604T182024Z">
        <seg>이 모드를 사용하면 가정과 목표 속과 심지어 함수 추상화 및 종속 화살표 내부를 이동하여 다시쓰기 또는 단순화 단계를 적용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This provides
a quick and convenient way to begin experimenting with the system.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131839Z" creationid="tlqk35" creationdate="20220321T131839Z">
        <seg>이는 실험적으로 시스템을 시작하는데 편리하고 빠른 방법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This provides a compact way of unpacking hypotheses that make use of logical connectives.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T161750Z" creationid="tlqk3" creationdate="20220529T161750Z">
        <seg>이것은 논리연결사가 사용된 가정을 펼치는 간소한 방식을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This provides a convenient way of accessing functions without opening
a namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T163410Z" creationid="tlqk35" creationdate="20220321T163410Z">
        <seg>이는 이름공간을 열지 않고 함수에 접근하는 편리한 방법을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This provides a convenient way of accessing the fields
of a structure.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174414Z" creationid="tlqk35" creationdate="20220528T174414Z">
        <seg>이것은 구조체의 필드에 접근하는 편리한 방법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This reflects the interpretation of &lt;g18&gt;Prop&lt;/g18&gt; as the type
of propositions rather than data, and it is what makes &lt;g19&gt;Prop&lt;/g19&gt;
&lt;g20&gt;impredicative&lt;/g20&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T070508Z" creationid="tlqk35" creationdate="20220321T175109Z">
        <seg>이것은 데이터보다는 명제의 유형으로써 &lt;g18&gt;Prop&lt;/g18&gt;의 해석을 반영합니다. 그리고 이것이&lt;g19&gt;Prop&lt;/g19&gt;을 &lt;g20&gt;비서술적(impredicative)&lt;/g20&gt;이게 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This rule is sometimes called &lt;g3&gt;ex falso&lt;/g3&gt; (short for &lt;g4&gt;ex
falso sequitur quodlibet&lt;/g4&gt;), or the &lt;g5&gt;principle of explosion&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154945Z" creationid="tlqk35" creationdate="20220321T164428Z">
        <seg>이 규칙은 때때로 &lt;g3&gt;ex falso&lt;/g3&gt; (라틴어 &lt;g4&gt;ex falso sequitur quodlibet&lt;/g4&gt;을 줄인 것), 또는 &lt;g5&gt;폭발 원리(principle of explosion)&lt;/g5&gt;라고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This section provides additional information for those
interested in the axiomatic foundations.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T155229Z" creationid="tlqk35" creationdate="20220528T155229Z">
        <seg>이 섹션은 공리적 기초에 대해 흥미로워하는 이들을 위한 추가 정보를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This sets a very high standard: every rule of inference and every step of a
calculation has to be justified by appealing to prior definitions and theorems, all the way down to basic axioms and
rules.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131444Z" creationid="tlqk35" creationdate="20220321T131444Z">
        <seg>이것은 아주 높은 기준을 설정합니다. 모든 추론 규칙과 계산의 모든 계산 과정은 선행된(기초 공리와 규칙으로 거슬러 내려가는) 정의와 정리에 호소하여 정당화되어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This simple
device is extremely useful when it comes to structuring long proofs,
since we can use intermediate &lt;g7&gt;have&lt;/g7&gt;'s as stepping stones leading to
the final goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T161539Z" creationid="tlqk35" creationdate="20220321T165215Z">
        <seg>이 단순한 장치는 긴 증명을 구조화 할 때 엄청나게 유용합니다. 왜냐하면 우리는 간간히 &lt;g7&gt;have&lt;/g7&gt;를 최종 목표로 이끄는 주춧돌로써 쓰기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This tells Lean to use the &lt;g1&gt;assumption&lt;/g1&gt; tactic, which, in turn,
proves the goal by finding a suitable hypothesis in the local
context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T073829Z" creationid="tlqk35" creationdate="20220321T183420Z">
        <seg>이로써 린에게 &lt;g1&gt;assumption&lt;/g1&gt; 전략을 사용해 현재 맥락에서 적절한 가정을 찾아 목표를 증명하라고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This tutorial describes the current version of Lean, known as Lean 4.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131956Z" creationid="tlqk35" creationdate="20220321T131956Z">
        <seg>이 튜토리얼은 린의 현재 버전(린 4)를 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This tutorial is an open access project maintained on Github.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134813Z" creationid="tlqk35" creationdate="20220321T134813Z">
        <seg>이 튜토리얼은 깃허브로 관리되어 누구나 접근할 수 있는 프로젝트입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This type depends on &lt;g8&gt;two&lt;/g8&gt; parameters: the type of the
elements in the vector (&lt;g9&gt;α : Type&lt;/g9&gt;) and the length of the vector
&lt;g10&gt;n : Nat&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150957Z" creationid="tlqk35" creationdate="20220321T150957Z">
        <seg>이 유형은 &lt;g8&gt;두&lt;/g8&gt; 매개변수에 의존합니다. 하나는 벡터의 원소의 유형 (&lt;g9&gt;α : Type&lt;/g9&gt;)이고 또 다른 하나는 벡터의 길이&lt;g10&gt;n : Nat&lt;/g10&gt;입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This underscore is
known as a &lt;g1&gt;wildcard pattern&lt;/g1&gt;, or an &lt;g2&gt;anonymous variable&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164641Z" creationid="tlqk3" creationdate="20220529T163226Z">
        <seg>이 밑줄 문자는 &lt;g1&gt;와일드카드 패턴(wildcard pattern)&lt;/g1&gt;혹은 &lt;g2&gt;익명 변수(anonymous variable)&lt;/g2&gt;로 알려져 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This version of
&lt;g3&gt;add&lt;/g3&gt; is the Lean analogue of the Haskell term &lt;g4&gt;add :: Add a =&gt; a -&gt; a -&gt; a&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T154414Z" creationid="tlqk3" creationdate="20220604T154414Z">
        <seg>&lt;g3&gt;add&lt;/g3&gt;의 이 버전은 하스켈 항 &lt;g4&gt;add :: Add a =&gt; a -&gt; a -&gt; a&lt;/g4&gt;의 린 닮은꼴입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This version of the text assumes you’re using Lean 4.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171351Z" creationid="tlqk35" creationdate="20220321T171351Z">
        <seg>이 버전의 책은 여러분이 Lean 4를 사용한다고 가정합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Those not inclined to this ideology can view it, rather, as a simple
coding trick.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T155921Z" creationid="tlqk35" creationdate="20220321T155921Z">
        <seg>이 이데올로기에 편향되지 않은 사람들은 꽤나 단순한 코딩 트릭으로 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Throughout the text you will find examples of Lean code like the one below:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134728Z" creationid="tlqk35" creationdate="20220321T134728Z">
        <seg>이 교재에서 여러분은 아래와 같은 린 코드 예제를 보게 될 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus all theorems in the library
that rely on decidability assumptions are freely available when you
want to reason classically.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173904Z" creationid="tlqk3" creationdate="20220604T173904Z">
        <seg>따라서 결정가능성 가정에 의존하는 라이브러리 속 모든 정리는 여러분이 고전적으로 추론하는 것을 원할 때 자유롭게 이용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus application gives rise to a function
&lt;g7&gt;extfun_app : extfun α β → (x : α) → β x&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T182344Z" creationid="tlqk3" creationdate="20220610T182344Z">
        <seg>따라서 함수 적용은 함수 &lt;g7&gt;extfun_app : extfun α β → (x : α) → β x&lt;/g7&gt;를 발생시킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus both of the following
proofs of &lt;g5&gt;zero_add&lt;/g5&gt; work:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173354Z" creationid="tlqk3" creationdate="20220529T173354Z">
        <seg>따라서 &lt;g5&gt;zero_add&lt;/g5&gt;의 다음 증명들은 모두 작동합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus if the application of
theorem &lt;g1&gt;foo&lt;/g1&gt; to a single goal produces four subgoals, one would
expect the proof to look like this:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T110928Z" creationid="tlqk35" creationdate="20220524T145553Z">
        <seg>따라서 &lt;g1&gt;foo&lt;/g1&gt; 정리를 한 목표에 적용해 네 개의 하위 목표가 만들어 진다면 
증명은 이와 같이 보일 것이라 생각할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus namespaces
give you a way to manage names in your working environment.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150500Z" creationid="tlqk35" creationdate="20220321T150500Z">
        <seg>따라서 이름공간은 당신의 작업 환경 속에 이름을 관리하는 방법을 줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus the
proof term above could be written more concisely:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T154021Z" creationid="tlqk35" creationdate="20220321T164020Z">
        <seg>따라서 위의 증명 항을 더 간결하게 작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus the string &lt;g7&gt;a + b + c&lt;/g7&gt; cannot be parsed as the equivalent of
&lt;g8&gt;a + (b + c)&lt;/g8&gt; because the right-hand side operand of an &lt;g9&gt;infixl&lt;/g9&gt; notation
has precedence one greater than the notation itself.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122944Z" creationid="tlqk3" creationdate="20220526T122944Z">
        <seg>따라서 문자열 &lt;g7&gt;a + b + c&lt;/g7&gt;는 &lt;g8&gt;a + (b + c)&lt;/g8&gt;와 동등한 것으로 분석될 수 없습니다. 왜냐하면 &lt;g9&gt;infixl&lt;/g9&gt;표기의 우변의 피연산자가 그 자체의 표기보다 하나 큰 우선순위를 갖기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus the term is equivalent to &lt;g6&gt;a ~ (b ~ c)&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123651Z" creationid="tlqk3" creationdate="20220526T123651Z">
        <seg>따라서 항은 &lt;g6&gt;a ~ (b ~ c)&lt;/g6&gt;과 동등합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus we can carry out definitions by cases on decidable predicates on
the natural numbers:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173246Z" creationid="tlqk3" creationdate="20220604T173246Z">
        <seg>따라서 우리는 자연수에 대해 결정가능 술어에 대한 각 경우에 대해 정의를 이끌어 냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus we can think of an element &lt;g8&gt;f&lt;/g8&gt; of the
type &lt;g9&gt;α → Option β&lt;/g9&gt; as being a partial function from &lt;g10&gt;α&lt;/g10&gt; to &lt;g11&gt;β&lt;/g11&gt;:
for every &lt;g12&gt;a : α&lt;/g12&gt;, &lt;g13&gt;f a&lt;/g13&gt; either returns &lt;g14&gt;none&lt;/g14&gt;, indicating the
&lt;g15&gt;f a&lt;/g15&gt; is "undefined", or &lt;g16&gt;some b&lt;/g16&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T150624Z" creationid="tlqk3" creationdate="20220527T150624Z">
        <seg>따라서 우리는 &lt;g9&gt;α → Option β&lt;/g9&gt;형의 원소 &lt;g8&gt;f&lt;/g8&gt;를 모든 &lt;g12&gt;a : α&lt;/g12&gt;에 대한 &lt;g10&gt;α&lt;/g10&gt;에서 &lt;g11&gt;β&lt;/g11&gt;까지의 부분함수인 것으로 생각할 수 있습니다. &lt;g13&gt;f a&lt;/g13&gt; &lt;g15&gt;f a&lt;/g15&gt;가 "정의되지 않음"을 가리키는 &lt;g14&gt;none&lt;/g14&gt;을 반환하거나 &lt;g16&gt;some b&lt;/g16&gt;을 반환합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus we have:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185910Z" creationid="tlqk3" creationdate="20220610T185910Z">
        <seg>따라서 우리는 다음을 가지고 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus you can
view &lt;g9&gt;Nat.add&lt;/g9&gt; as a function that takes a natural number and returns
another function that takes a natural number and returns a natural
number.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140823Z" creationid="tlqk35" creationdate="20220321T140823Z">
        <seg>따라서 여러분은 &lt;g9&gt;Nat.add&lt;/g9&gt;은 자연수를 받아 자연수를 받고 자연수를 반환하는 또 다른 함수를 반환하는 함수로 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, Lean 4
implements a new feature, &lt;g2&gt;discriminant refinement&lt;/g2&gt;, which includes
these extra discriminants automatically for us.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151209Z" creationid="tlqk3" creationdate="20220604T151209Z">
        <seg>따라서 린4에서 별도의 구별자를 자동적으로 포함시켜주는 새로운 기능 &lt;g2&gt;discriminant refinement&lt;/g2&gt;을 구현했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, all four of these definitions have the same net effect.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182726Z" creationid="tlqk3" creationdate="20220603T182726Z">
        <seg>따라서 이 모든 네 정의들은 동일한 알짜 효과를 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, for example, we can specialize the example from the previous section to the equality relation:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T081516Z" creationid="tlqk35" creationdate="20220321T175602Z">
        <seg>따라서, 우리는 이전 섹션으로부터 동등 관계까지의 예를 특수화 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, the standard library assigns a low priority to
the &lt;g4&gt;propDecidable&lt;/g4&gt; instance.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T174053Z" creationid="tlqk3" creationdate="20220604T174053Z">
        <seg>따라서 표준 라이브러리는 &lt;g4&gt;propDecidable&lt;/g4&gt; 개체에 낮은 우선 순위를 할당합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, type class synthesis only starts after these two types are known.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164649Z" creationid="tlqk3" creationdate="20220604T164649Z">
        <seg>따라서 유형 클래스 합성은 이 두 유형이 알려진 뒤에야 시작합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, you can
use the &lt;g1&gt;local&lt;/g1&gt; modifier to indicate that they only have effect until
the current &lt;g2&gt;section&lt;/g2&gt; or &lt;g3&gt;namespace&lt;/g3&gt; is closed, or until the end
of the current file.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170416Z" creationid="tlqk3" creationdate="20220604T170416Z">
        <seg>따라서 여러분은 &lt;g1&gt;local&lt;/g1&gt; 수정자로 그들이 오직 현재 닫힌&lt;g2&gt;section&lt;/g2&gt;이나 &lt;g3&gt;namespace&lt;/g3&gt;까지만 혹은 현재 파일의 끝까지만 유효함을 나타내는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, you can disable it using
the command &lt;g1&gt;set_option autoImplicit false&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134943Z" creationid="tlqk3" creationdate="20220526T134943Z">
        <seg>따라서 여러분은 이것을 &lt;g1&gt;set_option autoImplicit false&lt;/g1&gt; 명령을 써서 해제할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To
define the function &lt;g9&gt;inverse&lt;/g9&gt; below, we &lt;g10&gt;have to&lt;/g10&gt; mark &lt;g11&gt;f a&lt;/g11&gt;
inaccessible.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T144951Z" creationid="tlqk3" creationdate="20220604T144951Z">
        <seg>아래에서 함수 &lt;g9&gt;inverse&lt;/g9&gt;를 정의하려면 우리는 &lt;g11&gt;f a&lt;/g11&gt;를 접근 불가한 것으로 표시&lt;g10&gt;해야만&lt;/g10&gt; 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To &lt;g2&gt;prove&lt;/g2&gt; that
assertion, we need to exhibit a term &lt;g3&gt;t : p&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114424Z" creationid="tlqk35" creationdate="20220321T160530Z">
        <seg>주장을 &lt;g2&gt;증명&lt;/g2&gt;하기 위해 항 &lt;g3&gt;t : p&lt;/g3&gt;을 보일 필요가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To build this manual, first install the fork via</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T172002Z" creationid="tlqk35" creationdate="20220321T172002Z">
        <seg>이 메뉴얼을 생성하려면 fork를 다음을 거쳐 설치해야합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To complete the example, given &lt;g1&gt;a : α&lt;/g1&gt; and &lt;g2&gt;u : uprod α&lt;/g2&gt;, we
define the proposition &lt;g3&gt;a ∈ u&lt;/g3&gt; which should hold if &lt;g4&gt;a&lt;/g4&gt; is one of
the elements of the unordered pair &lt;g5&gt;u&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T181106Z" creationid="tlqk3" creationdate="20220610T181106Z">
        <seg>예제를 끝내기 위해 &lt;g1&gt;a : α&lt;/g1&gt; 및 &lt;g2&gt;u : uprod α&lt;/g2&gt;가 주어졌을 때, &lt;g4&gt;a&lt;/g4&gt;는 순서가 지정되지 않은 쌍 &lt;g5&gt;u&lt;/g5&gt;의 원소 중 하나이면 성립해야 하는 명제 &lt;g3&gt;a ∈ u&lt;/g3&gt;를 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define a function on &lt;g4&gt;Prod α β&lt;/g4&gt;, we
can assume the input is of the form &lt;g5&gt;Prod.mk a b&lt;/g5&gt;, and we have to
specify the output, in terms of &lt;g6&gt;a&lt;/g6&gt; and &lt;g7&gt;b&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153210Z" creationid="tlqk3" creationdate="20220526T153210Z">
        <seg> &lt;g4&gt;Prod α β&lt;/g4&gt;에서 함수를 정의하기 위해서 우리는 입력의 형태가 &lt;g5&gt;Prod.mk a b&lt;/g5&gt;이라 가정할 수 있습니다. 그리고 &lt;g6&gt;a&lt;/g6&gt;와 &lt;g7&gt;b&lt;/g7&gt;에 대해 출력을 명시해야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define a function on &lt;g5&gt;Sum α β&lt;/g5&gt;, we have to
handle two cases: either the input is of the form &lt;g6&gt;inl a&lt;/g6&gt;, in which
case we have to specify an output value in terms of &lt;g7&gt;a&lt;/g7&gt;, or the
input is of the form &lt;g8&gt;inr b&lt;/g8&gt;, in which case we have to specify an
output value in terms of &lt;g9&gt;b&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T155038Z" creationid="tlqk3" creationdate="20220526T155038Z">
        <seg>&lt;g5&gt;Sum α β&lt;/g5&gt;에 함수를 정의하기 위해서 우리는 두 경우를 다뤄야 합니다. 입력이 &lt;g6&gt;inl a&lt;/g6&gt;의 꼴인 경우 우리는 출력값을 &lt;g7&gt;a&lt;/g7&gt;에 대해 나타내야 하고 혹은 입력이 &lt;g8&gt;inr b&lt;/g8&gt;꼴인 경우 우리는 출력값을 &lt;g9&gt;b&lt;/g9&gt;에 대해 나타내야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define polymorphic constants, Lean allows you to
declare universe variables explicitly using the &lt;g1&gt;universe&lt;/g1&gt; command:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142059Z" creationid="tlqk35" creationdate="20220321T142059Z">
        <seg>다형적인 상수를 정의하기 위해 린은 여러분이 세계 변수를 &lt;g1&gt;universe&lt;/g1&gt; 명령을 명시적으로 사용하여 선언할 수 있게 했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define that function, Lean uses a suitable well-founded measure.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174058Z" creationid="tlqk3" creationdate="20220603T174058Z">
        <seg>이런 함수를 정의하려면 린은 적절히 잘 세워진 척도를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To define the left inverse &lt;g5&gt;linv&lt;/g5&gt;, we use a dependent
if-then-else expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191127Z" creationid="tlqk3" creationdate="20220610T191127Z">
        <seg>왼쪽 역함수 &lt;g5&gt;linv&lt;/g5&gt;를 정의하기 위해 종속적인 if-then-else 표현식을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To each proposition &lt;g1&gt;p&lt;/g1&gt; we associate a type that is
empty if &lt;g2&gt;p&lt;/g2&gt; is false and has a single element, say &lt;g3&gt;*&lt;/g3&gt;, if &lt;g4&gt;p&lt;/g4&gt;
is true.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T110654Z" creationid="tlqk35" creationdate="20220321T155951Z">
        <seg>각 명제 &lt;g1&gt;p&lt;/g1&gt;에 대해, 우리는 &lt;g2&gt;p&lt;/g2&gt;이 거짓이면 빈 유형, &lt;g4&gt;p&lt;/g4&gt;가 참이면 한 원소(말하자면: &lt;g3&gt;*&lt;/g3&gt;)를 갖는 유형과 연관시킵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To formally
express a mathematical assertion in the language of dependent type
theory, we need to exhibit a term &lt;g1&gt;p : Prop&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T114340Z" creationid="tlqk35" creationdate="20220321T160507Z">
        <seg>의존 유형론의 언어로 수학적 주장을 형식적으로 표현하기 위해 항 &lt;g1&gt;p : Prop&lt;/g1&gt;을 보일 필요가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To get used to using universal quantifiers, you should try some of the
exercises at the end of this section.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065924Z" creationid="tlqk35" creationdate="20220321T174413Z">
        <seg>전칭 한정기호 사용에 익숙해지려면 여러분은 이 섹션 끝의 연습문제들을 풀어봐야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To handle structural recursion, the equation compiler uses
&lt;g1&gt;course-of-values&lt;/g1&gt; recursion, using constants &lt;g2&gt;below&lt;/g2&gt; and &lt;g3&gt;brecOn&lt;/g3&gt;
that are automatically generated with each inductively defined
type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T164135Z" creationid="tlqk3" creationdate="20220603T164135Z">
        <seg>구조적 재귀를 다루려고 방정식 컴파일러는 각 귀납적으로 정의된 유형으로부터 자동적으로 생성된 상수 &lt;g2&gt;below&lt;/g2&gt;와 &lt;g3&gt;brecOn&lt;/g3&gt;을 사용하여 &lt;g1&gt;course-of-values&lt;/g1&gt;재귀를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To help debug in these situations, Lean enables you to request a
trace of the search:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180419Z" creationid="tlqk3" creationdate="20220604T180419Z">
        <seg>이러한 상황에서 디버그를 돕기 위해 Lean을 사용하면 검색 추적을 요청할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To illustrate the difference, consider the following example, which
shows that a reflexive euclidean relation is both symmetric and
transitive.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T185734Z" creationid="tlqk3" creationdate="20220525T185734Z">
        <seg>차이를 설명하자면 유클리드 관계의 반사성은 모두 대칭적이고 추이적임을 보이는 다음 예제를 생각해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To illustrate the use
of quotients, let us define the type of &lt;g4&gt;unordered&lt;/g4&gt; pairs of elements
of a type &lt;g5&gt;α&lt;/g5&gt; as a quotient of the type &lt;g6&gt;α × α&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T175735Z" creationid="tlqk3" creationdate="20220610T175735Z">
        <seg>몫의 사용을 설명하기 위해 &lt;g5&gt;α&lt;/g5&gt; 형의 &lt;g4&gt;순서 없는&lt;/g4&gt; 순서쌍 유형을 &lt;g6&gt;α × α&lt;/g6&gt; 형의 몫으로 정의합시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To make &lt;g4&gt;dite&lt;/g4&gt; more
convenient to use, Lean allows us to write &lt;g5&gt;if h : c then t else e&lt;/g5&gt;
instead of &lt;g6&gt;dite c (λ h : c, t) (λ h : ¬ c, e)&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172832Z" creationid="tlqk3" creationdate="20220604T172832Z">
        <seg>&lt;g4&gt;dite&lt;/g4&gt;를 사용하기 더 편리하게 만들기 위해 린은 우리가 &lt;g6&gt;dite c (λ h : c, t) (λ h : ¬ c, e)&lt;/g6&gt; 대신 &lt;g5&gt;if h : c then t else e&lt;/g5&gt;로 쓸 수 있게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To preserve the validity of the previous
goal, the &lt;g4&gt;generalize&lt;/g4&gt; tactic allows us to record the fact that
&lt;g5&gt;3&lt;/g5&gt; has been replaced by &lt;g6&gt;x&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092036Z" creationid="tlqk35" creationdate="20220522T065607Z">
        <seg>이전 목표의 유효성을 보존하기 위해 &lt;g4&gt;generalize&lt;/g4&gt; 전략은 &lt;g5&gt;3&lt;/g5&gt;이 
&lt;g6&gt;x&lt;/g6&gt;로 대체되었다는 사실을 기록하게 해줍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To some who take a constructive view of logic and mathematics,
this is a faithful rendering of what it means to be a proposition: a
proposition &lt;g1&gt;p&lt;/g1&gt; represents a sort of data type, namely, a
specification of the type of data that constitutes a proof.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T110402Z" creationid="tlqk35" creationdate="20220321T155851Z">
        <seg>논리학과 수학에 구성주의적 관점을 갖는 누군가에게 이것은 명제라는 것의 의미를 충실하게 구현한 것입니다. 명제 &lt;g1&gt;p&lt;/g1&gt;은 증명을 생성하는 일종의 데이터를 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To start with, we can
avoid writing the term &lt;g1&gt;Proof&lt;/g1&gt; repeatedly by conflating &lt;g2&gt;Proof p&lt;/g2&gt;
with &lt;g3&gt;p&lt;/g3&gt; itself.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T104232Z" creationid="tlqk35" creationdate="20220321T155247Z">
        <seg>그러려면 &lt;g3&gt;p&lt;/g3&gt;를 &lt;g2&gt;Proof p&lt;/g2&gt;로 부풀림으로써 항 &lt;g1&gt;Proof&lt;/g1&gt;를 반복해 쓰는 것을 피할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To start with, we can use anonymous "have" expressions to introduce an
auxiliary goal without having to label it.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T073240Z" creationid="tlqk35" creationdate="20220321T183308Z">
        <seg>우선, 우리는 익명 "have" 표현식으로 레이블이 없는 부가적인 목표를 도입하는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To start with, you will learn the logical system that Lean is
based on, a version of &lt;g1&gt;dependent type theory&lt;/g1&gt; that is powerful enough to prove almost any conventional mathematical
theorem, and expressive enough to do it in a natural way.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T132047Z" creationid="tlqk35" creationdate="20220321T132047Z">
        <seg>먼저 여러분은 Lean이 기초하고 있는 논리 체계 즉 거의 모든 기존의 수학적 정리를 증명할 수 있을 만큼 강력하고 그것을 자연스럽게 할 수 있을 만큼 충분히 표현력이 뛰어난 &lt;g1&gt;의존유형론&lt;/g1&gt; 버전을 배웁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To state the final axiom defined in the standard library, we need the
&lt;g1&gt;Nonempty&lt;/g1&gt; type, which is defined as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T182923Z" creationid="tlqk3" creationdate="20220610T182923Z">
        <seg>표준 라이브러리에 정의된 최종 공리를 기술하려면 다음과 같이 정의되는 &lt;g1&gt;Nonempty&lt;/g1&gt;형이 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To summarize, then, on top of the underlying framework of universes,
dependent function types, and inductive types, the standard library
adds three additional components:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163910Z" creationid="tlqk3" creationdate="20220605T163910Z">
        <seg>요약하자면 표준 라이브러리는 유형 세계, 종속 함수 유형과 귀납형의 기반 프레임워크 위에 세 가지 구성요소를 더합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To support this common use case, the standard library defines the
notion of a &lt;g1&gt;setoid&lt;/g1&gt;, which is simply a type with an associated
equivalence relation:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T184658Z" creationid="tlqk3" creationdate="20220605T184658Z">
        <seg>이 일반적인 사용 사례를 지원하기 위해 표준 라이브러리는 단순히 연관된 등가 관계가 있는 유형인 &lt;g1&gt;setoid&lt;/g1&gt; 개념을 정의합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To that end, the string &lt;g1&gt;_root_&lt;/g1&gt; is an
explicit description of the empty prefix.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180639Z" creationid="tlqk35" creationdate="20220524T180639Z">
        <seg>이 끝에서 문자열 &lt;g1&gt;_root_&lt;/g1&gt;이 빈 접두사를 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To the kernel type
checker, there is no difference between the two.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T115108Z" creationid="tlqk35" creationdate="20220321T160850Z">
        <seg>커널의 유형 확인기에서 둘 사이의 차이는 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To understand the difficulty, consider what it would take
to define a function &lt;g8&gt;tail&lt;/g8&gt; which takes a vector
&lt;g9&gt;v : vector α (succ n)&lt;/g9&gt; and deletes the first element.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175752Z" creationid="tlqk3" creationdate="20220603T175752Z">
        <seg>어려움을 이해하려면 벡터 &lt;g9&gt;v : vector α (succ n)&lt;/g9&gt;를 받고 첫 번째 원소를 삭제하는 함수 &lt;g8&gt;tail&lt;/g8&gt;를 정의하는데 무엇이 필요한지 고려해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use Lean effectively you will inevitably need to make use of
definitions and theorems in the library.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130516Z" creationid="tlqk3" creationdate="20220526T130516Z">
        <seg>린을 효과적으로 사용하기 위해서 여러분은 라이브러리의 정의와 정리의 사용이 불가피하게 될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use all the hypotheses present in the local context when
simplifying, we can use the wildcard symbol, &lt;g1&gt;*&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T123431Z" creationid="tlqk35" creationdate="20220524T163644Z">
        <seg>단순화할 때 지역 맥락 속에 있는 모든 가정을 사용하기 위해서
우리는 와일드카드 기호 &lt;g1&gt;*&lt;/g1&gt;를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use this
principle, you have to open the classical namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T165706Z" creationid="tlqk35" creationdate="20220321T165706Z">
        <seg>이 원리를 사용하기 위해서 여러분은 classical 이름공간을 열어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Together with &lt;g1&gt;Quotient.sound&lt;/g1&gt;, this implies that the elements of
the quotient correspond exactly to the equivalence classes of elements
in &lt;g2&gt;α&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T175511Z" creationid="tlqk3" creationdate="20220610T175511Z">
        <seg>&lt;g1&gt;Quotient.sound&lt;/g1&gt;와 함께 이것은 몫의 요소가 &lt;g2&gt;α&lt;/g2&gt; 속 원소의 등가 클래스와 정확히 일치한다는 것을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Together with choice, we also get the stronger principle that every
proposition is decidable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T190434Z" creationid="tlqk3" creationdate="20220610T190434Z">
        <seg>선택과 함께 우리는 또한 모든 명제가 결정 가능하다는 더 강력한 원리을 얻습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Too much information can be overwhelming, though, and
Lean's defaults are generally sufficient for ordinary interactions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130421Z" creationid="tlqk3" creationdate="20220526T130421Z">
        <seg>너무 많은 정보에 압도할 수 있지만 린의 기본설정도 평범한 상호작용에 일반적으로 충분합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Try also defining the function &lt;g1&gt;length : {α : Type u} → List α → Nat&lt;/g1&gt; that returns the length of a list,
and prove that it behaves as expected (for example, &lt;g2&gt;length (append as bs) = length as + length bs&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163455Z" creationid="tlqk3" creationdate="20220527T163455Z">
        <seg>리스트의 길이를 반환하는  함수 &lt;g1&gt;length : {α : Type u} → List α → Nat&lt;/g1&gt;도 정의해 보세요. 그리고 이것 예상대로 동작하는지 증명하세요. (예를 들어 &lt;g2&gt;length (append as bs) = length as + length bs&lt;/g2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Try defining other operations on the natural numbers, such as
multiplication, the predecessor function (with &lt;g1&gt;pred 0 = 0&lt;/g1&gt;),
truncated subtraction (with &lt;g2&gt;n - m = 0&lt;/g2&gt; when &lt;g3&gt;m&lt;/g3&gt; is greater
than or equal to &lt;g4&gt;n&lt;/g4&gt;), and exponentiation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T171042Z" creationid="tlqk35" creationdate="20220528T171042Z">
        <seg>자연수에 대해 곱셈, 선행자 함수 (&lt;g1&gt;pred 0 = 0&lt;/g1&gt;으로), 절단된 뺄셈( &lt;g3&gt;m&lt;/g3&gt; 이  &lt;g4&gt;n&lt;/g4&gt;)보다 크거나 같을 때 &lt;g2&gt;n - m = 0&lt;/g2&gt;으로)와 거듭제곱 같은 다른 연산을 정의해보세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Try proving these (one direction of the second of these
requires classical logic):</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074636Z" creationid="tlqk35" creationdate="20220321T183820Z">
        <seg>이것들을 증명해 보세요.(두 번째 예제의 어느 한 방향은 고전 논리가 필요합니다.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Turning on implicit arguments shows that the elaborator has inferred
the decidability of the proposition &lt;g1&gt;x &lt; a ∨ x &gt; b&lt;/g1&gt;, simply by
applying appropriate instances.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173546Z" creationid="tlqk3" creationdate="20220604T173546Z">
        <seg>단순히 적절한 개체를 적용함으로써 암시적인 인수을 여는 것은 협력기가 명제 &lt;g1&gt;x &lt; a ∨ x &gt; b&lt;/g1&gt;의 결정가능성을 추론함을 보일 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two expressions that are equivalent up to
associativity and commutativity are then rewritten to the same
canonical form.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T122803Z" creationid="tlqk35" creationdate="20220524T162902Z">
        <seg>그럼 결합성과 교환성에 한해 동등한 두 표현식은 동일한 정식 형태로 재작성될 것 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two more examples of inductive types in the library are the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152048Z" creationid="tlqk3" creationdate="20220527T150000Z">
        <seg>라이브러리에서 귀납형의 둘 이상의 예제가 다음에 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type classes</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152557Z" creationid="tlqk3" creationdate="20220604T152557Z">
        <seg>유형 클래스</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type classes are implemented using attributes in Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170239Z" creationid="tlqk3" creationdate="20220604T170239Z">
        <seg>유형 클래스는 린의 속성을 사용해 구현됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type classes were introduced as a principled way of enabling
ad-hoc polymorphism in functional programming languages.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152812Z" creationid="tlqk3" creationdate="20220604T152812Z">
        <seg>유형 클래스는 함수형 프로그래밍 언어에서 특수 목적(ad-hoc)의 다형성을 활성화하는 원칙적인 방법으로 도입되었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Type inference is an important part of Lean:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144052Z" creationid="tlqk35" creationdate="20220321T144052Z">
        <seg>유형 추론은 Lean의 중요한 기능입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types as objects</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141233Z" creationid="tlqk35" creationdate="20220321T141233Z">
        <seg>대상으로써 유형</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Typically, the expression &lt;g5&gt;p&lt;/g5&gt;
will depend on &lt;g6&gt;x : α&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T173332Z" creationid="tlqk35" creationdate="20220321T173332Z">
        <seg>일반적으로 표현식 &lt;g5&gt;p&lt;/g5&gt;는 &lt;g6&gt;x : α&lt;/g6&gt;에 의존할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Under the hood, this is compiled as a single recursive definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173844Z" creationid="tlqk3" creationdate="20220603T173844Z">
        <seg>후드 아래에서 이것은 단일 재귀적 정의로 컴파일된다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unicode</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T162031Z" creationid="tlqk35" creationdate="20220321T161850Z">
        <seg>유니코드(Unicode)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unlike &lt;g3&gt;section&lt;/g3&gt;, namespaces require a name.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150420Z" creationid="tlqk35" creationdate="20220321T150420Z">
        <seg>&lt;g3&gt;section&lt;/g3&gt;과는 달리, 이름공간은 이름이 필요합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Unsurprisingly, it produces exactly the same proof term.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T060658Z" creationid="tlqk35" creationdate="20220522T060658Z">
        <seg>놀랄 것 없이, 이것은 정확히 동일한 증명항을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use tactic combinators to obtain a one line proof of the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171454Z" creationid="tlqk35" creationdate="20220524T171454Z">
        <seg>다음의 한 줄 증명을 얻도록 전략조합자를 사용하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Users can disable the implicit lambda feature by using &lt;g1&gt;@&lt;/g1&gt; or writing
a lambda expression with &lt;g2&gt;{}&lt;/g2&gt; or &lt;g3&gt;[]&lt;/g3&gt; binder annotations.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135627Z" creationid="tlqk3" creationdate="20220526T135627Z">
        <seg>사용자는 &lt;g1&gt;@&lt;/g1&gt;을 사용하거나 &lt;g2&gt;{}&lt;/g2&gt; 이나 &lt;g3&gt;[]&lt;/g3&gt;의 결합 주석으로 람다 표현식을 쓰는 것으로 암시적인 람다 기능을 해제할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Users may also wish to make use of additional
libraries, or develop their own projects across multiple files.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173740Z" creationid="tlqk35" creationdate="20220524T173740Z">
        <seg>사용자는 아마 추가적인 라이브러리의 사용 혹은 다수의 파일에 걸쳐 자신만의 프로젝트를 개발하기를 원할지도 모릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Users that are so inclined can stick to a "computationally
pure" fragment, which guarantees that closed expressions in the system
evaluate to canonical normal forms.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T161240Z" creationid="tlqk3" creationdate="20220605T161240Z">
        <seg>그런 경향이 있는 사용자는 시스템의 닫힌 표현식이 표준 정규 형식으로 평가되도록 보장하는 "계산적으로 순수함" 면을 고수할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using &lt;g13&gt;Quot.lift&lt;/g13&gt; and &lt;g14&gt;Quot.ind&lt;/g14&gt;, we can show
that &lt;g15&gt;r'&lt;/g15&gt; is the smallest equivalence relation containing &lt;g16&gt;r&lt;/g16&gt;, in
the sense that if &lt;g17&gt;r''&lt;/g17&gt; is any equivalence relation containing
&lt;g18&gt;r&lt;/g18&gt;, then &lt;g19&gt;r' a b&lt;/g19&gt; implies &lt;g20&gt;r'' a b&lt;/g20&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T184420Z" creationid="tlqk3" creationdate="20220605T184420Z">
        <seg>&lt;g17&gt;r''&lt;/g17&gt;이 &lt;g18&gt;r&lt;/g18&gt;을 포함하는 임의의 등가 관계이면 &lt;g19&gt;r' a b&lt;/g19&gt;는 &lt;g20&gt;r'' a b&lt;/g20&gt;를 함의한다는 점에서 &lt;g13&gt;Quot.lift&lt;/g13&gt; 및 &lt;g14&gt;Quot.ind&lt;/g14&gt;를 사용하여 &lt;g15&gt;r'&lt;/g15&gt;이 &lt;g16&gt;r&lt;/g16&gt;을 포함하는 가장 작은 등가 관계임을 보여줄 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a clever trick (known as Diaconescu's theorem), one can use
propositional extensionality, function extensionality, and choice to
derive the law of the excluded middle.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163519Z" creationid="tlqk3" creationdate="20220605T163519Z">
        <seg>Diaconescu의 정리로 알려진 영리한 트릭을 사용하여 명제 확장성, 함수 확장성 및 배중률의 법칙을 유도하는 선택을 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using a tactic proof, we can be even more concise:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151439Z" creationid="tlqk3" creationdate="20220526T151439Z">
        <seg>심지어 전략 증명을 사용하면 더 간결하게 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using inaccessible patterns, we can prompt
the equation compiler to avoid the case split on &lt;g5&gt;n&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T150443Z" creationid="tlqk3" creationdate="20220604T150443Z">
        <seg>접근 불가한 패턴을 사용하여 우리는 방정식 컴파일러가 &lt;g5&gt;n&lt;/g5&gt;에 대해 경우를 나누는 것을 즉시 막도록 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the Library</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T130428Z" creationid="tlqk3" creationdate="20220526T130428Z">
        <seg>라이브러리 사용하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the Simplifier</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120339Z" creationid="tlqk35" creationdate="20220524T160612Z">
        <seg>단순화기 사용하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the auxiliary function &lt;g3&gt;simpConst&lt;/g3&gt;,
define a function "fuse": to simplify a plus or a times, first
simplify the arguments recursively, and then apply &lt;g4&gt;simpConst&lt;/g4&gt; to
try to simplify the result.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180419Z" creationid="tlqk3" creationdate="20220603T180419Z">
        <seg>보조 함수 &lt;g3&gt;simpConst&lt;/g3&gt;를 사용하여 함수 "fuse"를 정의하세요. 더하기와 곱하기를 간단히 하기 위해서 인수를 재귀적으로 단순화하세요. 그 뒤 &lt;g4&gt;simpConst&lt;/g4&gt;을 결과를 단순화하는데 적용하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the recursor or &lt;g1&gt;match&lt;/g1&gt; with &lt;g2&gt;h₁ : a = b&lt;/g2&gt;, we may assume &lt;g3&gt;a&lt;/g3&gt; and &lt;g4&gt;b&lt;/g4&gt; are the same,
in which case, &lt;g5&gt;p b&lt;/g5&gt; and &lt;g6&gt;p a&lt;/g6&gt; are the same.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154537Z" creationid="tlqk35" creationdate="20220528T154537Z">
        <seg>재귀자나 &lt;g1&gt;match&lt;/g1&gt;를 &lt;g2&gt;h₁ : a = b&lt;/g2&gt;과 사용하면, 우리는 &lt;g3&gt;a&lt;/g3&gt;와 &lt;g4&gt;b&lt;/g4&gt;가 같다고 가정할 수 있습니다. 그 경우 &lt;g5&gt;p b&lt;/g5&gt;와 &lt;g6&gt;p a&lt;/g6&gt;는 동일합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the various gadgets described in this chapter --- the match
statement, anonymous constructors, and the &lt;g1&gt;rewrite&lt;/g1&gt; tactic, we can
write this proof concisely as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072308Z" creationid="tlqk35" creationdate="20220321T183003Z">
        <seg>여기서 설명한 다양한 도구-match 구문, 익명 생성자,  &lt;g1&gt;재작성&lt;/g1&gt;전략을 사용하여 다음과 같이 이 증명을 간결하게 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using these new features, you can write the other vector functions defined
in the previous sections more compactly as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151546Z" creationid="tlqk3" creationdate="20220604T151546Z">
        <seg>이 새로운 기능을 사용하면 여러분은 이전에 정의한 다른 벡터 함수들을 다음과 같이 더 간결하게 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using those, one can strengthen
the principle of indefinite description as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T184347Z" creationid="tlqk3" creationdate="20220610T184347Z">
        <seg>그것들을 사용하여 다음과 같이 무한 설명의 원리을 강화할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Values of type &lt;g1&gt;Point&lt;/g1&gt; are created using &lt;g2&gt;Point.mk a b&lt;/g2&gt;, and the
fields of a point &lt;g3&gt;p&lt;/g3&gt; are accessed using &lt;g4&gt;Point.x p&lt;/g4&gt; and
&lt;g5&gt;Point.y p&lt;/g5&gt; (but &lt;g6&gt;p.x&lt;/g6&gt; and &lt;g7&gt;p.y&lt;/g7&gt; also work, see below).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173857Z" creationid="tlqk35" creationdate="20220528T173857Z">
        <seg>&lt;g1&gt;Point&lt;/g1&gt;형의 값은&lt;g2&gt;Point.mk a b&lt;/g2&gt;를 사용하여 만들어집니다. 그리고 포인트 &lt;g3&gt;p&lt;/g3&gt;의 필드는 &lt;g4&gt;Point.x p&lt;/g4&gt;와
&lt;g5&gt;Point.y p&lt;/g5&gt;를 사용해서 접근할 수 있습니다. (그러나 g6&gt;p.x&lt;/g6&gt; and &lt;g7&gt;p.y&lt;/g7&gt;도 동작함, 아래를 참고)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Variables and Sections</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145123Z" creationid="tlqk35" creationdate="20220321T145123Z">
        <seg>변수와 섹션(Variables and Sections)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Variables are only
included in declarations where they are actually used.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175415Z" creationid="tlqk35" creationdate="20220524T175415Z">
        <seg>변수는 오직 그들이 실제로 사용되는 선언에만 포함됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Variables can also be specified as implicit when they are declared with
the &lt;g1&gt;variable&lt;/g1&gt; command:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153351Z" creationid="tlqk35" creationdate="20220321T153351Z">
        <seg>&lt;g1&gt;variable&lt;/g1&gt; 명령으로 선언될 때 변수도 암시적으로 구체화될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We
can make this more precise by looking at the commands the above unfold to:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122256Z" creationid="tlqk3" creationdate="20220526T122256Z">
        <seg>우리는 위의 명령을 다음으로 펼쳐보는 것으로 이를 더 정확하게 만들 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We
sketch the proof that is found in the standard library.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T185046Z" creationid="tlqk3" creationdate="20220610T185046Z">
        <seg>표준 라이브러리에서 발견한 증명을 그립니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We also encourage you to show that
&lt;g5&gt;Bool&lt;/g5&gt; and &lt;g6&gt;Nat&lt;/g6&gt; are inhabited, that the product of two inhabited
types is inhabited, and that the type of functions to an inhabited
type is inhabited.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151309Z" creationid="tlqk3" creationdate="20220527T151309Z">
        <seg>또 우리는 여러분이 &lt;g5&gt;Bool&lt;/g5&gt;과 &lt;g6&gt;Nat&lt;/g6&gt;이 내장되었음을 보이길 권장합니다. 즉, 두 내장된 유형의 곱과 내장된 유형으로의 함수의 유형이 내장되었음을 보이길 원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We also leave it to you to determine which are
nonconstructive, and hence require some form of classical reasoning.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072854Z" creationid="tlqk35" creationdate="20220321T183134Z">
        <seg>어떤 것이 비구성주의적인지 결정하는 것도 여러분에게 맡깁니다. 그러므로 문제의 일부는 고전 논리의 형식를 요구합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We are
then allowed to use the shorter name when we open the namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151125Z" creationid="tlqk3" creationdate="20220526T151125Z">
        <seg>그럼 우리는 우리가 이름공간을 열었을 때 더 짧은 이름을 사용할 수 있게 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We are almost done describing the full range of inductive definitions
accepted by Lean.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T152114Z" creationid="tlqk35" creationdate="20220528T152114Z">
        <seg>우리는 거의 린이 허용하는 귀납 정의의 대부분을 설명했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We are currently using a
&lt;g2&gt;fork&lt;/g2&gt; of it for the following additional features:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T171745Z" creationid="tlqk35" creationdate="20220321T171745Z">
        <seg>우리는 현재 다음 부가 기능을 위해 &lt;g2&gt;fork&lt;/g2&gt;를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We are grateful to Ulrik Buchholz, Kevin Buzzard, Mario Carneiro, Nathan
Carter, Eduardo Cavazos, Amine Chaieb, Joe Corneli, William DeMeo, Marcus Klaas de Vries, Ben Dyer, Gabriel Ebner,
Anthony Hart, Simon Hudon, Sean Leather, Assia Mahboubi, Gihan Marasingha, Patrick Massot, Christopher John Mazey,
Sebastian Ullrich, Floris van Doorn, Daniel Velleman, Théo Zimmerman, Paul Chisholm, and Chris Lovett for their contributions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134840Z" creationid="tlqk35" creationdate="20220321T134840Z">
        <seg>우리는 Ulrik Buchholz, Kevin Buzzard, Mario Carneiro, Nathan Carter, Eduardo Cavazos, Amine Chaieb, Joe Corneli, William DeMeo, Marcus Klaas de Vries, Ben Dyer, Gabriel Ebner, Anthony Hart, Simon Hudon, Sean Leather, Assia Mahboubi, Gihan Marasingha, Patrick Massot, Christopher John Mazey, Sebastian Ullrich, Floris van Doorn, Daniel Velleman, Théo Zimmerman, Paul Chisholm, and Chris Lovett에게 그들의 공헌에 대해 감사드립니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We are still exploring this feature and analyzing its impact, but the experience so far has been very positive.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135411Z" creationid="tlqk3" creationdate="20220526T135411Z">
        <seg>우리는 여전히 이 기능을 탐색하고 있고, 그것의 영향을 분석합니다. 그러나 지금까지의 경험은 아주 긍정적입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can
then go on to define familiar notation in that namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160349Z" creationid="tlqk3" creationdate="20220527T160349Z">
        <seg>그럼 그 이름공간에 친숙한 기호를 정의해 나갈 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can
then read &lt;g6&gt;t : p&lt;/g6&gt; as the assertion that &lt;g7&gt;t&lt;/g7&gt; is a proof of &lt;g8&gt;p&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T104427Z" creationid="tlqk35" creationdate="20220321T155526Z">
        <seg>그러면 &lt;g6&gt;t : p&lt;/g6&gt;를 &lt;g7&gt;t&lt;/g7&gt;는 &lt;g8&gt;p&lt;/g8&gt;의 증명이다라는 주장으로 읽을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can
view such inaccessible patterns as "don't care" components of the
patterns.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T143832Z" creationid="tlqk3" creationdate="20220604T143832Z">
        <seg>우리는 그런 접속불가한 패턴을 패턴의 "신경쓰지 않는" 성분의 관점으로 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can &lt;g1&gt;extend&lt;/g1&gt; existing structures by adding new fields.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T180813Z" creationid="tlqk35" creationdate="20220528T180813Z">
        <seg>우리는 새 필드를 추가하여 존재하는 구조체를&lt;g1&gt;확장&lt;/g1&gt;할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can achieve exactly that using &lt;g5&gt;default instances&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165011Z" creationid="tlqk3" creationdate="20220604T165011Z">
        <seg>우리는 정확히 이를 &lt;g5&gt;default instances&lt;/g5&gt;으로 달성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can also
think of such a type as a "record" or a "structure".</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T161556Z" creationid="tlqk3" creationdate="20220526T161556Z">
        <seg>우리는 그런 유형으로써 "레코드" 혹은 "구조체"를 생각해볼 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can also ask Lean to fill in the proof by writing &lt;g1&gt;‹p›&lt;/g1&gt;, where
&lt;g2&gt;p&lt;/g2&gt; is the proposition whose proof we want Lean to find in the
context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T073929Z" creationid="tlqk35" creationdate="20220321T183449Z">
        <seg>또, 우린 린에게 &lt;g1&gt;‹p›&lt;/g1&gt;라고 써서 증명 속을 채우도록 린에게 요청할수 있습니다. 여기서 &lt;g2&gt;p&lt;/g2&gt;는 명제이고, 그것의 증명은 맥락 속에서 린이 찾기 바라는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can also separate constructors using a
comma instead of &lt;g4&gt;|&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T143018Z" creationid="tlqk3" creationdate="20220526T143018Z">
        <seg>또 우리는 &lt;g4&gt;|&lt;/g4&gt; 대신 콤마를 사용해 생성자를 나눌 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can also use the projection notation:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T175615Z" creationid="tlqk35" creationdate="20220321T175615Z">
        <seg>또 우리는 투영 기호(인덱싱 기호)를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can also use the type &lt;g1&gt;Option α&lt;/g1&gt; to simulate incomplete patterns.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165857Z" creationid="tlqk3" creationdate="20220529T165857Z">
        <seg>우리는 불완전한 패턴을 모사하려고 &lt;g1&gt;Option α&lt;/g1&gt;형을 사용할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can also use this device in function
definitions:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153258Z" creationid="tlqk35" creationdate="20220321T153258Z">
        <seg>우리는 함수 정의에서도 이 기능을 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can annotate the types used in the match
for greater clarity:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071622Z" creationid="tlqk35" creationdate="20220321T182644Z">
        <seg>명확성을 위해 match 속에서 사용되는 항의 유형을 주석으로 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can declare one
explicitly:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180201Z" creationid="tlqk3" creationdate="20220604T180201Z">
        <seg>여러분은 명시적으로 이를 선언할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can define functions from &lt;g1&gt;Weekday&lt;/g1&gt; to &lt;g2&gt;Weekday&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151200Z" creationid="tlqk3" creationdate="20220526T151200Z">
        <seg>우리는 &lt;g1&gt;Weekday&lt;/g1&gt;에서 &lt;g2&gt;Weekday&lt;/g2&gt;까지 함수를 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can easily prove that &lt;g1&gt;{a₁, a₂} = {a₂, a₁}&lt;/g1&gt; using &lt;g2&gt;quot.sound&lt;/g2&gt;,
since we have &lt;g3&gt;(a₁, a₂) ~ (a₂, a₁)&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T180704Z" creationid="tlqk3" creationdate="20220610T180704Z">
        <seg>&lt;g3&gt;(a₁, a₂) ~ (a₂, a₁)&lt;/g3&gt;를 갖기 때문에 &lt;g2&gt;quot.sound&lt;/g2&gt;을 사용해 &lt;g1&gt;{a₁, a₂} = {a₂, a₁}&lt;/g1&gt;을 쉽게 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can even use the match statement to decompose the conjunction at the same time:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T092734Z" creationid="tlqk35" creationdate="20220321T182705Z">
        <seg>게다가 match 구문은 논리곱을 분해하는 데에도 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can make the output easier to read by telling Lean not to insert
the implicit arguments (which are displayed here as metavariables).</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T081436Z" creationid="tlqk35" creationdate="20220321T175534Z">
        <seg>우리는 린에게 암시적인 인수를 삽입하지 말라 함으로써 출력을 더 쉽게 읽어들이도록 만들 수 있습니다.(메타변수로서 나타난 인수입니다.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can now prove &lt;g1&gt;p ∧ q → q ∧ p&lt;/g1&gt; with the following proof term.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T124838Z" creationid="tlqk35" creationdate="20220321T162843Z">
        <seg>이제 &lt;g1&gt;p ∧ q → q ∧ p&lt;/g1&gt;를 다음 증명 항으로 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can now use this theorem to prove new results:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171620Z" creationid="tlqk35" creationdate="20220524T164538Z">
        <seg>우리는 이 정리로 새로운 결과를 증명하는데 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can prevent the shorter alias from being created by using the &lt;g1&gt;protected&lt;/g1&gt; keyword:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180742Z" creationid="tlqk35" creationdate="20220524T180742Z">
        <seg>우리느 더 짤은 별명이 생기는 것을 &lt;g1&gt;protected&lt;/g1&gt;  키워드를 사용하여 막을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can prove these three facts in a convenient and
readable way by using dependent pattern matching to perform
case-analysis and break the hypotheses into pieces that are then
reassembled to produce the conclusion.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T180032Z" creationid="tlqk3" creationdate="20220610T180032Z">
        <seg>종속 패턴 매칭를 사용하여 사례 분석을 수행하고 가정을 여러 부분으로 나눈 다음 재조합하여 결론을 도출함으로써 이 세 가지 사실을 편리하고 가독성 있는 방식으로 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can read
this as the assertion "for every pair of propositions &lt;g3&gt;p q&lt;/g3&gt;, we have
&lt;g4&gt;p → q → p&lt;/g4&gt;." For example, we can move all parameters to the right
of the colon:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T121648Z" creationid="tlqk35" creationdate="20220321T161457Z">
        <seg>우리는 이를 "모든 명제쌍  &lt;g3&gt;p q&lt;/g3&gt;에 대해 &lt;g4&gt;p → q → p&lt;/g4&gt;이다."라고 주장한다고 읽을 수 있습니다. 예를 들어, 우리는 모든 매개변수들을 콜론의 오른쪽으로 옮길 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can refer to the last
expression introduced in this way using the keyword &lt;g1&gt;this&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183322Z" creationid="tlqk35" creationdate="20220321T183322Z">
        <seg>이렇게 도입된 마지막 표현식을 키워드 &lt;g1&gt; this&lt;/g1&gt;를 사용하여 참조할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can simulate
the arbitrary value approach using the &lt;g2&gt;Inhabited&lt;/g2&gt; type
class.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165405Z" creationid="tlqk3" creationdate="20220529T165405Z">
        <seg>우리는 &lt;g2&gt;Inhabited&lt;/g2&gt; 유형 클래스를 사용하여 임의값 접근법을 모사할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can then define any function &lt;g6&gt;f&lt;/g6&gt; with an "inverse"
which takes anything in the image of &lt;g7&gt;f&lt;/g7&gt; to an element that is
mapped to it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T144753Z" creationid="tlqk3" creationdate="20220604T144753Z">
        <seg>그런 다음 &lt;g7&gt;f&lt;/g7&gt;의 이미지에서 매핑된 요소로 가져오는 "역"함수가 있는 임의의 함수 &lt;g6&gt;f&lt;/g6&gt;를 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can then proceed to define the empty set and set intersection, for
example, and prove set identities:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T174728Z" creationid="tlqk3" creationdate="20220605T174728Z">
        <seg>그런 뒤 공집합과 교집합을 정의하고 집합 항등식을 증명해 나갈 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can then use a mutual recursive definition to count the number of constants occurring in a term, as well as the number occurring in a list of terms.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175133Z" creationid="tlqk3" creationdate="20220603T175133Z">
        <seg>그럼 우리는 상호적으로 재귀적인 정의를 항의 리스트에서 나타나는 수 뿐만 아니라 항 속의 상수의 수를 세는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can therefore
rewrite the sample proof above conveniently as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T133255Z" creationid="tlqk35" creationdate="20220321T163453Z">
        <seg>그러므로 다음과 같이 위의 증명 예시를 편리하게 다시 작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can use an element &lt;g2&gt;h : Eq a b&lt;/g2&gt; to cast an element
&lt;g3&gt;t' : p a&lt;/g3&gt; to &lt;g4&gt;p b&lt;/g4&gt; even when &lt;g5&gt;p a&lt;/g5&gt; and &lt;g6&gt;p b&lt;/g6&gt; are arbitrary types,
because the cast does not produce new data; it only reinterprets the
data we already have.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T164229Z" creationid="tlqk35" creationdate="20220528T164229Z">
        <seg>우리는 원소 &lt;g2&gt;h : Eq a b&lt;/g2&gt;를 심지어 &lt;g5&gt;p a&lt;/g5&gt;과 &lt;g6&gt;p b&lt;/g6&gt;가 임의의 유형일 때에도 원소 &lt;g3&gt;t' : p a&lt;/g3&gt;에서 &lt;g4&gt;p b&lt;/g4&gt;로 변환하는데 사용할 수 있습니다. 왜냐하면 변환은 새로운 데이터를 만들지 않고 이미 가진 데이터를 재해석하기만 하기 때문입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can use the
generic theorems &lt;g12&gt;Setoid.refl&lt;/g12&gt;, &lt;g13&gt;Setoid.symm&lt;/g13&gt;, &lt;g14&gt;Setoid.trans&lt;/g14&gt; to
reason about the relation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T175037Z" creationid="tlqk3" creationdate="20220610T175037Z">
        <seg>일반 정리 &lt;g12&gt;Setoid.refl&lt;/g12&gt;, &lt;g13&gt;Setoid.symm&lt;/g13&gt;, &lt;g14&gt;Setoid.trans&lt;/g14&gt;를 사용하여 관계를 추론할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can use the anonymous constructor notation &lt;g1&gt;⟨t, h⟩&lt;/g1&gt; for
&lt;g2&gt;Exists.intro t h&lt;/g2&gt;, when the type is clear from the context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T090210Z" creationid="tlqk35" creationdate="20220321T180943Z">
        <seg>맥락으로부터 유형이 명백한 경우 익명 생성자 기호 &lt;g1&gt;⟨t, h⟩&lt;/g1&gt;을 &lt;g2&gt;Exists.intro t h&lt;/g2&gt; 대신 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can use the anonymous constructor notation to construct a proof of
&lt;g1&gt;p ↔ q&lt;/g1&gt; from proofs of the forward and backward directions, and we
can also use &lt;g2&gt;.&lt;/g2&gt; notation with &lt;g3&gt;mp&lt;/g3&gt; and &lt;g4&gt;mpr&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T160344Z" creationid="tlqk35" creationdate="20220321T164841Z">
        <seg>우리는 앞과 뒷방향 증명으로부터 &lt;g1&gt;p ↔ q&lt;/g1&gt;의 증명을 구성하는 익명 생성자 표기를 사용할 수 있습니다. 그리고 우리는 &lt;g2&gt;.&lt;/g2&gt;와 함께 쓴 &lt;g3&gt;mp&lt;/g3&gt;과 &lt;g4&gt;mpr&lt;/g4&gt;을 사용한 표기를 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can use this to
define the two projections for &lt;g8&gt;Prod&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T153257Z" creationid="tlqk3" creationdate="20220526T153257Z">
        <seg>우리는 이것을 &lt;g8&gt;Prod&lt;/g8&gt;에 대한 두 투영(projection)이라고 정의하는데 사용할 수있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can view &lt;g1&gt;Exists.intro&lt;/g1&gt; as an information-hiding operation, since
it hides the witness to the body of the assertion.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T070632Z" creationid="tlqk35" creationdate="20220321T181200Z">
        <seg>&lt;g1&gt;Exists.intro&lt;/g1&gt;는 주장의 몸체의 발견을 감추므로 정보 감추기 연산으로 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We close this section with one last tactic that is designed to
facilitate working with inductive types, namely, the &lt;g1&gt;injection&lt;/g1&gt;
tactic.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172649Z" creationid="tlqk3" creationdate="20220527T172649Z">
        <seg> 귀납형과 동작하는 걸 가능하도록 설계된 즉, &lt;g1&gt;injection&lt;/g1&gt; 전략으로 우리는 이 장을 이 마지막을 마칩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We close this section with some hints as to why the quotient
construction implies function extenionality.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T181939Z" creationid="tlqk3" creationdate="20220610T181939Z">
        <seg>몫 구성이 함수 확장성을 의미하는 이유에 대한 몇 가지 힌트로 이 섹션을 마무리합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We could implement &lt;g4&gt;double&lt;/g4&gt; by</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153337Z" creationid="tlqk3" creationdate="20220604T153337Z">
        <seg>우리는 &lt;g4&gt;double&lt;/g4&gt;을 아래와 같이 구현할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We could render this as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T103624Z" creationid="tlqk35" creationdate="20220321T155138Z">
        <seg>이를 다음과 같이 유도할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We could represent this as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T155008Z" creationid="tlqk35" creationdate="20220321T155008Z">
        <seg>이를 다음과 같이 나타낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We could then introduce, for each element &lt;g1&gt;p : Prop&lt;/g1&gt;, another type
&lt;g2&gt;Proof p&lt;/g2&gt;, for the type of proofs of &lt;g3&gt;p&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T102820Z" creationid="tlqk35" creationdate="20220321T154913Z">
        <seg>그뒤 각 원소 &lt;g1&gt;p : Prop&lt;/g1&gt;에 대해 또 다른 유형인 &lt;g2&gt;Proof p&lt;/g2&gt;을 &lt;g3&gt;p&lt;/g3&gt;의 증명 유형으로 도입할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We describe some of them here.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T163709Z" creationid="tlqk3" creationdate="20220527T163709Z">
        <seg>여기서 우리는 이들 중 몇 가지를 설명합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We encourage you to try it, using &lt;g3&gt;recOn&lt;/g3&gt;,
&lt;g4&gt;casesOn&lt;/g4&gt; and &lt;g5&gt;noConfusion&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T184219Z" creationid="tlqk3" creationdate="20220603T184219Z">
        <seg>우리는 여러분이 이를 &lt;g3&gt;recOn&lt;/g3&gt;, &lt;g4&gt;casesOn&lt;/g4&gt;과 &lt;g5&gt;noConfusion&lt;/g5&gt;을 사용해 시도해보길 권합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We first observe that it
would be easy to implement an ad-hoc polymorphic function (such as addition) if the
function simply took the type-specific implementation of addition as an argument
and then called that implementation on the remaining arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T153106Z" creationid="tlqk3" creationdate="20220604T153106Z">
        <seg>우리는 먼저 함수가 단순히 덧셈의 특정 유형에 대한 구현을 덧셈의 인수로 취한 다음 나머지 인수에 대해 그 구현을 호출하면 임시 다형적 함수(덧셈 같은)를 구현하는 것이 쉽다는 것을 관찰했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have
chosen a nontraditional name here only to avoid a clash of names.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153335Z" creationid="tlqk35" creationdate="20220321T153335Z">
        <seg>우리는 여기서 이름의 충돌을 방지하기 위해 비관습적인 이름을 선택할 뿐이었습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have already discussed the dependent product type &lt;g1&gt;Sigma&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T145925Z" creationid="tlqk3" creationdate="20220527T145925Z">
        <seg>우리는 이미 의존 곱 유형 &lt;g1&gt;Sigma&lt;/g1&gt;에 대해 얘기했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have already seen singleton elimination at play in applications of
&lt;g1&gt;Eq.rec&lt;/g1&gt;, the eliminator for the inductively defined equality
type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T164009Z" creationid="tlqk35" creationdate="20220528T164009Z">
        <seg>우리는 재귀적으로 정의된 동등 유형에 대한 제거자인&lt;g1&gt;Eq.rec&lt;/g1&gt;의 활용에서 한번에 하나씩 제거되는 것을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have been using constructors to create elements of a structure
type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T181910Z" creationid="tlqk35" creationdate="20220528T181910Z">
        <seg>우리는 구조체 형의 원소를 생성하는데 생성자를 사용했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have described inductive types and their syntax through
examples.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152151Z" creationid="tlqk35" creationdate="20220528T155146Z">
        <seg>우리는 귀납형과 그들의 문법을 예제를 통해 설명했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have seen that Lean's formal foundation includes basic types,
&lt;g1&gt;Prop, Type 0, Type 1, Type 2, ...&lt;/g1&gt;, and allows for the formation of
dependent function types, &lt;g2&gt;(x : α) → β&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T141800Z" creationid="tlqk3" creationdate="20220526T141800Z">
        <seg>우리는 린의 형식적인 기초가 기본형 &lt;g1&gt;Prop, Type 0, Type 1, Type 2, ...&lt;/g1&gt;을 포합하고 의존 함수형 &lt;g2&gt;(x : α) → β&lt;/g2&gt;의 형성을 가능하게 함을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have seen that Lean's foundational system includes inductive
types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152418Z" creationid="tlqk35" creationdate="20220528T172149Z">
        <seg>우리는 귀납형을 포함해 린의 기초적인 체계를 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have seen that keywords like &lt;g1&gt;fun&lt;/g1&gt;, &lt;g2&gt;have&lt;/g2&gt;, and &lt;g3&gt;show&lt;/g3&gt; make
it possible to write formal proof terms that mirror the structure of
informal mathematical proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T073051Z" creationid="tlqk35" creationdate="20220321T183255Z">
        <seg>우리는 &lt;g1&gt;fun&lt;/g1&gt;과 &lt;g2&gt;have&lt;/g2&gt;,&lt;g3&gt;show&lt;/g3&gt;와 같은 키워드가 비형식적인 수학 증명의 구조를 반영하는 형식 증명 항을 작성할 수 있게 함을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have seen that the &lt;g1&gt;casesOn&lt;/g1&gt; recursor can
be used to define functions and prove theorems by cases, according to
the constructors involved in an inductively defined type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T160841Z" creationid="tlqk3" creationdate="20220529T160841Z">
        <seg>재귀적으로 정의된 유형에 연관된 생성자를 따라 우리는 &lt;g1&gt;casesOn&lt;/g1&gt; 재귀자가 함수를 정의하고 경우를 나눠 정리를 증명하는데 사용될 수 있음을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have seen that the constructor to an inductive type takes
&lt;g1&gt;parameters&lt;/g1&gt; --- intuitively, the arguments that remain fixed
throughout the inductive construction --- and &lt;g2&gt;indices&lt;/g2&gt;, the arguments
parameterizing the family of types that is simultaneously under
construction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152158Z" creationid="tlqk35" creationdate="20220528T155749Z">
        <seg>우리는 귀납형에서 생성자는 &lt;g1&gt;매개변수(parameters)&lt;/g1&gt;-- 직관적으로 재귀 생성 동안 고정된 상태로 남는 인수 --와 동시에 생성중인 유형의 군을 매개변수화하는 인수 &lt;g2&gt;indices&lt;/g2&gt;를 받는 것을 보았습니다.  </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have seen that the version of the Calculus of Constructions that
has been implemented in Lean includes dependent function types,
inductive types, and a hierarchy of universes that starts with an
impredicative, proof-irrelevant &lt;g1&gt;Prop&lt;/g1&gt; at the bottom.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T160450Z" creationid="tlqk3" creationdate="20220605T160450Z">
        <seg>우리는 린에 구현된 직관주의적 계산의 버전이 의존 함수 유형, 귀납형, 맨 바닥에 증명과 무관한 &lt;g1&gt;Prop&lt;/g1&gt;과 비서술어를 갖는 유형세계 계층을 포함한 것을 봤습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have to
provide the equation compiler with evidence that the recursive call is
decreasing, which we do here with a &lt;g1&gt;sorry&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T172727Z" creationid="tlqk3" creationdate="20220603T172727Z">
        <seg>우리는 방정식 컴파일러에게 재귀호출이 감소한다는 증거를 주어야 합니다. 여기서 우리는 &lt;g1&gt;sorry&lt;/g1&gt;로 했습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have used &lt;g1&gt;.&lt;/g1&gt; to create nested tactic blocks.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T144734Z" creationid="tlqk35" creationdate="20220524T144734Z">
        <seg>우리는 중첩된 전략 블럭을 만드는데 &lt;g1&gt;.&lt;/g1&gt;를 사용해왔습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We have, moreover, noted that it is a remarkable fact that it
is possible to construct a substantial edifice of mathematics based on
nothing more than the type universes, dependent arrow types, and inductive types;
everything else follows from those.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152423Z" creationid="tlqk35" creationdate="20220528T172353Z">
        <seg>게다가 우리는 유형 세계, 의존 화살표 유형, 귀납형과 이들로부터 따라나온 모든 것 외에는 기반하지 않는 수학의 엄청난 구조물을 세울 수 있는 가능성을 발견한 사실은 주목할만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We need to use the fact that the inductive type is generated by these constructors to know that the zero is not odd, and that the latter two implications reverse.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T174723Z" creationid="tlqk3" creationdate="20220603T174723Z">
        <seg>우리는 귀납형이 0은 홀수가 아니다는 것, 그리고 후자는 두 함의의 역이라는 것이 생성자들에 의해 만들어졌다는 사실을 이용할 필요가 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We now consider two generalizations of inductive types that are often
useful, which Lean supports by "compiling" them down to the more
primitive kinds of inductive types described above.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152323Z" creationid="tlqk35" creationdate="20220528T164633Z">
        <seg>이제 우리는 귀납형의 종종 유용한 두 가지 일반화를 고려했습니다. 린은 이들을 위에서 설명한 유도형의 더 기초적인 종류로 "컴파일"해나감으로써 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We often need an arbitrary element of a given type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T155151Z" creationid="tlqk3" creationdate="20220604T155151Z">
        <seg>우린 종종 주어진 유형의 임의의 원소를 필요로 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We often put the &lt;g1&gt;by&lt;/g1&gt; keyword on the preceding line, and write the
example above as</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184607Z" creationid="tlqk35" creationdate="20220321T184607Z">
        <seg>우리는 종종 &lt;g1&gt;by&lt;/g1&gt; 키워드를 앞줄에 놓고 위의 예를 다음과 같이 작성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We recommend running the examples and experimenting with the code on your own as you work through the chapters
that follow.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134950Z" creationid="tlqk35" creationdate="20220321T134950Z">
        <seg>우리는 여러분이 장을 따라 공부하면서 스스로 예제를 실행해보고 코드를 실험해보는 것을 추천합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We recommend skimming this section to get a sense of Lean's
features, and then returning to it as necessary.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173334Z" creationid="tlqk35" creationdate="20220524T173334Z">
        <seg>우리는 린의 특징에 대한 감을 얻도록 건너뛰고 읽어보는 것을 추천합니다. 그리고 필요하다면 다시 여기로 돌아오세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We recommend you only use this command to diagnose problems.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170630Z" creationid="tlqk3" creationdate="20220604T170630Z">
        <seg>우리는 이 명령을 여러분이 문제를 진단하는 데에만 사용하는 것을 권장합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We saw in &lt;g3&gt;Namespaces&lt;/g3&gt; that Lean provides
mechanisms for working with hierarchical names.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T175653Z" creationid="tlqk35" creationdate="20220524T175653Z">
        <seg>우리는 &lt;g3&gt;Namespaces&lt;/g3&gt;에서 린이 계층적인 이름으로 작업하는 메커니즘을 제공하는 것을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We say
it is "focusing" on the selected goal.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T061457Z" creationid="tlqk35" creationdate="20220522T061457Z">
        <seg>우리는 이를 선택한 목표에 "초점을 맞췄다"고 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We say the numerals &lt;g5&gt;2&lt;/g5&gt; occurring in the elaborated terms are &lt;g6&gt;raw&lt;/g6&gt; natural numbers.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162750Z" creationid="tlqk3" creationdate="20220604T162750Z">
        <seg>동화된 항에서 나타나는 수치값 &lt;g5&gt;2&lt;/g5&gt;가 &lt;g6&gt;생&lt;/g6&gt; 자연수라고 말합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We start with &lt;g1&gt;zero : Nat&lt;/g1&gt;; it takes
no arguments, so we have it from the start.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T154138Z" creationid="tlqk3" creationdate="20220527T154138Z">
        <seg>&lt;g1&gt;zero : Nat&lt;/g1&gt;으로 시작합니다. 이것은 아무 인수를 받지 않습니다. 그래서 우리는 시작부터 이것을 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We use this instance to justify
the if-then-else expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T191502Z" creationid="tlqk3" creationdate="20220610T191502Z">
        <seg>이 개체를 사용하여 if-then-else 표현식을 정당화합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will also
consider slight generalizations of the scheme above, to mutually
defined inductive types, and so-called &lt;g1&gt;inductive families&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151825Z" creationid="tlqk3" creationdate="20220526T143938Z">
        <seg>우리는 귀납형과 일명 귀납군을 동시에 정의하도록 위의 계획의 약간의 일반화를 고려할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will describe proofs that consist of sequences of tactics as
"tactic-style" proofs, to contrast with the ways of writing proof
terms we have seen so far, which we will call "term-style"
proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T082645Z" creationid="tlqk35" creationdate="20220321T184316Z">
        <seg>우리는 전략의 연쇄로 이뤄진 증명을 "전략 스타일" 증명으로 설명할 것이고, 우리가 이제까지 보았던 증명 항를 작성하는 방법을 "항 스타일" 증명이라고 하는 것과 대조할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will discuss variations of &lt;g1&gt;rw&lt;/g1&gt; and &lt;g2&gt;simp&lt;/g2&gt; in the next chapter.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072141Z" creationid="tlqk35" creationdate="20220321T180620Z">
        <seg>다음 장에서 &lt;g1&gt;rw&lt;/g1&gt;와 &lt;g2&gt;simp&lt;/g2&gt;의 변형을 다룰 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will explain how the &lt;g1&gt;instance&lt;/g1&gt; command works in
&lt;g2&gt;Chapter Type Classes&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160708Z" creationid="tlqk3" creationdate="20220527T160708Z">
        <seg>&lt;g2&gt;유형 클래스 장&lt;/g2&gt;에서 &lt;g1&gt;instance&lt;/g1&gt; 명령이 어떻게 동작하는지 설명할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will fill this gap in the next
chapter, which introduces the notion of an &lt;g1&gt;inductive data type&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T172929Z" creationid="tlqk35" creationdate="20220524T172929Z">
        <seg>우리는 다음 장에서 &lt;g1&gt;inductive data type&lt;/g1&gt;의 개념을 도입하여 이 간극을 메울 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will learn about writing such macros below.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T122426Z" creationid="tlqk3" creationdate="20220526T122426Z">
        <seg>우리는 아래에서 그런 매크로를 쓰는 법에 대해 배울 예정입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will learn more about the &lt;g2&gt;assumption&lt;/g2&gt; tactic in the
next chapter.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T073846Z" creationid="tlqk35" creationdate="20220321T183427Z">
        <seg>다음 장에서 &lt;g2&gt;assumption&lt;/g2&gt; 전략에 대해 더 배웁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will provide a number of examples of inductive types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151807Z" creationid="tlqk3" creationdate="20220526T143616Z">
        <seg>우리는 다수의 귀납형의 예제를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will see
below that using these theorems can block evaluation in Lean's kernel,
so that closed terms of type &lt;g1&gt;Nat&lt;/g1&gt; no longer evaluate to numerals.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T161847Z" creationid="tlqk3" creationdate="20220605T161847Z">
        <seg>우리는 아래에서 이 정리들을 사용하여 린의 커널의 평가를 차단해 &lt;g1&gt;Nat&lt;/g1&gt;형의 닫힌 항이 더 이상 수치값으로 평가되지 않게 함을 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will see below that the arguments of the constructors can include
objects of type &lt;g1&gt;Foo&lt;/g1&gt;, subject to a certain "positivity" constraint,
which guarantees that elements of &lt;g2&gt;Foo&lt;/g2&gt; are built from the bottom
up.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T143354Z" creationid="tlqk3" creationdate="20220526T143354Z">
        <seg>우리는 아래에서 생성자의 인자가 &lt;g1&gt;Foo&lt;/g1&gt; 형의 대상을 특정 &lt;g2&gt;Foo&lt;/g2&gt;의 원소가 상향식으로 만들어졌음을 보장하는 "긍정성" 제약을 조건으로 하여 포함할 수 있음을 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will see in &lt;g1&gt;Chapter Induction and Recursion&lt;/g1&gt; that all these variations are
instances of a more general pattern-matching construct.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T071958Z" creationid="tlqk35" creationdate="20220321T182909Z">
        <seg> &lt;g1&gt;귀납과 재귀 장&lt;/g1&gt;에서 이들 모두가 더 일반적인 패턴-매칭 생성 인스턴스들의 변형임을 볼 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will see in &lt;g1&gt;Chapter Structures and Records&lt;/g1&gt; that certain
types in Lean are &lt;g2&gt;structures&lt;/g2&gt;, which is to say, the type is defined
with a single canonical &lt;g3&gt;constructor&lt;/g3&gt; which builds an element of the
type from a sequence of suitable arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T125446Z" creationid="tlqk35" creationdate="20220321T163058Z">
        <seg>&lt;g1&gt;구조체와 레코드 장&lt;/g1&gt;에서 보겠지만 린의 어떤 유형은 &lt;g2&gt;구조체&lt;/g2&gt;입니다. 구조체는 그 유형이 적절한 인수의 배열로부터 유형의 원소를 만드는 정식 &lt;g3&gt;생성자&lt;/g3&gt; 한 개로 정의된다는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will see in &lt;g6&gt;Chapter Inductive Types&lt;/g6&gt;
and &lt;g7&gt;Chapter Structures and Records&lt;/g7&gt;
that defining structures and inductive data types in Lean generates
associated operations, and these are stored in
a namespace with the same name as the type under definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T132747Z" creationid="tlqk3" creationdate="20220526T132747Z">
        <seg>우리는 &lt;g6&gt;Chapter Inductive Types&lt;/g6&gt;와  &lt;g7&gt;Chapter Structures and Records&lt;/g7&gt;에서 린에서 구조체와 유도 데이터 형을 정의하는 것은 연관된 연산을 생성함을 볼 예정입니다. 그리고 이들은 정의에 대해 유형으로써 같은 이름으로 이름공간에 저장됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will see later that there &lt;g1&gt;are&lt;/g1&gt; situations in constructive logic
where principles like excluded middle and double-negation elimination
are permissible, and Lean supports the use of classical reasoning in
such contexts without relying on excluded middle.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T164136Z" creationid="tlqk35" creationdate="20220321T170037Z">
        <seg>우리는 나중에 &lt;g1&gt;배중률과 이중 부정 제거와 같은 원칙이 허용되는 구성주의적 논리 &lt;/g1&gt; 상황이 있음을 나중에 보게 될 것입니다. 그리고 린은 그런 맥락에서 배중률에 의존하지 않는 고전적 추론의 사용을 지원합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will see more examples in &lt;g1&gt;Chapter Structures and Records&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T145843Z" creationid="tlqk3" creationdate="20220527T145843Z">
        <seg>우리는 &lt;g1&gt;구조체와 레코드 장&lt;/g1&gt;에서 더 많은 예제를 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will spell out the details more
precisely below.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T164201Z" creationid="tlqk3" creationdate="20220605T164201Z">
        <seg>아래에서 상세한 부분을 더 자세히 말할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will start with
some basic examples of inductive types, and work our way up to more
elaborate and complex examples.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151915Z" creationid="tlqk3" creationdate="20220526T145124Z">
        <seg>우리는 귀납형의 몇 가지 기본적인 예제로 시작할 것입니다. 그리고 우리의 작업을 더 정교하고 복잡한 예제로 옮겨갈 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We will use the &lt;g1&gt;match&lt;/g1&gt; expression to define a function from &lt;g2&gt;Weekday&lt;/g2&gt;
to the natural numbers:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T150404Z" creationid="tlqk3" creationdate="20220526T150404Z">
        <seg>우리는 &lt;g2&gt;Weekday&lt;/g2&gt;로부터 자연수로의 함수를 정의하는데 &lt;g1&gt;match&lt;/g1&gt; 표현식을 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Well-Founded Recursion and Induction</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173659Z" creationid="tlqk3" creationdate="20220529T173659Z">
        <seg>잘 세워진 재귀와 귀납</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What characterizes the examples we consider in this
section is that this is not the case: each constructor relies only on
previously specified types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T160541Z" creationid="tlqk3" creationdate="20220526T155755Z">
        <seg>예제를 특징짓는 것은 이 섹션에서 우리는 이 경우만이 아니라 각 생성자가 이전에 명시된 유형에만 의존한다는 점입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What follows are some common identities involving the existential
quantifier.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T072729Z" creationid="tlqk35" creationdate="20220321T183122Z">
        <seg>다음에 나오는 것은 존재 한정기호를 포함한 흔한 몇 개의 항등식입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What follows is an example
of an identity from propositional logic that we proved in a previous
chapter, now proved using tactics.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085818Z" creationid="tlqk35" creationdate="20220522T062113Z">
        <seg>다음은 이전 장에서 증명한 명제 논리의 항등식들 중 전략으로 증명해 볼 예제입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What makes dependent type theory dependent?</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150804Z" creationid="tlqk35" creationdate="20220321T150804Z">
        <seg>무엇이 의존 유형론을 의존적이게 만드는가?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What makes recursion and
induction possible is that they can also involve recursive calls to
&lt;g3&gt;foo&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T171946Z" creationid="tlqk3" creationdate="20220529T171946Z">
        <seg>재귀와 귀납을 가능하게 만드는 것은 이들이 &lt;g3&gt;foo&lt;/g3&gt;에 대한 재귀적인 호출을 포함할 수 있다는 점 입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What makes simple type theory powerful is that you can build new types
out of others.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135919Z" creationid="tlqk35" creationdate="20220321T135919Z">
        <seg>단순 유형론을 강력하게 만드는 것은 기본형 외의 여러분만의 새로운 유형을 만들 수 있다는 점입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What makes the &lt;g1&gt;Quot&lt;/g1&gt; construction into a bona fide quotient is the
following additional axiom:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183518Z" creationid="tlqk3" creationdate="20220605T183518Z">
        <seg>&lt;g1&gt;Quot&lt;/g1&gt; 생성을 진정한 몫으로 만드는 것은 다음과 같은 추가 공리입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What makes the equation compiler powerful is that it also supports
recursive definitions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170356Z" creationid="tlqk3" creationdate="20220529T170356Z">
        <seg>방정식 컴파일러를 강력하게 만드는 것은 재귀적인 정의를 지원한다는 점입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What makes this a mutual definition is that &lt;g1&gt;even&lt;/g1&gt; is defined recursively in terms of &lt;g2&gt;odd&lt;/g2&gt;, while &lt;g3&gt;odd&lt;/g3&gt; is defined recursively in terms of &lt;g4&gt;even&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173758Z" creationid="tlqk3" creationdate="20220603T173758Z">
        <seg>이를 상호적인 정의로 만드는 것은 &lt;g1&gt;even&lt;/g1&gt;이&lt;g2&gt;odd&lt;/g2&gt;에 대해 재귀적으로 정의되었고, 한편 &lt;g3&gt;odd&lt;/g3&gt;는 &lt;g4&gt;even&lt;/g4&gt;에 대해 재귀적으로 정의되었다는 점이다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What makes type class inference powerful is that one can &lt;g1&gt;chain&lt;/g1&gt; instances.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160923Z" creationid="tlqk3" creationdate="20220604T160923Z">
        <seg>유형 클래스 추론을 강력하게 만드는 것은 &lt;g1&gt;chain&lt;/g1&gt; 개체입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What type should &lt;g2&gt;cons&lt;/g2&gt; have?</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151029Z" creationid="tlqk35" creationdate="20220321T151029Z">
        <seg>&lt;g2&gt;cons&lt;/g2&gt;는 어떤 유형을 가져야 할까요?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When
Lean starts, it automatically imports the contents of the library
&lt;g1&gt;Init&lt;/g1&gt; folder, which includes a number of fundamental definitions
and constructions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T173833Z" creationid="tlqk35" creationdate="20220524T173833Z">
        <seg>린이 시작될 때, 이는 자동적으로 라이브러리 &lt;g1&gt;Init&lt;/g1&gt; 폴더의 내용을 불러옵니다.
여기에는 다수의 기초적인 정의와 구성이 포함되어 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When &lt;g7&gt;β&lt;/g7&gt; doesn't
depend on &lt;g8&gt;a&lt;/g8&gt;, &lt;g9&gt;(a : α) → β&lt;/g9&gt; is no different from the type
&lt;g10&gt;α → β&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152016Z" creationid="tlqk35" creationdate="20220321T152016Z">
        <seg> &lt;g7&gt;β&lt;/g7&gt;가  &lt;g8&gt;a&lt;/g8&gt;에 의존하지 않을 때, &lt;g9&gt;(a : α) → β&lt;/g9&gt;는 유형 &lt;g10&gt;α → β&lt;/g10&gt;유형과 다르지 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When Lean processes the header of a declaration,
any unbound identifier is automatically added as an implicit argument &lt;g3&gt;if&lt;/g3&gt; it is a single lower case or
greek letter.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134650Z" creationid="tlqk3" creationdate="20220526T134650Z">
        <seg>린이 선언의 헤더를 처리할 때 만약 이것이 한 글자의 소문자나 그리스 문자이면 임의의 구속되지 않은 식별자가 자동적으로 암시적인 매개변수로 추가됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a
function takes an argument that can generally be inferred from
context, Lean allows you to specify that this argument should, by
default, be left implicit.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T153145Z" creationid="tlqk35" creationdate="20220321T153145Z">
        <seg>함수가 일반적으로 맥락으로부터 추론할 수 있는 인수를 받을 때, Lean은 여러분이 이런 인수가 암시적이어야 함을 명시하도록 기본적으로 허용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When a type class has multiple parameters, you can mark some of them as output parameters.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163558Z" creationid="tlqk3" creationdate="20220604T163558Z">
        <seg>유형 클래스가 다수의 매개변수를 가질 때, 여러분은 출력 매개변수로 그들 중 몇을 표시할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When an instance is declared, it is
assigned a default priority value.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181626Z" creationid="tlqk3" creationdate="20220604T181626Z">
        <seg>개체가 선언되면 기본 우선 순위 값이 할당됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When combined with the &lt;g1&gt;auto bound implicits&lt;/g1&gt; feature, you can simplify
the declare further and write:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151419Z" creationid="tlqk3" creationdate="20220604T151419Z">
        <seg>&lt;g1&gt;암시적인 자동 결합(auto bound implicits)&lt;/g1&gt; 기능과 결합할 때 여러분은 선언을 더 단순화 해 작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When declared in this way, a variable stays in scope until the end of
the file you are working on.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150021Z" creationid="tlqk35" creationdate="20220321T150021Z">
        <seg>이 방식으로 선언되었을 때, 변수는 여러분이 작업하는 파일 끝까지를 범위로 가질 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When declaring an inductive datatype, you can use &lt;g1&gt;deriving Repr&lt;/g1&gt; to instruct
Lean to generate a fuction that converts &lt;g2&gt;Weekday&lt;/g2&gt; objects into text.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T150812Z" creationid="tlqk3" creationdate="20220526T150812Z">
        <seg>유도 데이터형을 선언할 때, 여러분은 린에게 &lt;g2&gt;Weekday&lt;/g2&gt;의 대상을 텍스트로 바꾸는 함수를 생성하라고 지시하도록 &lt;g1&gt;deriving Repr&lt;/g1&gt;을 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When implementing this
definition, the equation compiler starts with a case distinction as to
whether the first argument is &lt;g2&gt;0&lt;/g2&gt; or of the form &lt;g3&gt;n+1&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T145655Z" creationid="tlqk3" creationdate="20220604T145655Z">
        <seg>이 정의를 구현할 때 방정식 컴파일러는 첫 번째 인수가 &lt;g2&gt;0&lt;/g2&gt;이거나 &lt;g3&gt;n+1&lt;/g3&gt;의 꼴인지를 구분하도록 경우를 구분하는 것으로 시작합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the equation compiler encounters a recursive definition, it first
tries structural recursion, and only when that fails, does it fall
back on well-founded recursion.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171912Z" creationid="tlqk3" creationdate="20220603T171912Z">
        <seg>방정식 컴파일러가 재귀적 정의를 만날 때, 는 처음 구조적 재귀를 시도하고 그게 실패했을 때 잘 세워진 재귀로 대체됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the goal can be inferred, we can also ask Lean instead to fill in
the proof by writing &lt;g1&gt;by assumption&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T073605Z" creationid="tlqk35" creationdate="20220321T183356Z">
        <seg>목표가 추론될 수 있을 때, 우리는 &lt;g1&gt;by assumption&lt;/g1&gt;을 사용해 증명을 린이 대신 채워달라고 요청할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the inductive type is specified to land in &lt;g1&gt;Prop&lt;/g1&gt;, there are no
constraints on the universe levels of the constructor arguments.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152300Z" creationid="tlqk35" creationdate="20220528T162358Z">
        <seg>귀납형이 &lt;g1&gt;Prop&lt;/g1&gt;에서 머무른다고 명시되어 있을 때, 생성자 인수의 세계 수준에 대한 제한이 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the section is closed, the variables go out of scope, and cannot
be referenced any more.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150059Z" creationid="tlqk35" creationdate="20220321T150059Z">
        <seg>섹션이 닫히게 될 때, 변수들은 범위를 벗어나게 됩니다. 그리고 구분된 메모리 외에 아무것도 없게 됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the value of &lt;g3&gt;β&lt;/g3&gt; depends on &lt;g4&gt;a&lt;/g4&gt; (as does, for
example, the expression &lt;g5&gt;β a&lt;/g5&gt; in the previous paragraph),
&lt;g6&gt;(a : α) → β&lt;/g6&gt; denotes a dependent function type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T151941Z" creationid="tlqk35" creationdate="20220321T151941Z">
        <seg>&lt;g3&gt;β&lt;/g3&gt;의 값이 &lt;g4&gt;a&lt;/g4&gt;에 의존할 때(예를 들어 앞 단락에서 식 &lt;g5&gt;β a&lt;/g5&gt;처럼), &lt;g6&gt;(a : α) → β&lt;/g6&gt;는 의존적 함수 유형을 나타냅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When they don't, the latter is always
available as a backup.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173241Z" creationid="tlqk3" creationdate="20220603T173241Z">
        <seg>그들이 동작하지 않을 때 후자는 백업으로 항상 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When they work, they provide a
much more convenient way of defining functions than using
&lt;g1&gt;WellFounded.fix&lt;/g1&gt; manually.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173220Z" creationid="tlqk3" creationdate="20220603T173220Z">
        <seg>그들이 동작할 때, 그들은 수동적으로 &lt;g1&gt;WellFounded.fix&lt;/g1&gt;를 사용하는 것보다 함수를 정의하는 훨씬 더 편리한 방법을 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When we define a structure using this command, Lean
automatically generates all the projection functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173227Z" creationid="tlqk35" creationdate="20220528T173227Z">
        <seg>우리가 이 명령을 사용해 구조체를 정의할 때, 린은 자동적으로 모든 투영함수를 생성합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When we generalize &lt;g1&gt;t1&lt;/g1&gt; in such a way, we can then apply it to
different pairs of propositions, to obtain different instances of the
general theorem.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T122644Z" creationid="tlqk35" creationdate="20220321T161654Z">
        <seg>우리가 &lt;g1&gt;t1&lt;/g1&gt;을 이런 식으로 일반화한다면 우리는 일반적인 정리의 다른 사례를 얻기 위해 다른 명제 쌍을 이에 적용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When we instantiate &lt;g1&gt;trans_r&lt;/g1&gt; at
the values &lt;g2&gt;a b c&lt;/g2&gt;, we end up with a proof of &lt;g3&gt;r a b → r b c → r a c&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220812T065251Z" creationid="tlqk35" creationdate="20220321T174035Z">
        <seg>우리가 &lt;g1&gt;trans_r&lt;/g1&gt;을 값 &lt;g2&gt;a b c&lt;/g2&gt;로 인스턴스화할 때, 우리는 &lt;g3&gt;r a b → r b c → r a c&lt;/g3&gt;의 증명을 갖게됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When we open a namespace, an
identifier may be ambiguous.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180409Z" creationid="tlqk35" creationdate="20220524T180312Z">
        <seg>우리가 이름공간을 열때, 식별자는 모호하다고 할 지 모릅니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When writing programs or formalizing mathematics, it is not uncommon
to define structures containing many fields.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T173114Z" creationid="tlqk35" creationdate="20220528T173114Z">
        <seg>프로그램을 작성하거나 수학을 공식화할 때 만은 필드를 포함한 구조체를 정의하는 것은 흔합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When you declare that you are working in the namespace &lt;g1&gt;Foo&lt;/g1&gt;, every
identifier you declare has a full name with prefix "&lt;g2&gt;Foo.&lt;/g2&gt;".</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150245Z" creationid="tlqk35" creationdate="20220321T150245Z">
        <seg>이름공간 &lt;g1&gt;Foo&lt;/g1&gt;에서 작업한다고 여러분이 선언할 때 여러분이 선언한 모든 식별자들은 "&lt;g2&gt;Foo.&lt;/g2&gt;"를 접미사로 갖습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Whereas &lt;g1&gt;rewrite&lt;/g1&gt; is designed as a surgical tool for manipulating a
goal, the simplifier offers a more powerful form of automation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T120427Z" creationid="tlqk35" creationdate="20220524T160620Z">
        <seg>&lt;g1&gt;rewrite&lt;/g1&gt;는 목표를 조작하기 위한 외과 수술 도구로써 고안된 반면
단순화기는 자동화의 더욱 강력한 형태를 제공합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While introducing new notations is a relatively rare feature in
programming languages and sometimes even frowned upon because of its
potential to obscure code, it is an invaluable tool in formalization
for expressing established conventions and notations of the respective
field succinctly in code.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T120711Z" creationid="tlqk3" creationdate="20220526T120711Z">
        <seg>새로운 기호를 도입하는 것은 프로그래밍 언어에서 상대적으로 흔치 않은 특징이고 때떄로는 그것이 잠재적으로 코드를 모호하게 하여 종종 난처하게 함에도 이는 세워진 관행들과 각 분야의 기호를 코드에서 간결하게 표현하는 것에 대한 형식화에 있어서 귀중한 도구입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Wildcards and Overlapping Patterns</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T164617Z" creationid="tlqk3" creationdate="20220529T164617Z">
        <seg>와일드카드와 중복되는 패턴</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With &lt;g1&gt;calc&lt;/g1&gt;, we can write the proof in the last section in a more
natural and perspicuous way.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T065828Z" creationid="tlqk35" creationdate="20220321T180707Z">
        <seg>&lt;g1&gt;calc&lt;/g1&gt;로 우리는 지난 섹션의 증명을 더 자연스럽고 안목 있는 방식으로 작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With the analogy, however, the proof we have just constructed
is similar to a function that swaps the elements of a pair.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T125309Z" creationid="tlqk35" creationdate="20220321T163021Z">
        <seg>그래도 우리가 방금 구성한 증명은 순서쌍의 원소를 바꾸는 함수와 유사합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With the classical axioms, we can prove that every proposition is
decidable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173611Z" creationid="tlqk3" creationdate="20220604T173611Z">
        <seg>고전적 공리로 우리는 모든 명제가 결정 가능임을 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With the propositions as types correspondence, logical connectives are
also instances of inductive types, and so we tend to use dot notation
for them as well:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151740Z" creationid="tlqk3" creationdate="20220526T134037Z">
        <seg>유형으로써 명제 대응에서 논리 결합자도 귀납형의 개체들입니다. 그리고 그들에 대해서도 점 표기를 사용하는 경향이 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With the three identities mentioned above, this has the effect
that all the parentheses in an expression are associated to the right,
and the expressions are ordered in a canonical (though somewhat
arbitrary) way.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T122704Z" creationid="tlqk35" creationdate="20220524T162812Z">
        <seg>위에서 언급된 세 항등식들은 표현식 속 모든 괄호가 오른쪽으로 결합되는 
효과를 갖고 표현식들은 표준 방식(약간 임의적일지라도)으로 순서화됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With these tactics, an
example from the previous section can be rewritten as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T093911Z" creationid="tlqk35" creationdate="20220522T071358Z">
        <seg>이 전략으로 이전 섹션의 예제를 다음과 같이 재작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With this added to the earlier instance declarations, type class instance can infer, for example, a default element of &lt;g1&gt;Nat × Bool&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161419Z" creationid="tlqk3" creationdate="20220604T161419Z">
        <seg>더 이전에 개체 선언에 이것을 추가하여 유형 클래스 개체는 예를 들어 &lt;g1&gt;Nat × Bool&lt;/g1&gt;의 기본 원소를 추론할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With this annotation, the
expression &lt;g9&gt;f 7&lt;/g9&gt; would be parsed as is, whereas &lt;g10&gt;f 7 3&lt;/g10&gt; would be
parsed as &lt;g11&gt;f 7 _ 3&lt;/g11&gt;, just as it would be with the strong annotation.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T185631Z" creationid="tlqk3" creationdate="20220525T185631Z">
        <seg>이 주석으로 표현식 &lt;g9&gt;f 7&lt;/g9&gt;은 이대로 구문분석 될 수 있습니다. 반면 &lt;g10&gt;f 7 3&lt;/g10&gt;은 강한 주석을 쓸 때처럼 &lt;g11&gt;f 7 _ 3&lt;/g11&gt;으로 구문분석될 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With this definition, one can construct an element of &lt;g1&gt;Tree α&lt;/g1&gt; by
giving an element of &lt;g2&gt;α&lt;/g2&gt; together with a list of subtrees, possibly
empty.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T165745Z" creationid="tlqk35" creationdate="20220528T165745Z">
        <seg>이 정의를 갖고 대게는 빈 하위 트리의 리스트와 &lt;g2&gt;α&lt;/g2&gt;의 원소를 줌으로써 &lt;g1&gt;Tree α&lt;/g1&gt;의 원소를 생성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With this feature we can write &lt;g4&gt;compose&lt;/g4&gt; as</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134711Z" creationid="tlqk3" creationdate="20220526T134711Z">
        <seg>이 기능으로 우리는 &lt;g4&gt;compose&lt;/g4&gt;를 이와 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With this reduction, there are two ways that a computer can help establish a claim: it can help
find a proof in the first place, and it can help verify that a purported proof is correct.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T131244Z" creationid="tlqk35" creationdate="20220321T131244Z">
        <seg>이러한 축소로부터 컴퓨터가 진술을 만드는데 도움을 주는 두 가지 방법이 있습니다. 처음부터 증명을 찾는 걸 돕는 것과 다른 하나는 제시한 증명이 옳은지 식별하도록 돕게 하는 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Within
the namespace, you can refer to identifiers by their shorter names,
but once you end the namespace, you have to use the longer names.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150359Z" creationid="tlqk35" creationdate="20220321T150359Z">
        <seg>이름공간 안에서 여러분은 식별자들을 그들의 약식 이름으로 부를 수 있습니다. 그러나 한번 이름공간에 끝에 오면 여러분은 더 긴 이름을 사용해야만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Without classical logic, we cannot prove that every proposition is
decidable.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T172855Z" creationid="tlqk3" creationdate="20220604T172855Z">
        <seg>고전 논리가 없으면 우리는 모든 명제가 결정 가능임을 증명할 수 없습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Without the equation
compiler, we would need a lot of boilerplate code to define very
simple functions such as &lt;g5&gt;map&lt;/g5&gt;, &lt;g6&gt;zip&lt;/g6&gt;, and &lt;g7&gt;unzip&lt;/g7&gt; using
recursors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T175627Z" creationid="tlqk3" creationdate="20220603T175627Z">
        <seg>방정식 컴파일러가 없다면 우리는 &lt;g5&gt;map&lt;/g5&gt;, &lt;g6&gt;zip&lt;/g6&gt;과 &lt;g7&gt;unzip&lt;/g7&gt;같은 아주 단순한 함수를 재귀자를 사용해서 정의하려면 아주 많은 보일러 플레이트 코드가 필요할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Propositions as Types</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T160548Z" creationid="tlqk35" creationdate="20220321T160548Z">
        <seg>유형으로써 명제로 작업하기</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Write a function that evaluates such an expression, evaluating each &lt;g1&gt;var n&lt;/g1&gt; to &lt;g2&gt;v n&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180800Z" creationid="tlqk3" creationdate="20220603T180800Z">
        <seg>각 &lt;g1&gt;var n&lt;/g1&gt;을 &lt;g2&gt;v n&lt;/g2&gt;으로 계산하는 표현식을 계산하는 함수를 작성하세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing &lt;g1&gt;suffices hq : q&lt;/g1&gt; leaves us with two goals.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T162012Z" creationid="tlqk35" creationdate="20220321T165549Z">
        <seg>&lt;g1&gt;suffices hq : q&lt;/g1&gt;을 쓰는 것은 두 목표를 남깁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing &lt;g3&gt;simp only&lt;/g3&gt; excludes these defaults,
allowing you to use a more explicitly crafted list of
rules.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T130347Z" creationid="tlqk35" creationdate="20220524T170248Z">
        <seg>&lt;g3&gt;simp only&lt;/g3&gt;를 쓰는 것은 이런 기본 설정을 배제하여 
더 명시적으로 규칙 리스트를 만들어 쓸 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Yet again, the proofs can be compressed:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T164153Z" creationid="tlqk3" creationdate="20220527T162643Z">
        <seg>그러나 다시 이 증명은 간단히 될 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You
can then invoke this function using:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143957Z" creationid="tlqk35" creationdate="20220321T143957Z">
        <seg>여러분은 이 함수를 다음과 같이 불러낼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You
have already seen a nice example of this: the type &lt;g1&gt;List α&lt;/g1&gt; depends
on the argument &lt;g2&gt;α&lt;/g2&gt;, and this dependence is what distinguishes
&lt;g3&gt;List Nat&lt;/g3&gt; and &lt;g4&gt;List Bool&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150838Z" creationid="tlqk35" creationdate="20220321T150838Z">
        <seg>여러분은 이것에 대한 멋진 예제를 보았습니다. 유형  &lt;g1&gt;List α&lt;/g1&gt; 는 인수 &lt;g2&gt;α&lt;/g2&gt;에 의존합니다. 여기서  &lt;g3&gt;List Nat&lt;/g3&gt;과 &lt;g4&gt;List Bool&lt;/g4&gt;을 구분하는 것은 이 의존입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You
will see an example of this in a moment.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090254Z" creationid="tlqk35" creationdate="20220522T062806Z">
        <seg>여러분은 곧 이에 대한 예를 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are encouraged to experiment with similar examples in the exercises below.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T165407Z" creationid="tlqk3" creationdate="20220603T165407Z">
        <seg>여러분은 아래 연습에서 비슷한 예제로 실험해보길 권유합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You are now familiar with the fundamentals of dependent type theory,
both as a language for defining mathematical objects and a language
for constructing proofs.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T172752Z" creationid="tlqk35" creationdate="20220524T172752Z">
        <seg>정의한 수학적 대상과 증명을 만드는 언어 모두로써 여러분은 이제 기초적인 의존 유형론에 친숙합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can
achieve that by marking it as a simplification rule when the theorem
is defined:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T125050Z" creationid="tlqk35" creationdate="20220524T164802Z">
        <seg>정리가 정의되었을 때 이 정리를 단순화 규칙으로 
지정하여 이를 성취할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can
enter these particular ones with &lt;g13&gt;\a&lt;/g13&gt;, &lt;g14&gt;\b&lt;/g14&gt;, and &lt;g15&gt;\g&lt;/g15&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140633Z" creationid="tlqk35" creationdate="20220321T140633Z">
        <seg>여러분은 이들 중 특정한 것은 &lt;g13&gt;\a&lt;/g13&gt;, &lt;g14&gt;\b&lt;/g14&gt;과 &lt;g15&gt;\g&lt;/g15&gt;으로 입력할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can
then construct a proof by incrementally filling in these placeholders.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170510Z" creationid="tlqk35" creationdate="20220321T170510Z">
        <seg>그럼 여러분은 이 자리 차지자들을 점차 재우는 것으로 증명을 구성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can
use the command &lt;g1&gt;#eval&lt;/g1&gt; to execute expressions, and it is the
preferred way of testing your functions.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143808Z" creationid="tlqk35" creationdate="20220321T143808Z">
        <seg>여러분은 &lt;g1&gt;#eval&lt;/g1&gt; 명령을 사용해 식을 실행할 수 있습니다. 그리고 이것은 당신의 함수를 시험하는 선호되는 방식입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can "combine" &lt;g1&gt;intro h&lt;/g1&gt; with &lt;g2&gt;match h ...&lt;/g2&gt; and write the previous examples as follows</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104235Z" creationid="tlqk35" creationdate="20220524T142341Z">
        <seg>여러분은 &lt;g1&gt;intro h&lt;/g1&gt;를 &lt;g2&gt;match h ...&lt;/g2&gt;와 "합칠" 수 있고 이전 예제를 다음과 같이 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also avoid the parentheses around field
names if you add a line break between each field.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T174133Z" creationid="tlqk35" creationdate="20220528T174133Z">
        <seg>여러분이 각 필드 사이에 줄 바꿈 문자를 추가하면 여러분은 필드 이름 주위에 괄호를 쓰지 않을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also declare new constants for types:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141350Z" creationid="tlqk35" creationdate="20220321T141350Z">
        <seg>여러분은 유형들에 대해 새 상수를 선언할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also declare scoped instances in namespaces.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170759Z" creationid="tlqk3" creationdate="20220604T170759Z">
        <seg>여러분은 이름공간에서 범위가 지정된 개체를 선언할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also define &lt;g1&gt;subst&lt;/g1&gt; using &lt;g2&gt;match&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220528T154304Z" creationid="tlqk35" creationdate="20220528T154304Z">
        <seg>여러분도 &lt;g2&gt;match&lt;/g2&gt;을 사용해 &lt;g1&gt;subst&lt;/g1&gt;을 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also define a function that takes another function as input.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144405Z" creationid="tlqk35" creationdate="20220321T144405Z">
        <seg>여러분은 또 다른 함수를 입력으로 받는 함수를 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also introduce auxiliary recursive declarations using &lt;g1&gt;where&lt;/g1&gt; clause after your definition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182452Z" creationid="tlqk3" creationdate="20220603T182452Z">
        <seg>여러분도 부가적인 재귀 선언을 여러분의 정의 뒤에 &lt;g1&gt;where&lt;/g1&gt; 절을 사용해서 도입할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also limit the search using the following options:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180641Z" creationid="tlqk3" creationdate="20220604T180641Z">
        <seg>다음 옵션을 사용하여 검색을 제한할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also pass types as parameters:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143154Z" creationid="tlqk35" creationdate="20220321T143154Z">
        <seg>여러분은 매개변수로 유형도 전달할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also provide multiple alternatives like in the &lt;g1&gt;match&lt;/g1&gt; expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090129Z" creationid="tlqk35" creationdate="20220522T062637Z">
        <seg>여러분은 &lt;g1&gt;match&lt;/g1&gt; 표현식처럼 여러 가지 변형들을 제공할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also revert multiple elements of the context at once:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091416Z" creationid="tlqk35" creationdate="20220522T064409Z">
        <seg>또 맥락 속 다수의 요소들을 한 번에 되돌릴 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also temporarily disable an instance using the &lt;g1&gt;attribute&lt;/g1&gt; command
until the current &lt;g2&gt;section&lt;/g2&gt; or &lt;g3&gt;namespace&lt;/g3&gt; is closed, or until the end
of the current file.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T170531Z" creationid="tlqk3" creationdate="20220604T170531Z">
        <seg>여러분은 일시적으로 &lt;g1&gt;attribute&lt;/g1&gt; 명령으로 현재 닫힌 &lt;g2&gt;section&lt;/g2&gt;이나 &lt;g3&gt;namespace&lt;/g3&gt;까지 혹은 현재 파일의 끝까지 개체를 사용 해제 할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use &lt;g1&gt;cases&lt;/g1&gt; with an arbitrary expression.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T165651Z" creationid="tlqk3" creationdate="20220527T165651Z">
        <seg>여러분은 임의의 표현식에 &lt;g1&gt;cases&lt;/g1&gt;를 사용할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use &lt;g1&gt;let rec&lt;/g1&gt; in tactic mode and for creating proofs by induction.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T182401Z" creationid="tlqk3" creationdate="20220603T182401Z">
        <seg>여러분도 전략 모드에서 귀납법으로 증명을 만들 때에 &lt;g1&gt;let rec&lt;/g1&gt;을 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use &lt;g1&gt;match&lt;/g1&gt; in tactic blocks.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T104127Z" creationid="tlqk35" creationdate="20220524T142250Z">
        <seg>여러분은 전략 블록에서 &lt;g1&gt;match&lt;/g1&gt;를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use a (unstructured) &lt;g1&gt;cases&lt;/g1&gt; without the &lt;g2&gt;with&lt;/g2&gt; and a tactic
for each alternative.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092726Z" creationid="tlqk35" creationdate="20220522T070650Z">
        <seg>여러분은 (비구조화된)&lt;g1&gt;cases&lt;/g1&gt;를 &lt;g2&gt;with&lt;/g2&gt; 없이 각 대체표현된 전략에 대해 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the
ASCII alternative &lt;g5&gt;-&gt;&lt;/g5&gt;, so the expressions &lt;g6&gt;Nat -&gt; Nat&lt;/g6&gt; and &lt;g7&gt;Nat →
Nat&lt;/g7&gt; mean the same thing.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140458Z" creationid="tlqk35" creationdate="20220321T140458Z">
        <seg>여러분은 ASCII 대체 표현으로 &lt;g5&gt;-&gt;&lt;/g5&gt;을 사용할 수 있습니다. 그래서 표현식 &lt;g6&gt;Nat -&gt; Nat&lt;/g6&gt;과 &lt;g7&gt;Nat → Nat&lt;/g7&gt;은 같은 식을 의미합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the &lt;g1&gt;rename_i&lt;/g1&gt; tactic to rename the most recent inaccessible names in your context.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T090650Z" creationid="tlqk35" creationdate="20220522T063523Z">
        <seg>혹은 &lt;g1&gt;rename_i&lt;/g1&gt; 전략으로 맥락에서 가장 최근에 접근 불가한 이름을 다시 지을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the ascii equivalent, &lt;g5&gt;&lt;-&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T114529Z" creationid="tlqk35" creationdate="20220524T155130Z">
        <seg>이것과 동일한 아스키 문자 &lt;g5&gt;&lt;-&lt;/g5&gt;로도 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the auxiliary definition &lt;g1&gt;inferInstanceAs&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T180055Z" creationid="tlqk3" creationdate="20220604T180055Z">
        <seg>여러분은 부가 정의 &lt;g1&gt;inferInstanceAs&lt;/g1&gt;도 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also use the combinator &lt;g1&gt;tac1 &lt;;&gt; tac2&lt;/g1&gt; to apply &lt;g2&gt;tac2&lt;/g2&gt; to each
subgoal produced by tactic &lt;g3&gt;tac1&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T092903Z" creationid="tlqk35" creationdate="20220522T070932Z">
        <seg>또 여러분은 조합자  &lt;g1&gt;tac1 &lt;;&gt; tac2&lt;/g1&gt;를 &lt;g3&gt;tac1&lt;/g3&gt;을 사용해 생긴 각 하위 목표에
&lt;g2&gt;tac2&lt;/g2&gt;를 적용하는데 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can also write the example above using &lt;g1&gt;match&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T173558Z" creationid="tlqk3" creationdate="20220529T173558Z">
        <seg>여러분은 &lt;g1&gt;match&lt;/g1&gt;를 사용해 위의 예제를 쓸 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can assign other priorities
when defining an instance.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181650Z" creationid="tlqk3" creationdate="20220604T181650Z">
        <seg>개체를 정의할 때 다른 우선 순위를 할당할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can avoid the &lt;g1&gt;universe&lt;/g1&gt; command by providing the universe parameters when defining &lt;g2&gt;compose&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T134439Z" creationid="tlqk3" creationdate="20220526T134439Z">
        <seg>여러분은 &lt;g2&gt;compose&lt;/g2&gt;를 정의할 때 세계 매개변수를 제공하여 &lt;g1&gt;universe&lt;/g1&gt; 명령을 피할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can avoid the parentheses if you add a line break between each field.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T145600Z" creationid="tlqk3" creationdate="20220527T145600Z">
        <seg>여러분은 각 필드 사이에 줄바꿈 문자를 추가하면 괄호를 생략할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can avoid the universe command by providing the universe parameters when defining F.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142112Z" creationid="tlqk35" creationdate="20220321T142112Z">
        <seg>여러분은 F를 정의할 때 universe 매개변수를 제공하는 것으로 universe 명령을 쓰지 않을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can change the order that type classes instances are tried by
assigning them a &lt;g1&gt;priority&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T181553Z" creationid="tlqk3" creationdate="20220604T181553Z">
        <seg>유형 클래스 개체에 &lt;g1&gt;우선순위&lt;/g1&gt;를 할당하여 그들이 시도되는 순서를 변경할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check
that the &lt;g5&gt;Quot.ind&lt;/g5&gt; is satisfied if we take &lt;g6&gt;Quot r&lt;/g6&gt; to be simply
&lt;g7&gt;α&lt;/g7&gt;, and take &lt;g8&gt;Quot.lift&lt;/g8&gt; to be the identity function (ignoring
&lt;g9&gt;h&lt;/g9&gt;).</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T183256Z" creationid="tlqk3" creationdate="20220605T183256Z">
        <seg>&lt;g6&gt;Quot r&lt;/g6&gt;을 단순히 &lt;g7&gt;α&lt;/g7&gt;로 취하고 &lt;g8&gt;Quot.lift&lt;/g8&gt;을 항등함수로 취하면 (&lt;g9&gt;h&lt;/g9&gt; 무시) &lt;g5&gt;Quot.ind&lt;/g5&gt;가 만족되는지 확인할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can check that this definition of &lt;g1&gt;foo&lt;/g1&gt; satisfies the same
definitional identities as before.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T165148Z" creationid="tlqk3" creationdate="20220529T165148Z">
        <seg>여러분은 &lt;g1&gt;foo&lt;/g1&gt;의 정의가 이전처럼 같은 정의 항등식을 만족하는 것을 확인할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can combine multiple assignments by chaining &lt;g1&gt;let&lt;/g1&gt; statements:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144834Z" creationid="tlqk35" creationdate="20220321T144834Z">
        <seg>여러분은 다수의 할당을 &lt;g1&gt;let&lt;/g1&gt; 구문으로 연결함으로써 결합할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can combine the unstructured &lt;g1&gt;cases&lt;/g1&gt; tactic with the &lt;g2&gt;case&lt;/g2&gt; and &lt;g3&gt;.&lt;/g3&gt; notation.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T093013Z" creationid="tlqk35" creationdate="20220522T071028Z">
        <seg>여러분은 비구조화된 &lt;g1&gt;cases&lt;/g1&gt; 전략을  &lt;g2&gt;case&lt;/g2&gt;와 &lt;g3&gt;.&lt;/g3&gt; 기호로 결합할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can declare a subterm inaccessible by writing
&lt;g2&gt;.(t)&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T143857Z" creationid="tlqk3" creationdate="20220604T143857Z">
        <seg>여러분은 &lt;g2&gt;.(t)&lt;/g2&gt;와 같이 작성하여 접근불가한 부분항을 선언할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can declare variables of any type, not just &lt;g1&gt;Type&lt;/g1&gt; itself:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T145206Z" creationid="tlqk35" creationdate="20220321T145206Z">
        <seg>여러분은 &lt;g1&gt;Type&lt;/g1&gt; 그 자체뿐만 아니라 임의의 유형의 변수를 선언할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can define default instances with higher
priority to override the builtin ones.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T165720Z" creationid="tlqk3" creationdate="20220604T165720Z">
        <seg>여러분은 내장된 것보다 우세하여 더 높은 우선순위를 갖는 기본 개체를 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can define local recursive declarations using the &lt;g1&gt;let rec&lt;/g1&gt; keyword.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T181948Z" creationid="tlqk3" creationdate="20220603T181948Z">
        <seg>여러분은 지역적으로 재귀 선언을 &lt;g1&gt;let rec&lt;/g1&gt; 키워드를 사용해 정의할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can enter the unicode
arrow &lt;g1&gt;→&lt;/g1&gt; by typing &lt;g2&gt;\to&lt;/g2&gt; or &lt;g3&gt;\r&lt;/g3&gt; or &lt;g4&gt;\-&gt;&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140358Z" creationid="tlqk35" creationdate="20220321T140358Z">
        <seg>여러분은 유니코드 화살표 &lt;g1&gt;→&lt;/g1&gt;를 &lt;g2&gt;\to&lt;/g2&gt;을 치거나 or &lt;g3&gt;\r&lt;/g3&gt;또는 &lt;g4&gt;\-&gt;&lt;/g4&gt;으로 입력할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can evaluate a lambda function by passing the required parameters:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142224Z" creationid="tlqk35" creationdate="20220321T142224Z">
        <seg>여러분은 필요한 매개변수를 람다 함수에 넘겨줌으로써 값을 평가할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can get a sense of how it works by looking at the types of
&lt;g4&gt;Nat.below&lt;/g4&gt; and &lt;g5&gt;Nat.brecOn&lt;/g5&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T164255Z" creationid="tlqk3" creationdate="20220603T164255Z">
        <seg>여러분은 &lt;g4&gt;Nat.below&lt;/g4&gt;과 &lt;g5&gt;Nat.brecOn&lt;/g5&gt;의 유형을 봄으로써 이것이 어떻게 동작하는지에 대해 감을 얻을 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can import the classical axioms and make the generic
instance of decidability available by opening the &lt;g1&gt;Classical&lt;/g1&gt; namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T173723Z" creationid="tlqk3" creationdate="20220604T173723Z">
        <seg>&lt;g1&gt;Classical&lt;/g1&gt;  이름공간을 여는 것으로 여러분은 고전적 공리를 불러올 수 있고 결정가능성의 일반적 개체를 만들 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can input the raw natural number &lt;g7&gt;2&lt;/g7&gt; using the macro &lt;g8&gt;nat_lit 2&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162833Z" creationid="tlqk3" creationdate="20220604T162833Z">
        <seg>여러분은 생 자연수 &lt;g7&gt;2&lt;/g7&gt;를 매크로 &lt;g8&gt;nat_lit 2&lt;/g8&gt;을 사용해 입력할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can omit &lt;g1&gt;: Weekday&lt;/g1&gt; when declaring the &lt;g2&gt;Weekday&lt;/g2&gt; inductive type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151932Z" creationid="tlqk3" creationdate="20220526T145402Z">
        <seg>여러분은  귀납형 &lt;g2&gt;Weekday&lt;/g2&gt;를 선언할 때 &lt;g1&gt;: Weekday&lt;/g1&gt;을 생략할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can omit the type declarations when Lean has enough information to
infer it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144044Z" creationid="tlqk35" creationdate="20220321T144044Z">
        <seg>Lean이 유형을 추론하기에 충분한 정보를 갖고있을 때 여러분은 유형 선언을 생략할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can only &lt;g1&gt;revert&lt;/g1&gt; an element of the local context, that is, a
local variable or hypothesis.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T091551Z" creationid="tlqk35" creationdate="20220522T064550Z">
        <seg>여러분은 국부적인 맥락 속 요소 즉, 지역 변수나 가정만 &lt;g1&gt;되돌릴&lt;/g1&gt; 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can pass functions as parameters and by giving them names &lt;g1&gt;f&lt;/g1&gt;
and &lt;g2&gt;g&lt;/g2&gt; you can then use those functions in the implementation:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143134Z" creationid="tlqk35" creationdate="20220321T143134Z">
        <seg>여러분은 매개변수로 함수의 이름  &lt;g1&gt;f&lt;/g1&gt;과 &lt;g2&gt;g&lt;/g2&gt; 을 주는 것으로 함수를 전달할 수 있습니다.  그러면 구현에서 이들 함수를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can probably guess what this one will do.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144354Z" creationid="tlqk35" creationdate="20220321T144354Z">
        <seg>여러분은 이 정의가 아마 뭘 할 지 추측할 수 있을 거예요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can prove the theorem above
in that way:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T184540Z" creationid="tlqk35" creationdate="20220321T184540Z">
        <seg>여러분은 위의 정리를 그와 같이 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can prove this by induction on &lt;g2&gt;m&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162522Z" creationid="tlqk3" creationdate="20220527T162522Z">
        <seg>여러분은 이것을 &lt;g2&gt;m&lt;/g2&gt;에 대한 귀납으로 증명할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can provide different expansions, and the tactic
interpreter will try all of them until one succeeds.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T131634Z" creationid="tlqk35" creationdate="20220524T170741Z">
        <seg>다른 확장을 제공할 수 있습니다. 그리고 전략 
번역기는 어느 하나가 성공할 때까지 그들 모두를 시도할 것입니다..</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can see that each one of the expressions above is an object of
type &lt;g1&gt;Type&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141344Z" creationid="tlqk35" creationdate="20220321T141344Z">
        <seg>여러분도 보다시피 위 각각의 표현식은 &lt;g1&gt;Type&lt;/g1&gt; 유형입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can see the contents of these directories and files using GitHub's
browser interface.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T131400Z" creationid="tlqk3" creationdate="20220526T131400Z">
        <seg>여러분은 깃허브 브라우저 인터페이스로 이 디렉토리와 파일의 내용물을 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can see the correct order
in an editor by placing the cursor on the &lt;g3&gt;simp&lt;/g3&gt; identifier to see
the documentation string that is associated with it.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T130117Z" creationid="tlqk35" creationdate="20220524T165951Z">
        <seg>이와 연관된 문서 문자열을 보려면 &lt;g3&gt;simp&lt;/g3&gt; 식별자에 커서를 놓으면
편집기 속에서 옳바른 순서를 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can see the resulting proof term with the &lt;g1&gt;#print&lt;/g1&gt; command:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084454Z" creationid="tlqk35" creationdate="20220522T055446Z">
        <seg>여러분은 &lt;g1&gt;#print&lt;/g1&gt; 명령으로 증명 항의 결과를 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can solve the subgoal &lt;g1&gt;right&lt;/g1&gt; before &lt;g2&gt;left&lt;/g2&gt; using the &lt;g3&gt;case&lt;/g3&gt;
notation</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085119Z" creationid="tlqk35" creationdate="20220522T061342Z">
        <seg>여러분은 &lt;g3&gt;case&lt;/g3&gt; 기호를 사용해서 하위목표 &lt;g2&gt;left&lt;/g2&gt;보다 먼저 &lt;g1&gt;right&lt;/g1&gt;을 풀 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can structure your tactics using the
notation &lt;g6&gt;case &lt;tag&gt; =&gt; &lt;tactics&gt;&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220522T061221Z" creationid="tlqk35" creationdate="20220522T061221Z">
        <seg>여러분은 여러분의 전략을 &lt;g6&gt;case &lt;tag&gt; =&gt; &lt;tactics&gt;&lt;/g6&gt;기호를 사용해 구조화할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can then replace the &lt;g1&gt;sorry&lt;/g1&gt; in the previous proof with &lt;g2&gt;succ_add&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T162623Z" creationid="tlqk3" creationdate="20220527T162623Z">
        <seg>그럼 여러분은 이전 증명에서 &lt;g1&gt;sorry&lt;/g1&gt;를 &lt;g2&gt;succ_add&lt;/g2&gt;으로 대체할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can therefore proceed as
though &lt;g2&gt;α&lt;/g2&gt;, &lt;g3&gt;β&lt;/g3&gt;, &lt;g4&gt;γ&lt;/g4&gt;, &lt;g5&gt;g&lt;/g5&gt;, &lt;g6&gt;f&lt;/g6&gt;, &lt;g7&gt;h&lt;/g7&gt;, and &lt;g8&gt;x&lt;/g8&gt; are fixed
objects when you write your definitions, and let Lean abstract the
definitions for you automatically.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150013Z" creationid="tlqk35" creationdate="20220321T150013Z">
        <seg>그러므로 여러분은 여러분의 정의를 작성할 때  &lt;g2&gt;α&lt;/g2&gt;, &lt;g3&gt;β&lt;/g3&gt;, &lt;g4&gt;γ&lt;/g4&gt;, &lt;g5&gt;g&lt;/g5&gt;, &lt;g6&gt;f&lt;/g6&gt;, &lt;g7&gt;h&lt;/g7&gt;, &lt;g8&gt;x&lt;/g8&gt;가 고정된 대상임에도 사용할 수 있습니다. 그리고 lean이 여러분을 위해 자동으로 정의를 축약할 수 있게 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can think of
the inhabitant of &lt;g10&gt;p&lt;/g10&gt; as being the "fact that &lt;g11&gt;p&lt;/g11&gt; is true." A
proof of &lt;g12&gt;p → q&lt;/g12&gt; uses "the fact that &lt;g13&gt;p&lt;/g13&gt; is true" to obtain "the
fact that &lt;g14&gt;q&lt;/g14&gt; is true."</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T111240Z" creationid="tlqk35" creationdate="20220321T160148Z">
        <seg>&lt;g10&gt;p&lt;/g10&gt;의 머무름은 "&lt;g11&gt;p&lt;/g11&gt;가 참이라는 사실"로 생각할 수 있습니다. &lt;g12&gt;p → q&lt;/g12&gt;의 증명은 "&lt;g13&gt;p&lt;/g13&gt;가 참이라는 사실"로  "&lt;g14&gt;q&lt;/g14&gt;가 참이라는 사실"을 얻는데 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can type
things into the editor and modify the examples, and Lean will check the results and provide feedback continuously as you
type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T134940Z" creationid="tlqk35" creationdate="20220321T134940Z">
        <seg>여러분은 편집기에 무언가를 치거나 예제를 수정할 수 있습니다. 그리고 린은 여러분이 치는 동안 지속적으로 결과를 확인하고 피드백을 제공할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can type these corner quotes using &lt;g3&gt;\f&lt;&lt;/g3&gt; and &lt;g4&gt;\f&gt;&lt;/g4&gt;,
respectively.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183500Z" creationid="tlqk35" creationdate="20220321T183500Z">
        <seg>여러분은 이런 인용 꺽쇠를 각각 &lt;g3&gt;\f&lt;&lt;/g3&gt;과 &lt;g4&gt;\f&gt;&lt;/g4&gt;을 사용해서 칠 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;g3&gt;match&lt;/g3&gt; to provide a proof of the claim for each
constructor:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T151407Z" creationid="tlqk3" creationdate="20220526T151407Z">
        <seg>우리는 각 생성자에 대해 주장의 증명을 제공하기 위해 &lt;g3&gt;match&lt;/g3&gt;를 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use &lt;g9&gt;⟨a, b⟩&lt;/g9&gt; or &lt;g10&gt;Sigma.mk a b&lt;/g10&gt; to create a
dependent pair.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T152318Z" creationid="tlqk35" creationdate="20220321T152318Z">
        <seg>여러분은 &lt;g9&gt;⟨a, b⟩&lt;/g9&gt; 또는 &lt;g10&gt;Sigma.mk a b&lt;/g10&gt;를 종속적 쌍을 만드는데 쓸 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use a numeral (e.g., &lt;g1&gt;2&lt;/g1&gt;) to denote an element of any type that implements
the type class &lt;g2&gt;OfNat&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162337Z" creationid="tlqk3" creationdate="20220604T162337Z">
        <seg>여러분은 수치값(예를 들어 &lt;g1&gt;2&lt;/g1&gt;)을 유형클래스 &lt;g2&gt;OfNat&lt;/g2&gt;을 구현하는 임의의 유형의 원소를 표시하는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use it to introduce several variables:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T085902Z" creationid="tlqk35" creationdate="20220522T062237Z">
        <seg>여러분은 여러 변수들을 도입하는데 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use other more interesting expressions inside a &lt;g1&gt;def&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T144344Z" creationid="tlqk35" creationdate="20220321T144344Z">
        <seg>여러분은 다른 더 흥미로운 식을 &lt;g1&gt;def&lt;/g1&gt; 안에 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use our new scalar array multiplication instance on arrays of type &lt;g1&gt;Array β&lt;/g1&gt;
with a scalar of type &lt;g2&gt;α&lt;/g2&gt; whenever you have an instance &lt;g3&gt;HMul α β γ&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T164444Z" creationid="tlqk3" creationdate="20220604T164444Z">
        <seg>여러분은 &lt;g3&gt;HMul α β γ&lt;/g3&gt; 개체를 갖는 언제든지 우리의 새 스칼라 배열 곱셈 개체를 유형 &lt;g2&gt;α&lt;/g2&gt;의 스칼라와 &lt;g1&gt;Array β&lt;/g1&gt;형의 배열에 대해 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;g1&gt;match&lt;/g1&gt; notation in tactics too:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T172314Z" creationid="tlqk3" creationdate="20220527T172314Z">
        <seg>여러분은 전략에서 &lt;g1&gt;match&lt;/g1&gt; 기호도 사용할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the command &lt;g1&gt;#print&lt;/g1&gt; to inspect how simple &lt;g2&gt;inferInstance&lt;/g2&gt; is.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T161816Z" creationid="tlqk3" creationdate="20220604T161816Z">
        <seg>여러분은 &lt;g1&gt;#print&lt;/g1&gt; 명령으로 &lt;g2&gt;inferInstance&lt;/g2&gt;가 얼마나 단순한지 검사할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the command &lt;g1&gt;export&lt;/g1&gt; to create the alias &lt;g2&gt;default&lt;/g2&gt; for &lt;g3&gt;Inhabited.default&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T160544Z" creationid="tlqk3" creationdate="20220604T160544Z">
        <seg>여러분은 g1&gt;export&lt;/g1&gt; 명령으로 &lt;g3&gt;Inhabited.default&lt;/g3&gt;에 대한 &lt;g2&gt;기본&lt;/g2&gt; 별명을 만들 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the command &lt;g1&gt;open scoped &lt;namespace&gt;&lt;/g1&gt; to activate scoped attributes but will
not "open" the names from the namespace.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T171041Z" creationid="tlqk3" creationdate="20220604T171041Z">
        <seg>여러분은 &lt;g1&gt;open scoped &lt;namespace&gt;&lt;/g1&gt; 명령으로 범위가 지정된 속정을 활성화할 수 있습니다. 그러나 이름공간으로부터 이름들을 "개방"하지는 않습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can view an element of
the type &lt;g2&gt;ImageOf f b&lt;/g2&gt; as evidence that &lt;g3&gt;b&lt;/g3&gt; is in the image of
&lt;g4&gt;f&lt;/g4&gt;, whereby the constructor &lt;g5&gt;imf&lt;/g5&gt; is used to build such
evidence.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T144235Z" creationid="tlqk3" creationdate="20220604T144235Z">
        <seg>여러분은 &lt;g2&gt;ImageOf f b&lt;/g2&gt;형 원소를 &lt;g3&gt;b&lt;/g3&gt;가 &lt;g4&gt;f&lt;/g4&gt;의 이미지에 있다는 증거로 볼 수 있습니다. 이로써 생성자 &lt;g5&gt;imf&lt;/g5&gt;는 그런 증거를 만드는데 사용됩니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can view the parameter of the type class &lt;g1&gt;Inhabited&lt;/g1&gt; as an &lt;g2&gt;input&lt;/g2&gt; value for the type class synthesizer.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T163519Z" creationid="tlqk3" creationdate="20220604T163519Z">
        <seg>여러분은 유형 클래스 합성기에 대한 &lt;g2&gt;입력&lt;/g2&gt;값으로써 유형 클래스 &lt;g1&gt;Inhabited&lt;/g1&gt;의 매개변수를 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can write &lt;g1&gt;#print sub2&lt;/g1&gt; to see how the function was compiled to
recursors.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T162607Z" creationid="tlqk3" creationdate="20220529T162607Z">
        <seg>여러분은 &lt;g1&gt;#print sub2&lt;/g1&gt;를 써 어떻게 함수가 재귀자로부터 컴파일되었는지 볼 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can write a tactic script incrementally.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T084509Z" creationid="tlqk35" creationdate="20220522T055516Z">
        <seg>여러분은 점진적으로 전략 스크립트를 작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can write this goal as follows:</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T083004Z" creationid="tlqk35" creationdate="20220321T184440Z">
        <seg>여러분은 이 목표를 다음과 같이 작성할 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can, in general, leave off the
type annotation and let Lean infer it for you.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T142754Z" creationid="tlqk35" creationdate="20220321T142754Z">
        <seg>일반적으로 여러분도 유형 표기를 빼고 린에게 유형을 추론하게 둘 수 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You do not have to indent the lines within a section.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T150121Z" creationid="tlqk35" creationdate="20220321T150121Z">
        <seg>섹션 안에서 줄에 들여쓰기를 하거나 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You have actually come up against one of the most subtle aspects of
Lean's typing system.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141553Z" creationid="tlqk35" creationdate="20220321T141553Z">
        <seg>여러분은 린의 유형화 시스템의 가장 미묘한 면 중 하나를 마주쳤습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You have already seen the
introduction rules for an inductive type: they are just the
constructors that are specified in the definition of the type.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151848Z" creationid="tlqk3" creationdate="20220526T144511Z">
        <seg>여러분은 귀납형에 대한 도입규칙을 이미 봤었습니다. 그들은 그저 유형의 정의에서 명시된 생성자들일 뿐입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You have already seen two of the
most common ones, &lt;g1&gt;#check&lt;/g1&gt; and &lt;g2&gt;#eval&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T125134Z" creationid="tlqk3" creationdate="20220526T125134Z">
        <seg>여러분은 가장 흔한 것 중 두 개인 &lt;g1&gt;#check&lt;/g1&gt;과 &lt;g2&gt;#eval&lt;/g2&gt;를 봤습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You have seen that if you have &lt;g1&gt;m : Nat&lt;/g1&gt; and &lt;g2&gt;n : Nat&lt;/g2&gt;, then
&lt;g3&gt;(m, n)&lt;/g3&gt; denotes the ordered pair of &lt;g4&gt;m&lt;/g4&gt; and &lt;g5&gt;n&lt;/g5&gt; which is of
type &lt;g6&gt;Nat × Nat&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T141120Z" creationid="tlqk35" creationdate="20220321T141120Z">
        <seg>여러분은 &lt;g1&gt;m : Nat&lt;/g1&gt;과  &lt;g2&gt;n : Nat&lt;/g2&gt;이면, &lt;g3&gt;(m, n)&lt;/g3&gt;은 &lt;g6&gt;Nat × Nat&lt;/g6&gt;유형인 &lt;g4&gt;m&lt;/g4&gt;과 &lt;g5&gt;n&lt;/g5&gt;의 순서쌍을 가리킨다는 것을 보았습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You have to remember that the second
argument to &lt;g5&gt;div.F&lt;/g5&gt;, the recipe for the recursion, is a function
that is supposed to return the divide by &lt;g6&gt;y&lt;/g6&gt; function for all values
&lt;g7&gt;x₁&lt;/g7&gt; smaller than &lt;g8&gt;x&lt;/g8&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T171543Z" creationid="tlqk3" creationdate="20220603T171543Z">
        <seg>여러분은 재귀를 위한 요리법인 &lt;g5&gt;div.F&lt;/g5&gt;의 두 번째 인수가 &lt;g8&gt;x&lt;/g8&gt;보다 작은 모든 &lt;g7&gt;x₁&lt;/g7&gt;값에 대한 &lt;g6&gt;y&lt;/g6&gt; 함수로 나눠진 것을 반환하기로 한 함수임을 기억해야만 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You implement the instance
for your own types and use chaining to convert complex values into strings.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T162011Z" creationid="tlqk3" creationdate="20220604T162011Z">
        <seg>여러분은 여러분의 유형을 위한 개체를 구현하고 문자열로 복잡한 값에서 문자열로 연결하기를 사용합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You may
also provide the value for an implicit parameter when Lean failed to
infer it.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T140846Z" creationid="tlqk3" creationdate="20220526T140846Z">
        <seg>여러분은 린이 그것에 대해 추론을 실패했을 때 암시적인 매개변수에 대한 값을 제공할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You saw in &lt;g1&gt;Variables and Sections&lt;/g1&gt; that the
&lt;g2&gt;section&lt;/g2&gt; command makes it possible not only to group together
elements of a theory that go together, but also to declare variables
that are inserted as arguments to theorems and definitions, as
necessary.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174919Z" creationid="tlqk35" creationdate="20220524T174919Z">
        <seg>여러분은 &lt;g1&gt;Variables and Sections&lt;/g1&gt;에서 &lt;g2&gt;section&lt;/g2&gt; 명령으로 필요하다면
함께 할 이론의 요소를 한데 묶을 수 있을 뿐만 아니라 정리와 정의에 인수로 삽입될 변수를 선언할 수도 있습니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You should also try to understand why the reverse implication is not derivable in the last example.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T074507Z" creationid="tlqk35" creationdate="20220321T183807Z">
        <seg>여러분은 왜 명제의 역의 증명이 마지막 예제에서 불가능한지 이해하려고 노력해봐야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You should get 47 here.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180544Z" creationid="tlqk3" creationdate="20220603T180544Z">
        <seg>여러분은 여기서 47을 얻어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You should think about how these give rise to the introduction and
elimination rules that you have already seen.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T151659Z" creationid="tlqk3" creationdate="20220527T151659Z">
        <seg>여러분은 이것이 어떻게 여러분이 이미 봐온 도입과 제거 규칙을 제공하는지에 대해 생각해봐야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You should try
declaring some constants and type checking some expressions on your
own.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T135902Z" creationid="tlqk35" creationdate="20220321T135902Z">
        <seg>여러분은 스스로 몇몇 상수를 선언하고 몇 가지 식의 유형을 확인해보길 바랍니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You will generally use lower-case Greek
letters like &lt;g10&gt;α&lt;/g10&gt;, &lt;g11&gt;β&lt;/g11&gt;, and &lt;g12&gt;γ&lt;/g12&gt; to range over types.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T140558Z" creationid="tlqk35" creationdate="20220321T140558Z">
        <seg>여러분은 유형을 포괄하기 위해  &lt;g10&gt;α&lt;/g10&gt;, &lt;g11&gt;β&lt;/g11&gt;, &lt;g12&gt;γ&lt;/g12&gt;같은 그리스 소문자 자주 사용할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You will have no doubt noticed by now that tactics can fail.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T111747Z" creationid="tlqk35" creationdate="20220524T151032Z">
        <seg>이제 여러분은 의심의 여지없이 그 전략은 실패함을 눈치챌 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You will learn various methods to support this in &lt;g1&gt;dependent type
theory&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T132230Z" creationid="tlqk35" creationdate="20220321T132230Z">
        <seg>여러분은 &lt;g1&gt;의존 유형론&lt;/g1&gt;에서 이를 지원하는 다양한 방법에 대해 배웁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You will see in &lt;g1&gt;Chapter Inductive Types&lt;/g1&gt; that
these tactics are quite general.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T151735Z" creationid="tlqk35" creationdate="20220522T071625Z">
        <seg>&lt;g1&gt;귀납형 장&lt;/g1&gt;에서 이 전략들은 꽤나 일반적임을 볼 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You will see later how these terms are evaluated.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T143658Z" creationid="tlqk35" creationdate="20220321T143658Z">
        <seg>여러분은 나중에 이 항들이 어떻게 평가되는지 볼 겁니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a choice principle, which produces data from an existential proposition.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163956Z" creationid="tlqk3" creationdate="20220605T163956Z">
        <seg>존재 명제로부터 데이터를 만들어내는 선택 원리</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>a quotient construction, which implies function extensionality</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163936Z" creationid="tlqk3" creationdate="20220605T163936Z">
        <seg>함수 확장성을 함의하는 몫 구성</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>apply And.intro &lt;;&gt; triv

-- We now add a (recursive) extension
macro_rules | `(tactic| triv) =&gt; `(tactic| apply And.intro &lt;;&gt; triv)

example (x : α) (h : p) : x = x ∧ p := by</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T171116Z" creationid="tlqk35" creationdate="20220524T171116Z">
        <seg>apply And.intro &lt;;&gt; triv

-- 이제 우리는 (재귀적인) 확장을 추가합니다.
macro_rules | `(tactic| triv) =&gt; `(tactic| apply And.intro &lt;;&gt; triv)

example (x : α) (h : p) : x = x ∧ p := by</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>creates aliases for &lt;g1&gt;succ&lt;/g1&gt;, &lt;g2&gt;add&lt;/g2&gt;, and &lt;g3&gt;sub&lt;/g3&gt; in the current
namespace, so that whenever the namespace is open, these aliases are
available.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181545Z" creationid="tlqk3" creationdate="20220525T181545Z">
        <seg>이 이름공간이 열리기만 하면 별명을 이용할 수 있도록 현재 이름공간에 &lt;g1&gt;succ&lt;/g1&gt;과 &lt;g2&gt;add&lt;/g2&gt;과 &lt;g3&gt;sub&lt;/g3&gt;에 대한 별명을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>creates aliases for everything in the &lt;g1&gt;Nat&lt;/g1&gt; namespace &lt;g2&gt;except&lt;/g2&gt; the identifiers listed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181149Z" creationid="tlqk3" creationdate="20220525T181149Z">
        <seg>나열된 식별자를 &lt;g2&gt;제외한&lt;/g2&gt; &lt;g1&gt;Nat&lt;/g1&gt; 이름공간 속 모든 것에 대한 별명을 만듭니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>creates aliases for only the identifiers listed.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181029Z" creationid="tlqk3" creationdate="20220525T181029Z">
        <seg>나열된 식별자들만을 위한 별명을 만드세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>creates aliases renaming &lt;g1&gt;Nat.mul&lt;/g1&gt; to &lt;g2&gt;times&lt;/g2&gt; and &lt;g3&gt;Nat.add&lt;/g3&gt; to &lt;g4&gt;plus&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220525T181256Z" creationid="tlqk3" creationdate="20220525T181256Z">
        <seg>&lt;g1&gt;Nat.mul&lt;/g1&gt;을 &lt;g2&gt;times&lt;/g2&gt; 으로 그리고 &lt;g3&gt;Nat.add&lt;/g3&gt;을 &lt;g4&gt;plus&lt;/g4&gt;로 다시 이름지어 별명을 만드세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>error: tactic 'rewrite' failed, did not find instance of the pattern</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183115Z" creationid="tlqk3" creationdate="20220604T183115Z">
        <seg>오류: '다시 쓰기' 전술이 실패했습니다. 패턴의 개체를 찾지 못했습니다.(error: tactic 'rewrite' failed, did not find instance of the pattern)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>fun x =&gt; id1 x

-- In this example, implicit lambda introduction has been disabled
-- because we used the binder annotation `{...}`
def id5 : {α : Type} → α → α :=</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T135905Z" creationid="tlqk3" creationdate="20220526T135905Z">
        <seg>fun x =&gt; id1 x

-- 이 예제에서 암시적인 람다의 도입은 결합 주석 `{...}`을
-- 사용했기 때문에 해제되었습니다. 
def id5 : {α : Type} → α → α :=</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>imports the file &lt;g1&gt;Bar/Baz/Blah.olean&lt;/g1&gt;, where the descriptions are
interpreted relative to the Lean &lt;g2&gt;search path&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T174156Z" creationid="tlqk35" creationdate="20220524T174156Z">
        <seg>린의 파일 &lt;g2&gt;search path&lt;/g2&gt;에 상대적인 주소로 설명된 곳에서 &lt;g1&gt;Bar/Baz/Blah.olean&lt;/g1&gt;을 불러옵니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>in the target expression</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183124Z" creationid="tlqk3" creationdate="20220604T183124Z">
        <seg>대상 표현식에서</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>is treated as a macro, and expands to</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220524T180127Z" creationid="tlqk35" creationdate="20220524T180054Z">
        <seg>은 매크로로 간주되고 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mdbook watch --open  # opens the output in `out/` in your default browser</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T172153Z" creationid="tlqk35" creationdate="20220321T172153Z">
        <seg>mdbook watch을 열고 # 여러분의 기본 브라우저에서 `out/`에서 출력을 여세요.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>mutually recursive definitions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170453Z" creationid="tlqk3" creationdate="20220529T170448Z">
        <seg>상호적으로 재귀적인 정의</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>nested_and_mutual_recursion:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T173315Z" creationid="tlqk3" creationdate="20220603T173315Z">
        <seg>중접되고 상호적인 재귀</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>notation "‹" p "›" =&gt; show p by assumption</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T183620Z" creationid="tlqk35" creationdate="20220321T183620Z">
        <seg>기호 "‹" p "›" =&gt; 은 가정에 의해 p가 참임을 보입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>open Classical

-- distributivity
example (p q r : Prop) : p ∧ (q ∨ r) ↔ (p ∧ q) ∨ (p ∧ r) :=</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk35" changedate="20220321T170530Z" creationid="tlqk35" creationdate="20220321T170530Z">
        <seg>open Classical

-- 분배성
example (p q r : Prop) : p ∧ (q ∨ r) ↔ (p ∧ q) ∨ (p ∧ r) :=</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>or just</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183402Z" creationid="tlqk3" creationdate="20220604T183402Z">
        <seg>아니면 그냥</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>show p ∧ (q ∨ r) from ⟨hp, Or.inr hr⟩))

-- an example that requires classical reasoning
example (p q : Prop) : ¬(p ∧ ¬q) → (p → q) :=</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165722Z" creationid="tlqk35" creationdate="20220321T170550Z">
        <seg>show p ∧ (q ∨ r) from ⟨hp, Or.inr hr⟩))

-- 고전적 추론을 필요로 하는 예제
example (p q : Prop) : ¬(p ∧ ¬q) → (p → q) :=</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>structurally recursive definitions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170432Z" creationid="tlqk3" creationdate="20220529T170432Z">
        <seg>구조적으로 재귀적인 정의</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>the axiom of propositional extensionality</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220605T163920Z" creationid="tlqk3" creationdate="20220605T163920Z">
        <seg>명제 확장성 공리</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>triv

-- You cannot prove the following theorem using `triv`
-- example (x : α) : x = x := by
--  triv

-- Let's extend `triv`.</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220814T131551Z" creationid="tlqk35" creationdate="20220524T170842Z">
        <seg>triv

-- 여러분은 `triv` 사용해 다음 정리를 증명할 수 없습니다.
-- example (x : α) : x = x := by
--  triv

-- 'triv'를 추가해봅시다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>variable (p q r : Prop)

-- commutativity of ∧ and ∨
example : p ∧ q ↔ q ∧ p := sorry
example : p ∨ q ↔ q ∨ p := sorry

-- associativity of ∧ and ∨
example : (p ∧ q) ∧ r ↔ p ∧ (q ∧ r) := sorry
example : (p ∨ q) ∨ r ↔ p ∨ (q ∨ r) := sorry

-- distributivity
example : p ∧ (q ∨ r) ↔ (p ∧ q) ∨ (p ∧ r) := sorry
example : p ∨ (q ∧ r) ↔ (p ∨ q) ∧ (p ∨ r) := sorry

-- other properties
example : (p → (q → r)) ↔ (p ∧ q → r) := sorry
example : ((p ∨ q) → r) ↔ (p → r) ∧ (q → r) := sorry
example : ¬(p ∨ q) ↔ ¬p ∧ ¬q := sorry
example : ¬p ∨ ¬q → ¬(p ∧ q) := sorry
example : ¬(p ∧ ¬p) := sorry
example : p ∧ ¬q → ¬(p → q) := sorry
example : ¬p → (p → q) := sorry
example : (¬p ∨ q) → (p → q) := sorry
example : p ∨ False ↔ p := sorry
example : p ∧ False ↔ False := sorry
example : (p → q) → (¬q → ¬p) := sorry</seg>
      </tuv>
      <tuv lang="ko" changeid="shimsw" changedate="20220811T165829Z" creationid="tlqk35" creationdate="20220321T170650Z">
        <seg>variable (p q r : Prop)

-- ∧과 ∨의 교환성
example : p ∧ q ↔ q ∧ p := sorry
example : p ∨ q ↔ q ∨ p := sorry

-- ∧과 ∨의 결합성
example : (p ∧ q) ∧ r ↔ p ∧ (q ∧ r) := sorry
example : (p ∨ q) ∨ r ↔ p ∨ (q ∨ r) := sorry

-- 분배성
example : p ∧ (q ∨ r) ↔ (p ∧ q) ∨ (p ∧ r) := sorry
example : p ∨ (q ∧ r) ↔ (p ∨ q) ∧ (p ∨ r) := sorry

-- 기타 성질들
example : (p → (q → r)) ↔ (p ∧ q → r) := sorry
example : ((p ∨ q) → r) ↔ (p → r) ∧ (q → r) := sorry
example : ¬(p ∨ q) ↔ ¬p ∧ ¬q := sorry
example : ¬p ∨ ¬q → ¬(p ∧ q) := sorry
example : ¬(p ∧ ¬p) := sorry
example : p ∧ ¬q → ¬(p → q) := sorry
example : ¬p → (p → q) := sorry
example : (¬p ∨ q) → (p → q) := sorry
example : p ∨ False ↔ p := sorry
example : p ∧ False ↔ False := sorry
example : (p → q) → (¬q → ¬p) := sorry</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>well-founded recursive definitions</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220529T170451Z" creationid="tlqk3" creationdate="20220529T170438Z">
        <seg>잘 세워진 재귀적 정의</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>where &lt;g1&gt;a&lt;/g1&gt; is a sequence of data type parameters, &lt;g2&gt;b&lt;/g2&gt; is the
sequence of arguments to the constructors, and &lt;g3&gt;p[a, b]&lt;/g3&gt; are the
indices, which determine which element of the inductive family the
construction inhabits.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T152521Z" creationid="tlqk35" creationdate="20220528T161227Z">
        <seg>여기서 &lt;g1&gt;a&lt;/g1&gt;는 데이터 유형 매개변수의 나열이고 &lt;g2&gt;b&lt;/g2&gt;는 생성자에 대한 인수의 나열이고 &lt;g3&gt;p[a, b]&lt;/g3&gt; 는 귀납군의 어떤 원소가 생성자를 어디에 머무르게 할지 결정하는  색인입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>where &lt;g1&gt;intro x&lt;/g1&gt; is the navigation command entering inside the &lt;g2&gt;fun&lt;/g2&gt; binder.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183317Z" creationid="tlqk3" creationdate="20220604T183317Z">
        <seg>여기서 &lt;g1&gt;intro x&lt;/g1&gt;는 &lt;g2&gt;fun&lt;/g2&gt; 결합자 내부로 들어가는 탐색 명령입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>where the precedences do not sufficiently determine associativity,
Lean's parser will default to right associativity.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220526T123304Z" creationid="tlqk3" creationdate="20220526T123304Z">
        <seg>여기서 우선순위는 결합성을 결정하기에 충분하지 않아서  린의 구문분석기는 오른쪽 결합성으로 기본설정을 할 것입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>where the square brackets indicate that the argument of type &lt;g1&gt;Add a&lt;/g1&gt; is &lt;g2&gt;instance implicit&lt;/g2&gt;,
i.e. that it should be synthesized using typeclass resolution.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T154241Z" creationid="tlqk3" creationdate="20220604T154241Z">
        <seg>여기서 대괄호는 &lt;g1&gt;Add a&lt;/g1&gt;의 유형이 &lt;g2&gt;instance implicit&lt;/g2&gt;임을 가리킵니다. 즉, 이것은 유형클래스 해결책을 사용해 합성되어야 합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>which is just syntax sugar for</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220604T183711Z" creationid="tlqk3" creationdate="20220604T183711Z">
        <seg>이것은 다음에 대한 문법적 설탕입니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>you find the following:</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220527T155255Z" creationid="tlqk3" creationdate="20220527T155255Z">
        <seg>여러분은 다음을 발견합니다.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>| (a₁, a₂) =&gt; a = a₁ ∨ a = a₂

-- auxiliary lemma for proving mem_respects
private theorem mem_swap {a : α} :</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220610T181838Z" creationid="tlqk3" creationdate="20220610T181838Z">
        <seg>| (a₁, a₂) =&gt; a = a₁ ∨ a = a₂

--mem_respects를 증명하기 위한 보조 정리 mem_swap {a : α}:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>| _ =&gt; 0

-- Try it out.</seg>
      </tuv>
      <tuv lang="ko" changeid="tlqk3" changedate="20220603T180555Z" creationid="tlqk3" creationdate="20220603T180555Z">
        <seg>| _ =&gt; 0

-- 시도해 보세요.</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
